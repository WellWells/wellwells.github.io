<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on WellWells</title>
        <link>https://wellstsai.com/tags/git/</link>
        <description>Recent content in Git on WellWells</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Mon, 25 Mar 2024 22:50:00 +0800</lastBuildDate><atom:link href="https://wellstsai.com/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git 分支的建立與切換與刪除</title>
        <link>https://wellstsai.com/post/git-tutorial-branches/</link>
        <pubDate>Mon, 25 Mar 2024 22:50:00 +0800</pubDate>
        
        <guid>https://wellstsai.com/post/git-tutorial-branches/</guid>
        <description>&lt;img src="https://wellstsai.com/post/git-tutorial-branches/cover.jpg" alt="Featured image of post Git 分支的建立與切換與刪除" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;接續前篇 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/git-tutorial-init&#34; &gt;開始使用 Git 管理專案&lt;/a&gt;，我們學習了如何透過 Git 與 VSCode 建立儲存庫、新增檔案至暫存區，並提交至本地端的儲存庫。&lt;/p&gt;
&lt;p&gt;本篇將著重在分支（branch）的操作上。並藉由 VSCode 與 Git Graph 說明分支的切換、新增、刪除。&lt;/p&gt;
&lt;h2 id=&#34;什麼是分支&#34;&gt;什麼是分支？&lt;/h2&gt;
&lt;p&gt;分支在 Git 中扮演著重要的角色。舉例來說，當我們需要開發一個新功能時，可以在不影響主分支（例如 main/master）的情況下，建立一個新的分支（例如 feature/user-login）。待新功能開發完成後，再將其與主分支整合。&lt;/p&gt;
&lt;p&gt;以 GitHub 上 &lt;a class=&#34;link&#34; href=&#34;https://github.com/AdguardTeam/AdGuardHome&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AdGuardHome&lt;/a&gt; 專案為例：&lt;/p&gt;
&lt;p&gt;master 分支藍色為 v108 的新版本開發，現有正式版本為紅色 v107，每釋出一版 beta 或是 release 就會開一個新的分支進行記錄。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_branches.png&#34;
	width=&#34;911&#34;
	height=&#34;911&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_branches_hu2748a17507c3758dbab78fd123749172_41941_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-branches/adguardhome_branches_hu2748a17507c3758dbab78fd123749172_41941_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AdGuardHome 的分支結構&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;建立分支的好處有以下幾點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允許團隊成員進行多個獨立的工作，而彼此之間不會互相干擾，並能夠輕鬆地同步工作進度。&lt;/li&gt;
&lt;li&gt;在不影響主分支的情況下，可以進行修改和測試，確保主分支的穩定性。&lt;/li&gt;
&lt;li&gt;可以自由切換不同分支版本，以便確認各版本之間的差異，進而更好地掌握整個開發流程。&lt;/li&gt;
&lt;li&gt;當操作出錯時，可以更直觀地還原到原本的狀態，進行修復。此外，雖然也可以透過 reflog 來進行還原，但相較之下較為複雜不直觀。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;何時應該建立分支？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在開發新功能或修復 Bug 時。&lt;/li&gt;
&lt;li&gt;當不確定操作 Git 會如何影響時，或進行複雜操作時。&lt;/li&gt;
&lt;li&gt;當要針對里程碑進行新分支建立時，確保每個版本都是獨立且可控的。&lt;/li&gt;
&lt;li&gt;🚩當在本地複製遠端儲存庫後，進行新功能修改時。🚩&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;👉 其中第 4 點與第 1 點類似，但值得特別提出來討論的是：&lt;/p&gt;
&lt;p&gt;在初學 Git 時，若忽略了此步驟，往後在提交時很容易發生因主分支改變而引發的衝突。&lt;/p&gt;
&lt;p&gt;此外，在多人共同開發的情況下，通常會希望由單一負責人進行主分支的整合與確認。因此建議在不影響主分支的情況下開啟新分支進行推送，然後由負責人進行整合（merge 或 cherry-pick）。&lt;/p&gt;
&lt;h2 id=&#34;複製一個遠端儲存庫git-clone&#34;&gt;複製一個遠端儲存庫（git clone）&lt;/h2&gt;
&lt;p&gt;首先，我們先從 GitHub 上複製既有的遠端儲存庫，在此我選用的是 &lt;a class=&#34;link&#34; href=&#34;https://github.com/AdguardTeam/AdGuardHome&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AdGuardHome&lt;/a&gt; 這個專案，專案選用是不限定的，也可以使用自己的新增專案，或是其它相關的專案都可以。&lt;/p&gt;
&lt;p&gt;我們到專案頁面下，有一個藍色的 &lt;code&gt;Code&lt;/code&gt; 按鈕，在 Local 標籤下，找到 Clone 選項內的 HTTPS 的儲存庫網址：&lt;code&gt;https://github.com/AdguardTeam/AdGuardHome.git&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若使用 SSH 的話，需要配置一組金鑰給 GitHub，可以參照先前文章：&lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/ssh-connection/#%e4%bd%bf%e7%94%a8-ssh-%e9%87%91%e9%91%b0%e5%ad%98%e5%8f%96-github&#34; &gt;使用 SSH 金鑰進行無密碼遠端連線&lt;/a&gt; 進行金鑰配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_github.png&#34;
	width=&#34;1544&#34;
	height=&#34;578&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_github_hudc2245f858d0bc7da074ea0607e7439a_50988_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-branches/adguardhome_github_hudc2245f858d0bc7da074ea0607e7439a_50988_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;找到 GitHub 上的專案進行 clone&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;267&#34;
		data-flex-basis=&#34;641px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;到 VSCode 中，&lt;code&gt;Ctrl + `&lt;/code&gt; 叫出終端介面，輸入 git clone 網址，便可以進行複製：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PS C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;sers&lt;span style=&#34;color:#ae81ff&#34;&gt;\W&lt;/span&gt;ells&amp;gt; git clone https://github.com/AdguardTeam/AdGuardHome.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AdGuardHome&amp;#39;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Enumerating objects: 35971, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Counting objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3588/3588&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Compressing objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;689/689&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Total &lt;span style=&#34;color:#ae81ff&#34;&gt;35971&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 3101&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;3014&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 2898&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, pack-reused &lt;span style=&#34;color:#ae81ff&#34;&gt;32383&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Receiving objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;35971/35971&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 18.10 MiB | 16.05 MiB/s, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Resolving deltas: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;27165/27165&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以在 VSCode 中，按 F1 叫出指令視窗，輸入 &lt;code&gt;git clone&lt;/code&gt; 後 enter，並在提供網址後，選擇儲存庫的路徑。不過這我幾乎沒有用過。畢竟直接在終端機輸入 git clone 打指令快速多了。&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/git_clone_in_vscode.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在 VSCode 中使用 git clone 介面&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;之後，透過可以於終端機輸入 &lt;code&gt;code AdGuardHome&lt;/code&gt; 或是 &lt;code&gt;Ctrl+K, Ctrl+O&lt;/code&gt; 以開啟資料夾，選擇 AdGuardHome 這個資料夾。便可開啟 AdGuardHome 的專案資料夾。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code 專案資料夾
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分支的切換git-checkout&#34;&gt;分支的切換（git checkout）&lt;/h2&gt;
&lt;h3 id=&#34;切換到現有分支&#34;&gt;切換到現有分支&lt;/h3&gt;
&lt;p&gt;打開 Git Graph，可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空心的藍點為本地端的指標，為我們目前所操作的位置。目前是指到的對應提交 ID 為 2611534d。&lt;/li&gt;
&lt;li&gt;粗體表示選中的分支，目前是選中 &lt;code&gt;master/origin&lt;/code&gt;。同時本地端也有一個 master 分支。&lt;/li&gt;
&lt;li&gt;遠端指標（origin/HEAD）指向 master/origin，意思是預設的主分支。指標就是指標，是不能進行 checkout 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_branch_example.png&#34;
	width=&#34;1099&#34;
	height=&#34;199&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-branches/adguardhome_branch_example_hua4bc6b7440ff28a8e7a3acb3f373a286_13863_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-branches/adguardhome_branch_example_hua4bc6b7440ff28a8e7a3acb3f373a286_13863_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AdGuardHome 的 Git Graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;552&#34;
		data-flex-basis=&#34;1325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;進行 checkout 切換時，就是把 HEAD 指標指到某個分支或是提交上。&lt;/p&gt;
&lt;p&gt;我們對著分支的框框雙點兩下，或是右鍵 → Checkout Branch…，就可以切換到對應的分支。此時原本的分支有的 A 檔案、B 檔案，如果切換的分支沒有。則會自動刪除。（沒有忽略的情況下。）&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/checkout_branch.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;切換 Git 分支&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;分離指標detached-head&#34;&gt;分離指標（detached HEAD）&lt;/h3&gt;
&lt;p&gt;切換是可以切換到提交（commit）上的，對著任何一個提交（commit）右鍵進行 checkout，會出現 detached HEAD （分離指標）的狀態，此狀態的意思是目前 HEAD 沒有指在分支上，若未來在推送時，由於 HEAD 沒有指向分支所以沒辦法成功推送。&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/checkout_branch_detached.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;checkout 至提交&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;此外在分離指標狀態下進行提交後，未來在切分支時，若沒有先建立分支，原本所提交的內容由於沒有分支，所以會不見變成孤立的提交（orphan commit），此時要透過 &lt;code&gt;git reflog --all&lt;/code&gt; 進行查找。&lt;/p&gt;
&lt;p&gt;⚠️ detached 狀態下 → 新增 2 筆提交 → 推送失敗 → 切換至某個存在分支 → 原本提交的 2 筆變為孤立的提交&lt;/p&gt;
&lt;p&gt;✅ 所以請確定進行切換時是切換到分支上而不是提交上。否則會造成很多不必要的麻煩與處理。另外，孤立的提交會在 git 某些觸發條件下被清除。&lt;/p&gt;
&lt;h2 id=&#34;建立新分支git-branch&#34;&gt;建立新分支（git branch）&lt;/h2&gt;
&lt;p&gt;假設要在某個提交後長出新的功能或是嘗試性的錯誤修復。對著該提交（73ad1f95）右鍵 → Create Branch…。中間有個 check out 的選項，打勾會自動切換到該分支，不勾選的話就單純的新增一個分支。&lt;/p&gt;
&lt;p&gt;圖中建立新分支時有勾選 checkout，所以可以看到 HEAD 會指向新建立的分支。&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/create_new_branch.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;建立新的分支&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;刪除分支&#34;&gt;刪除分支&lt;/h2&gt;
&lt;p&gt;假設要刪除我們剛剛建立的分支，由於我們目前是在該分支上，所以是沒辦法刪除的。可以先切換到其它分支上，然後對著原本的分支右鍵 → Delete branch。&lt;/p&gt;
&lt;p&gt;刪除的選項中有個 Force Delete 的選項，在刪除時會先檢查該分支中的提交有沒有被應用到其它分支上。例如：新增了一個 feature/test 分支，然後提交了 3 個新的內容，在刪除 feature/test 分支就會多了一個確認提醒這 3 個新內容沒有合併到其它分支上。如果還是堅持要刪除，則會跳出額外的 Force Delete 視窗，點選即可強制刪除該分支。&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-branches/delete_branch.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;刪除分支&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;我們學習了如何從 GitHub 中進行複製遠端儲存庫，並且在不同分支之間進行切換、新增分支、刪除分支等操作。在這個過程中，我們也學會了處理可能導致分離指標狀態的情況。&lt;/p&gt;
&lt;p&gt;若不小心切換到提交而非分支，就會進入分離指標狀態，從而導致推送失敗。若直接切換到現有分支上，則會導致新提交變成孤立提交，只能透過 git reflog 查找。因此建議的做法是，在切換前先建立一個暫存分支，然後進行切換。在暫存分支上進行操作後，再進行 cherry-pick，最後刪除暫存分支。&lt;/p&gt;
&lt;p&gt;分離指標狀態 → 提交新的 2 筆 → 推送失敗 → 建立暫存分支 → 切換到既有分支 → cherry-pick 這 2 筆提交 → 推送 → 刪除暫存分支。&lt;/p&gt;
&lt;p&gt;在開始複製遠端儲存庫時，建立新的分支是第一要務，以確保主分支不受影響。不過當功能確認是正常的情況下或僅有單人操作時，建立新的分支可能就不是必要的。然而，無論在操作、整理、或是存在不確定因素時，都建議開新的分支進行操作，如此一來操作錯誤可以直接切回正常的分支，然後刪除操作失敗的分支。&lt;/p&gt;
&lt;p&gt;熟悉分支的切換、新增、刪除後，就可以開始學習 git rebase 整理好已經提交的內容了。&lt;/p&gt;
&lt;h2 id=&#34;參考文獻&#34;&gt;參考文獻&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mhutchie/vscode-git-graph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub - mhutchie/vscode-git-graph&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>開始使用 Git 管理專案</title>
        <link>https://wellstsai.com/post/git-tutorial-init/</link>
        <pubDate>Tue, 12 Mar 2024 16:30:00 +0800</pubDate>
        
        <guid>https://wellstsai.com/post/git-tutorial-init/</guid>
        <description>&lt;img src="https://wellstsai.com/post/git-tutorial-init/cover.png" alt="Featured image of post 開始使用 Git 管理專案" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;延續前篇 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/git-tutorial-introduction/&#34; &gt;什麼是 Git 與版本控制？&lt;/a&gt;，本節主要說明如何使用 VSCode 與 Git 管理專案。&lt;/p&gt;
&lt;p&gt;其中大部分的操作盡量簡化並避免指令的輸入，除非在操作上有必須且不可之因素。&lt;/p&gt;
&lt;p&gt;不知道什麼是 Git、VSCode 或是還沒安裝的可以參考 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/awesome-windows/&#34; &gt;Awesome Windows - 必備生產力軟體安裝與說明&lt;/a&gt;，有說明 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/awesome-windows/#visual-studio-code&#34; &gt;VSCode&lt;/a&gt; 與 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/awesome-windows/#git&#34; &gt;Git&lt;/a&gt; 的安裝教學。&lt;/p&gt;
&lt;p&gt;其他平台上的安裝，可以到各自的官方網站中進行下載與安裝，在此就不過多贅述。&lt;/p&gt;
&lt;h2 id=&#34;使用-git-的分散式工作流程&#34;&gt;使用 Git 的分散式工作流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/git_distributed_workflow.png&#34;
	width=&#34;1082&#34;
	height=&#34;706&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/git_distributed_workflow_hu887835c720616c3b4a4276a3aedb3e35_21978_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/git_distributed_workflow_hu887835c720616c3b4a4276a3aedb3e35_21978_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;分散式工作流程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在一個資料夾中透過指令的方式輸入 &lt;code&gt;git init&lt;/code&gt; 初始化工作區資料夾後，會在當前目錄下建立一個新的 &lt;code&gt;.git 資料夾&lt;/code&gt;，這個資料夾會記錄並追蹤其他檔案以進行版本控制。&lt;/p&gt;
&lt;p&gt;這個資料夾預設是不會動到的，換言之，如果想移除某個資料夾的 git 版本控制，移除 .git 資料夾目錄即可。&lt;/p&gt;
&lt;p&gt;初始化工作區後，我們便可以透過 git add 指令，把需要的檔案加入暫存區（stash area）。&lt;/p&gt;
&lt;p&gt;當確定好暫存區的檔案後，便可以進行提交（git commit）。把這些檔案的變化，以一個 commit 的形式新增到本地儲存庫（local repo）中。&lt;/p&gt;
&lt;p&gt;新增到本地儲存庫後，後續可以透過推送（git push）把本地端的修改推到遠端儲存庫上。&lt;/p&gt;
&lt;p&gt;而其他人像是 User 2 或是 User 3，透過複製（git clone）或是擷取（git fetch）把遠端儲存庫下載到本機電腦，便可以看到剛剛推送的新資料。&lt;/p&gt;
&lt;p&gt;其中，User 2 與 User 3 各自有獨立的本地儲存庫。也因此被稱為分散式版本控制系統。&lt;/p&gt;
&lt;p&gt;當遠端儲存庫有新的修改，本地儲存庫必須先與遠端儲存庫同步才能推送，這部分後續會在說明。&lt;/p&gt;
&lt;p&gt;這邊只需要注意的點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上述指令都可以藉由 VSCode 中的指令快速完成，也因此詳細的指令不需要特別記住。&lt;/li&gt;
&lt;li&gt;本地初始化本地儲存庫後，要推送到遠端儲存庫前，要先使用 git remote 新增遠端儲存庫的資訊。&lt;/li&gt;
&lt;li&gt;在使用&lt;code&gt;推送&lt;/code&gt;前一定要先進行&lt;code&gt;擷取&lt;/code&gt;，以確保當前的分支與遠端儲存庫一致。不要隨便使用 force push 覆蓋遠端儲存庫的資訊。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;設定-git-的使用者資訊&#34;&gt;設定 Git 的使用者資訊&lt;/h2&gt;
&lt;p&gt;在安裝好 git 後，需要先設定使用者的名稱。每次提交都會使用這些資訊來進行記錄。&lt;/p&gt;
&lt;p&gt;首先打開命令列（鍵盤上的 ⊞ Win + R，並輸入 cmd 後點確定）。&lt;/p&gt;
&lt;p&gt;並藉由以下指令設定 git 使用者的資訊，其中下面資訊需更換為自己的名稱與信箱：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WellsTsai&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wells@wellstsai.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 git config &amp;ndash;list，可以檢查目前 git 的設定狀態&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@server:~/$ git config --list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;WellsTsai
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.email&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Wells@wellstsai.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;core.editor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;code --wait
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是也可以直接使用 VSCode，開啟配置檔檢查：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux: ~/.gitconfig&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows: C:\Users\USER_NAME.gitconfig&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/show_git_config_in_vscode.png&#34;
	width=&#34;390&#34;
	height=&#34;187&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/show_git_config_in_vscode_hu7632fd9a6ca1fe6fa5c23e7227a8eb49_5821_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/show_git_config_in_vscode_hu7632fd9a6ca1fe6fa5c23e7227a8eb49_5821_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;打開 git 的 config 檔&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;500px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;確定 .gitconfig 有內容就可以開始進行 git 的相關指令了。&lt;/p&gt;
&lt;h2 id=&#34;vscode-與前置作業&#34;&gt;VSCode 與前置作業&lt;/h2&gt;
&lt;h3 id=&#34;執行-vscode&#34;&gt;執行 VSCode&lt;/h3&gt;
&lt;p&gt;第一次執行 VSCode，語言可能是英文的。&lt;/p&gt;
&lt;p&gt;可以點選 &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; 呼叫出命令面板，輸入 Language，找到 Configure Display Language，便可以切換語言為繁體中文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/hello_vscocde.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/hello_vscocde_hu8175ae04684577d353894062cc3fe03f_26934_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/hello_vscocde_hu8175ae04684577d353894062cc3fe03f_26934_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;第一次執行 VSCode&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/change_vscode_language.png&#34;
	width=&#34;1082&#34;
	height=&#34;812&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/change_vscode_language_hud1bb375035a1b0654e35556e03739f63_63192_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/change_vscode_language_hud1bb375035a1b0654e35556e03739f63_63192_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Ctrl&amp;#43;Shift&amp;#43;P 切換語言&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;更多功能像是左下方的齒輪，可以提供主題切換、同步 VSCode、多個設定配置、遠端通道存取。需要了解的點選上方的說明進行學習。&lt;/p&gt;
&lt;h3 id=&#34;vscode-快速鍵&#34;&gt;VSCode 快速鍵&lt;/h3&gt;
&lt;p&gt;有部分指令記住可以加快 VSCode 上的使用，以下快速鍵是建議記住的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;th&gt;快速鍵&lt;/th&gt;
&lt;th&gt;備註&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;命令面板&lt;/td&gt;
&lt;td&gt;Ctrl + Shift + P 或是 F1&lt;/td&gt;
&lt;td&gt;最常使用的指令，要做的事情幾乎都可以用到。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;搜尋與開啟檔案&lt;/td&gt;
&lt;td&gt;Ctrl + P&lt;/td&gt;
&lt;td&gt;搜尋檔案，輸入冒號可以快速跳到某行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;開啟命令提示字元&lt;/td&gt;
&lt;td&gt;Ctrl + `&lt;/td&gt;
&lt;td&gt;「`」 是位於鍵盤 1 左邊的「~鍵」，叫出命令列可以進行系統的操作，像是刪除檔案、執行腳本、操作 Git 指令等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;開啟資料夾&lt;/td&gt;
&lt;td&gt;Ctrl + K, Ctrl + O&lt;/td&gt;
&lt;td&gt;除了開啟單一檔案(Ctrl + O)，VSCode 可以開啟資料夾，以某個資料夾為根目錄進行專案開發。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自動換行&lt;/td&gt;
&lt;td&gt;Alt + Z&lt;/td&gt;
&lt;td&gt;有時候螢幕太小而程式碼太長，自動換行可以把超出螢幕的文字自動換行。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其實還有很多快速鍵，不過我最常用的也就這幾個，更多的指令可以&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/getstarted/tips-and-tricks&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;參考官方資料&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這些指令不記的話，那麼就要把滑鼠移動到左上方點選&lt;code&gt;檔案→開啟資料夾&lt;/code&gt;，對比於使用快速鍵（Ctrl + K, Ctrl + O）可以省下許多時間。&lt;/p&gt;
&lt;p&gt;或是 F1 叫出命令面板，輸入&lt;code&gt;開啟資料夾&lt;/code&gt;也是另一種方法。&lt;/p&gt;
&lt;h3 id=&#34;vscode-的延伸模組&#34;&gt;VSCode 的延伸模組&lt;/h3&gt;
&lt;p&gt;VSCode 提供非常多好用的延伸模組，其中要能夠順手的操作 Git，有一些是幾乎必裝的延伸模組。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitLens&lt;/a&gt;： 提供非常多功能，並提供付費版可以解鎖一些進階功能（Git Graph、可視化文件歷史記錄等&amp;hellip;），對於普通開發者免費版本已經足夠，像是&lt;code&gt;互動式的 rebase 編輯器&lt;/code&gt;、&lt;code&gt;編輯器顯示 blame 資訊&lt;/code&gt; 等都是免費的。為目前 Git 延伸模組安裝的第一名。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git Graph&lt;/a&gt;： 提供了一個交互式的 Git 圖形界面，讓你可以在編輯器中輕鬆地查看和操作分支、提交歷史等 Git 相關信息，並直觀地理解專案結構、分支和歷史。由於 GitLens 的 Git 圖形是進階功能，可以改裝此擴充解決。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本的兩套已經非常足夠，還有一些其他延伸模組沒提及到的就自行評估與自行安裝。&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/getlens_rebase.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;GitLens 的 互動式 rebase&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
	&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/git_graph_demo.gif&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git Graph Demo&#34;
	
&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;ssh-與遠端連線&#34;&gt;SSH 與遠端連線&lt;/h3&gt;
&lt;p&gt;在我們一般工作的電腦，往往都是在 Windows 上進行，像是上網看影片、Windows 驅動開發、Office 資料處理、MATLAB 等&amp;hellip;。&lt;/p&gt;
&lt;p&gt;對於 Linux 伺服器上所進行的開發，VSCode 提供了非常多的方式進行遠端連線與開發。例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows 系統下&lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/awesome-windows/#windows-subsystem-for-linux&#34; &gt;安裝 Windows Subsystem for Linux&lt;/a&gt;並&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/remote/wsl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;藉由 VSCode 連線至 WSL&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/remote/ssh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Remote-SSH 進行連線&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在外面沒辦法進行 SSH 到 Linux 伺服器？ 我們可以&lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/tailscale/&#34; &gt;安裝 Tailscale 進行內網穿透&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/remote/tunnels&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;遠端隧道 - Remote Tunnels&lt;/a&gt; 進行遠端開發。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;部屬容器進行連線&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這邊要注意的是，曾經看到同事&lt;strong&gt;掛載 SAMBA 伺服器，並直接在 Windows 底下使用 VSCode 開啟掛載路徑&lt;/strong&gt;，這樣進行開發的效能是直接大打折扣的。&lt;/p&gt;
&lt;h2 id=&#34;初始化-git-資料夾&#34;&gt;初始化 Git 資料夾&lt;/h2&gt;
&lt;h3 id=&#34;開啟資料夾&#34;&gt;開啟資料夾&lt;/h3&gt;
&lt;p&gt;打開 VSCode 後，我們可以在使用者目錄底下新增一個新的資料夾，並透過 VSCode 開啟此資料夾。&lt;/p&gt;
&lt;p&gt;新增資料夾可以透過 UI 或是指令的方式新增，其指令在 Windows 與 Linux 皆為 &lt;code&gt;mkdir git_test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新增後，可以使用 &lt;code&gt;Ctrl + K, Ctrl + O&lt;/code&gt; 開啟該資料夾。&lt;/p&gt;
&lt;p&gt;或是直接在終端機中輸入 &lt;code&gt;code git_test&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;VSCode 會開新視窗，並將其根目錄設為 git_test。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@server:~$ mkdir git_test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@server:~$ code git_test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_test.png&#34;
	width=&#34;979&#34;
	height=&#34;584&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_test_hu2a445562e8a47ee1e3d898fadd26ef65_16146_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_git_test_hu2a445562e8a47ee1e3d898fadd26ef65_16146_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;使用 code 開啟 git_test 資料夾&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;新增檔案&#34;&gt;新增檔案&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;Ctrl + N&lt;/code&gt; 新增一個空白檔案，或是在終端機中輸入 &lt;code&gt;code hello.txt&lt;/code&gt; 便可以開啟一個 hello.txt 的空白檔案。&lt;/p&gt;
&lt;p&gt;輸入一些文字後儲存，路徑就為預設的專案根目錄中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_new_file.png&#34;
	width=&#34;979&#34;
	height=&#34;584&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_new_file_hu64cb7327e26bde9f8fd42a43e3e31dd2_17960_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_new_file_hu64cb7327e26bde9f8fd42a43e3e31dd2_17960_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;新增一個檔案在根目錄中&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;初始化本地儲存庫&#34;&gt;初始化本地儲存庫&lt;/h2&gt;
&lt;p&gt;於終端機中輸入 &lt;code&gt;git init&lt;/code&gt;，便可在該目錄初始化本地儲存庫。預設分支名稱為 master。&lt;/p&gt;
&lt;p&gt;此時，hello.txt 檔案名稱會被標記為變為綠色，表示 git 看到了未追蹤的檔案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_init.png&#34;
	width=&#34;1051&#34;
	height=&#34;744&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_init_hubde11bed5a65b6cf981b63ecce6fab8f_40495_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_git_init_hubde11bed5a65b6cf981b63ecce6fab8f_40495_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git 原始檔控制&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;原始檔控制&#34;&gt;原始檔控制&lt;/h2&gt;
&lt;h3 id=&#34;檢視差異git-diff&#34;&gt;檢視差異（git diff）&lt;/h3&gt;
&lt;p&gt;點選 VSCode 左邊有一個類似於 git 分支的圖示可以進行原始檔控制，可以看到有一個 hello.txt 的變更。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_source_control.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_source_control_hu8e0f6aad013cb14fbde57a578105be71_26325_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_source_control_hu8e0f6aad013cb14fbde57a578105be71_26325_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git 原始檔控制&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;該檔案右邊有個 U 表示 Update，若為 M 表示該檔案已被追蹤，現在被修改了。&lt;/p&gt;
&lt;p&gt;點選 hello.txt，編輯區會跳出比對視窗，比對視窗的左邊為原始檔，右邊為目前的檔案，會以綠色標示新增的內容、紅色代表刪減的內容。由於一開始沒有內容，故左邊原始檔案內容全部為空，而右邊則是我們新增的內容文字。&lt;/p&gt;
&lt;h3 id=&#34;暫存檔案git-add&#34;&gt;暫存檔案（git add）&lt;/h3&gt;
&lt;p&gt;我們可以選取想要的檔案，將其暫存至暫存區（stash）。對變更區的檔案右鍵點選&lt;code&gt;暫存變更&lt;/code&gt;，或是當滑鼠移到該檔案時，有一個 &lt;code&gt;+&lt;/code&gt; 號，點擊即為暫存變更。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_file_stash.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_file_stash_hu20792dffbc69ca0575934c803227be42_29396_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_file_stash_hu20792dffbc69ca0575934c803227be42_29396_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;將檔案暫存至暫存區&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;提交暫存區檔案git-commit&#34;&gt;提交暫存區檔案（git commit）&lt;/h3&gt;
&lt;p&gt;在暫存區後，我們可以在&lt;code&gt;暫存的變更&lt;/code&gt;看到被暫存的檔案，此時有一個檔案在暫存區。&lt;/p&gt;
&lt;p&gt;我們輸入好提交按鈕上方的&lt;code&gt;訊息&lt;/code&gt;，點擊&lt;code&gt;提交&lt;/code&gt;便可以在本地端儲存庫提交一筆新的 commit。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_ready_to_commit.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_ready_to_commit_hucb7709c20da87dc0344c86ecd6875042_31526_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_ready_to_commit_hucb7709c20da87dc0344c86ecd6875042_31526_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;檔案在暫存區後，輸入訊息，點選提交&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;顯示當前的-graphgit-log&#34;&gt;顯示當前的 graph（git log）&lt;/h3&gt;
&lt;p&gt;可以再重新刪掉一些內容，或在新增一些檔案。然後重新進行上述步驟新增第 2,3 筆 commit。&lt;/p&gt;
&lt;p&gt;回到&lt;code&gt;原始檔控制&lt;/code&gt;的標籤，可以找到 View Git Graph (git log) 的按鈕，該按鈕為 GitGraph 延伸功能所提供，所以必須確定有安裝此擴充功能才有此按鈕。&lt;/p&gt;
&lt;p&gt;可以看到當前的分支為 master，目前已經提交了兩筆 commit。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_show_git_graph_button.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_show_git_graph_button_hu9c489a4643172a988abe7391afeebe44_26475_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_show_git_graph_button_hu9c489a4643172a988abe7391afeebe44_26475_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git Graph 按鈕（需安裝 GitGraph）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;
&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_graph.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_graph_huf0c3944e9935df7d5c8c8b2ccf9f3bd8_26599_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_git_graph_huf0c3944e9935df7d5c8c8b2ccf9f3bd8_26599_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;顯示 Git Graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;
&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_commit_detail.png&#34;
	width=&#34;1419&#34;
	height=&#34;621&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-init/code_git_commit_detail_huf361b75464b8a03495fc50d53f0a317a_30521_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-init/code_git_commit_detail_huf361b75464b8a03495fc50d53f0a317a_30521_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;查看 commit 的內容&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由此 Git Graph 可以對 Git 進行許多複雜的操作，這些操作會等後面的章節提到再說明。&lt;/p&gt;
&lt;h2 id=&#34;git-commit-特徵&#34;&gt;Git commit 特徵&lt;/h2&gt;
&lt;p&gt;從上述的 Git Graph 中可以看到，我們目前在分支 master。在實際專案中，可能會有許多不同的分支進行著，而在沒有衝突的情況下，開發者可以任意且自由地切換分支。&lt;/p&gt;
&lt;p&gt;提交的 commit 具有以下要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者（Author）&lt;/li&gt;
&lt;li&gt;提交者（Committer）&lt;/li&gt;
&lt;li&gt;內容（標題 + 詳細說明）&lt;/li&gt;
&lt;li&gt;檔案變動資訊&lt;/li&gt;
&lt;li&gt;Commit ID&lt;/li&gt;
&lt;li&gt;時間&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中要特別注意的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;commit ID 為唯一，用來進行 Git 相關操作的一個獨立 ID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;commit 內容的部分，第一行為標題，之後會空一行才開始輸入內文。&lt;/p&gt;
&lt;p&gt;你也可以指輸入一行標題，弄死下一個看你程式的人。🤫&lt;/p&gt;
&lt;p&gt;下一個人看到你寫的程式的時候，就會抱怨為什麼這個＿＿連寫清楚 commit 都有問題？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;在此，我們已經學會了在本地端使用 git 初始化 repo、新增檔案、將檔案暫存後進行推送，並且瞭解了整個 Git 圖形的情況。&lt;/p&gt;
&lt;p&gt;這些基本操作在 VSCode 上進行算是蠻清晰明瞭，當然也可以透過命令行一步步執行，只是要查看檔案的狀態通常需要使用命令，像是 git status 與 git log，在純文字介面情況下進行判讀，若遇到大型專案會難閱讀分支間的關係。&lt;/p&gt;
&lt;p&gt;甚至是透過指令輸入提交，需要一直不斷地 -m 分割每行（git commit -m &amp;ldquo;第一行&amp;rdquo; -m &amp;ldquo;第二行&amp;rdquo; -m &amp;ldquo;第三行&amp;rdquo;）。&lt;/p&gt;
&lt;p&gt;也因此簡單的事情，我們還是透過 VSCode 內建的原始檔控制進行以降低人為錯誤。&lt;/p&gt;
&lt;h2 id=&#34;參考文獻&#34;&gt;參考文獻&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh-tw/v2/%e9%96%8b%e5%a7%8b-%e5%88%9d%e6%ac%a1%e8%a8%ad%e5%ae%9a-Git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;初次設定 Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;VSCode - docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>什麼是 Git 與版本控制？</title>
        <link>https://wellstsai.com/post/git-tutorial-introduction/</link>
        <pubDate>Mon, 04 Mar 2024 16:50:00 +0800</pubDate>
        
        <guid>https://wellstsai.com/post/git-tutorial-introduction/</guid>
        <description>&lt;img src="https://wellstsai.com/post/git-tutorial-introduction/cover.jpg" alt="Featured image of post 什麼是 Git 與版本控制？" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本系列 Git 教學將著重在 VS Code 與 Git 的操作、整合與專案管理。&lt;/p&gt;
&lt;h2 id=&#34;什麼是版本控制&#34;&gt;什麼是版本控制？&lt;/h2&gt;
&lt;p&gt;版本控制是隨著時間用來追蹤文件的差異與變化，並提供儲存與回朔到特定版本的功能。&lt;/p&gt;
&lt;p&gt;像是 Google Sheet、微軟 Microsoft 365 (Word、PowerPoint、Excel) 都提供歷史版本檔案的回朔：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-introduction/google_history.png&#34;
	width=&#34;635&#34;
	height=&#34;591&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-introduction/google_history_hu3fed401aea200f8446dda6d69e02a636_16101_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-introduction/google_history_hu3fed401aea200f8446dda6d69e02a636_16101_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Google 文件 - 查看版本紀錄&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;
&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-introduction/word_history.png&#34;
	width=&#34;600&#34;
	height=&#34;399&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-introduction/word_history_hu04ea1e41aeea6ca2c724643387c240ed_12754_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-introduction/word_history_hu04ea1e41aeea6ca2c724643387c240ed_12754_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Word (Microsoft 365) - 版本歷程紀錄&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;藉由軟體所提供的歷史紀錄，我們可以不需要將檔案複製進行備份，形成多個檔案的結果。&lt;/p&gt;
&lt;p&gt;版本控制如果是文字檔案，還可以比對檔案之間的差異。像是說明 test.txt 從 A 版本變為 B 版本新增或刪除了哪些東西，這就是版本控制的目的。&lt;/p&gt;
&lt;p&gt;而要管理像是文字檔案（txt, c, py, js, md 等&amp;hellip;），繪圖檔案(psd, ai)、模擬檔案等文件。&lt;/p&gt;
&lt;p&gt;可以透過常見主流且為業界標準的軟體為：&lt;code&gt;Git&lt;/code&gt; 與 Subversion(SVN)。&lt;/p&gt;
&lt;p&gt;兩者皆為開源、免費。可以在私人電腦或是公司電腦上進行安裝並管理文件、專案。&lt;/p&gt;
&lt;h2 id=&#34;什麼是-git&#34;&gt;什麼是 Git？&lt;/h2&gt;
&lt;p&gt;Git 是一個分布式版本控制系统（version control system，VCM）。&lt;/p&gt;
&lt;p&gt;每個成員都可以將完整的程式碼從遠端倉庫(remote repo(sitory))複製（clone）到本地端（local repo）。&lt;/p&gt;
&lt;p&gt;當多個不同成員進行 clone 後，每個成員的本地電腦端都會擁有自己的一個副本進行管理。&lt;/p&gt;
&lt;p&gt;若成員 A 開始修改與編輯後，可再進行推送（push）到遠端倉庫。&lt;/p&gt;
&lt;p&gt;成員 B 由於當時 clone 時，還沒有 A 的修改，所以可能會發生同一個檔案上的衝突（conflict）。&lt;/p&gt;
&lt;p&gt;此時 B 要與 A 進行溝通，進行差異上的合併（merge）、或是進行重置基準（rebase）等操作。&lt;/p&gt;
&lt;p&gt;以 AdGuardHome 開源軟體為例，可以看到開發者會針對每個新版本會開啟新的分支（branch）進行管理，並且由多個不同使用者進行提交程式碼。&lt;/p&gt;
&lt;p&gt;其中在提交程式碼並修復新的 bug 可能會開新的分支，最終由主開發人員評估後，進行 merge 的操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/git-tutorial-introduction/adg_git_graph.png&#34;
	width=&#34;909&#34;
	height=&#34;898&#34;
	srcset=&#34;https://wellstsai.com/post/git-tutorial-introduction/adg_git_graph_hu1d12bd11d09a74d793807258315abc80_50952_480x0_resize_box_3.png 480w, https://wellstsai.com/post/git-tutorial-introduction/adg_git_graph_hu1d12bd11d09a74d793807258315abc80_50952_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;開源軟體 AdGuardHome 的 GitGraph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;242px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;什麼是遠端倉庫&#34;&gt;什麼是遠端倉庫？&lt;/h2&gt;
&lt;p&gt;我們在本地端初始化一個新的 repo 後，可以將本地端的內容 push 到遠端倉庫。&lt;/p&gt;
&lt;p&gt;遠端倉庫的&lt;code&gt;主要功能是儲存程式碼&lt;/code&gt;，為位於網路上的伺服器。&lt;/p&gt;
&lt;p&gt;並可能提供一些額外的功能像是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代碼審查（code review）&lt;/li&gt;
&lt;li&gt;問題追蹤（issue tracking）&lt;/li&gt;
&lt;li&gt;持續整合（continuous integration，CI）&lt;/li&gt;
&lt;li&gt;持續交付（continuous delivery，CD）&lt;/li&gt;
&lt;li&gt;建立 wiki 文件說明&lt;/li&gt;
&lt;li&gt;項目管理&lt;/li&gt;
&lt;li&gt;權限管理&lt;/li&gt;
&lt;li&gt;可視化進度（visualize progress）&lt;/li&gt;
&lt;li&gt;等&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前主流的遠端倉庫主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub（微軟）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供了代碼審查、問題追蹤、持續整合等功能。&lt;/li&gt;
&lt;li&gt;在個人開發者和企業中都廣受歡迎。&lt;/li&gt;
&lt;li&gt;提供免費和付費服務計劃，用戶可以根據需要選擇不同的計劃。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在公司內部架設，也有雲端服務可用。&lt;/li&gt;
&lt;li&gt;強調 DevOps 和 CI/CD 整合，提供了完整的 DevOps 平台。&lt;/li&gt;
&lt;li&gt;提供社區版（免費）和企業版（付費）等不同版本。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure DevOps（微軟）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不僅是程式碼管理工具，還是一個完整的 DevOps 平台，包括代碼管理、CI/CD、專案管理等功能。&lt;/li&gt;
&lt;li&gt;深度整合了 Azure 雲端服務。&lt;/li&gt;
&lt;li&gt;提供免費和付費計劃，企業和團隊可以選擇適合自己需求的方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述平台，會根據使用人數、是否付費，提供不同層級的服務。&lt;/p&gt;
&lt;p&gt;在個人開發者中，使用最多的遠端倉庫就是 GitHub 了。&lt;/p&gt;
&lt;p&gt;中大型企業往往不想將程式碼放到 GitHub，會考慮自己架設 GitLab 放在公司內部的伺服器上。&lt;/p&gt;
&lt;p&gt;而某些外國企業在合作上，甚至是需要執行 DevOps 進行程式碼追蹤，會另外要求使用 Azure DevOps 進行程式碼管理與敏捷開發。&lt;/p&gt;
&lt;h2 id=&#34;開始使用-git&#34;&gt;開始使用 Git&lt;/h2&gt;
&lt;h3 id=&#34;選擇指令介面還是圖形界面&#34;&gt;選擇指令介面還是圖形界面？&lt;/h3&gt;
&lt;p&gt;在開始使用 Git，首先要有好的 IDE 進行操作。&lt;/p&gt;
&lt;p&gt;傳統上的 IDE 就是 cmd + vim/nano 等文字編輯器。藉由命令提示字元、一行一行的輸入指令。&lt;/p&gt;
&lt;p&gt;git merge 時遇到檔案衝突，必須在指令模式下找到衝突的程式碼、編輯、存檔、git add後，最終沒衝突再 git commit。&lt;/p&gt;
&lt;p&gt;相比之下，圖形界面（GUI）則簡化了這些複雜的指令輸入過程。透過點擊操作，可以輕鬆解決許多問題。&lt;/p&gt;
&lt;p&gt;對我來說，大部分的操作都是透過 GUI 進行，因為它更直觀且易於操作。不過有些特定的操作、或是制式化的操作可能使用指令模式來處理會更快。&lt;/p&gt;
&lt;p&gt;我建議熟悉兩種操作方式，就可以更靈活地使用 Git。&lt;/p&gt;
&lt;p&gt;所以電腦請先安裝好：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;VS Code&lt;/li&gt;
&lt;li&gt;Windows Terminal（選用）&lt;/li&gt;
&lt;li&gt;PowerShell（選用）&lt;/li&gt;
&lt;li&gt;Clink（選用）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;詳細的安裝方式可以參考 &lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/awesome-windows/&#34; &gt;Awesome Windows - 必備生產力軟體安裝與說明&lt;/a&gt; 進行安裝。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我最初開始學 Git 時，使用的遠端倉庫為 GitHub。&lt;/p&gt;
&lt;p&gt;Github 提供了 &lt;code&gt;GitHub Desktop&lt;/code&gt;，這套軟體少了蠻多重要的功能，因此不建議使用。&lt;/p&gt;
&lt;p&gt;還有像是 &lt;code&gt;SourceTree&lt;/code&gt;、&lt;code&gt;TortoiseGit&lt;/code&gt; 等其他 GUI，雖然是 &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/downloads/guis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git 官方所推薦&lt;/a&gt;，但相較於 VS Code 的擴充性還是差了一大截所以也不推薦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;註冊-github&#34;&gt;註冊 GitHub&lt;/h3&gt;
&lt;p&gt;在 GitHub 上進行註冊，取得一個免費放程式碼的空間。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無限制的公共/私人存儲庫&lt;/li&gt;
&lt;li&gt;自動安全和版本更新&lt;/li&gt;
&lt;li&gt;每月 2,000 分鐘的 CI/CD&lt;/li&gt;
&lt;li&gt;公共存儲庫免費&lt;/li&gt;
&lt;li&gt;500 MB的套件存儲&lt;/li&gt;
&lt;li&gt;公共存儲庫免費&lt;/li&gt;
&lt;li&gt;問題和專案&lt;/li&gt;
&lt;li&gt;社區支援 GitHub Copilot 訪問&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無論是架設技術部落格或是存放個人的程式碼都綽綽有餘。&lt;/p&gt;
&lt;p&gt;至於&lt;a class=&#34;link&#34; href=&#34;https://github.com/signup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;註冊方法&lt;/a&gt;可以參照官方一步一步進行操作。整體來說不會很困難。&lt;/p&gt;
&lt;h3 id=&#34;使用-git-的迷思&#34;&gt;使用 Git 的迷思&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;害怕使用 Git&lt;/p&gt;
&lt;p&gt;萬物皆可 Git，只要檔案不要超過 100 MB（經驗法則）。除了程式碼外，也可以用來追蹤像是 .md 或是圖片檔案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git 太複雜，難以入門&lt;/p&gt;
&lt;p&gt;在網路上，常常會將 Git 與 SVN 進行比較，並聲稱 Git 很複雜。&lt;/p&gt;
&lt;p&gt;實際上，初次接觸 Git 時，你只需要記住基本操作: git commit，並在提交時附上簡單的說明。隨著時間的推移，你會逐漸熟悉其他操作，如合併（merge）或重整（rebase）分支等。&lt;/p&gt;
&lt;p&gt;如果擔心操作出錯，可以創建一個新的分支（例如 TEST）來進行操作。當你確定操作無誤後，可以刪除原始分支（如 main），並將測試分支（TEST）重新改名為為主分支（main）。這樣做可以大大減少犯錯的可能性。如果 TEST 分支在 merge 卡住、出現問題時，可以輕鬆地刪除它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;需要購買相關書籍嗎&#34;&gt;需要購買相關書籍嗎？&lt;/h3&gt;
&lt;p&gt;不需要！ (但是，如果想看紙本書籍也不是不行。)&lt;/p&gt;
&lt;p&gt;現在網路資訊那麼發達，指令忘了網路上查一查就好了。&lt;/p&gt;
&lt;p&gt;更多免費的資源，官方也早已撰寫好電子書籍 - &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh-tw/v2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pro Git book&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果真的有問題，問問 ChatGPT 可能都還比較快。&lt;/p&gt;
&lt;p&gt;也因此看書學習 Git 是不需要的。&lt;/p&gt;
&lt;p&gt;如果要學習 Git，一些推薦的相關資源可以參考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh-tw/v2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pro Git book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learngitbranching.js.org/?locale=zh_TW&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git Branching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.w3schools.com/git/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git Tutorial (w3schools)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;下一章節會說明如何使用 VS Code 進行 Git 與專案整合。&lt;/p&gt;
&lt;h2 id=&#34;參考文獻&#34;&gt;參考文獻&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-%E9%97%9C%E6%96%BC%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git - 關於版本控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;版本控制 - 維基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/devops/develop/git/what-is-version-control&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什麼是版本控制？ | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/devops/develop/git/what-is-git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什麼是 Git？ | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>使用 SSH 金鑰進行無密碼遠端連線</title>
        <link>https://wellstsai.com/post/ssh-connection/</link>
        <pubDate>Fri, 15 Dec 2023 18:50:00 +0800</pubDate>
        
        <guid>https://wellstsai.com/post/ssh-connection/</guid>
        <description>&lt;img src="https://wellstsai.com/post/ssh-connection/cover.jpg" alt="Featured image of post 使用 SSH 金鑰進行無密碼遠端連線" /&gt;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;Secure Shell（SSH）是一個安全協定，允許兩台電腦通過安全的連接進行數據交換（執行命令、傳檔案），並提供加密保證數據的安全與完整性。&lt;/p&gt;
&lt;p&gt;SSH 通常用於兩台電腦的遠端登錄。它取代了舊的遠端訪問協定，像是 Telnet 是以明文沒有加密的方式傳輸密碼和內容。而 PTT 也在 2020 年關閉不安全的 Telnet 協定，改用 SSH 或是 WebSocket 協定，以確保通訊過程都有加密，防止竊聽與竄改，提高安全性和隱私性。&lt;/p&gt;
&lt;p&gt;SSH 除了裝置遠端連線，還可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立 SSH 隧道（Tunneling）進行端口轉發，安全的的訪問網路資源。&lt;/li&gt;
&lt;li&gt;SFTP、SCP 提供安全檔案傳輸進行上傳或下載檔案。&lt;/li&gt;
&lt;li&gt;rsync 用於檔案同步，減少傳輸用量。&lt;/li&gt;
&lt;li&gt;其他應用&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預設 Linux、MacOS 或是 Windows 預設都整合了 OpenSSH 套件。OpenSSH 是一個開源的 SSH 實作，讓使用者可以透過 SSH 協定所實作的套件，裡面包含了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遠端操作工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ssh&lt;/strong&gt;，用於遠程登入到其他主機並執行命令。&lt;/li&gt;
&lt;li&gt;scp，本地與遠端的檔案傳輸。&lt;/li&gt;
&lt;li&gt;sftp，類似 FTP 的使用方式，但傳輸都有進行加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;金鑰管理工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ssh-add&lt;/strong&gt;，將私鑰加入 SSH 代理程式，以便在不需要再次輸入密碼的情況下使用私鑰進行身份驗證。&lt;/li&gt;
&lt;li&gt;ssh-keysign，用於對 SSH 證書進行簽名以進行身份驗證。&lt;/li&gt;
&lt;li&gt;ssh-keyscan，用於掃描遠端主機以檢索其 SSH 公鑰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ssh-keygen&lt;/strong&gt;，用於生成 SSH 金鑰對（公鑰和私鑰）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伺服器端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sshd&lt;/strong&gt; (SSH Daemon)，在伺服器上運行的守護程序，負責接受來自客戶端的 SSH 連線請求。&lt;/li&gt;
&lt;li&gt;sftp-server，處理 sftp 客戶端的請求並進行檔案傳輸。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ssh-agent&lt;/strong&gt;，管理用戶的 SSH 金鑰，並在需要時提供這些金鑰進行身份驗證。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章重點會著重在如何建立公鑰與私鑰，並透過這兩把鑰匙實現無密碼認證。另外也會提及伺服器端如何運行 SSH 服務，並讓用戶端透過 SSH 進行連線。&lt;/p&gt;
&lt;p&gt;在傳統上密碼登入方式，輸入正確的使用者密碼以進行身分驗證。若伺服器暴露在公共網路上時，可能會面臨暴力破解的風險，進而導致伺服器資料外洩。&lt;/p&gt;
&lt;p&gt;為了提升安全性(與懶得輸入密碼?)，可以透過公私鑰進行驗證。如此一來不需要輸入密碼就可以連線，且駭客在沒有私鑰的情況下也無法登入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 本文章有使用 Tailscale 建立內網，達成本地端與伺服器端的電腦透過 hostname 或是 IP 進行連線。&lt;/p&gt;
&lt;p&gt;兩台電腦要連線需要有 IP，如果是公網 IP 則需要設定路由器進行端口轉發到內網，但相對暴露 SSH 端口危險的。
不想暴露端口、沒有公網 IP 或是無法修改路由器設定等，可閱讀&lt;a class=&#34;link&#34; href=&#34;https://wellstsai.com/post/tailscale&#34; &gt;使用 Tailscale 輕鬆建立安全且私密的通道&lt;/a&gt;來實現兩台電腦的連線。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ssh-重點摘要&#34;&gt;SSH 重點摘要&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SSH 主要兩種驗證方式為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密碼身分認證（Password-based authentication）&lt;/li&gt;
&lt;li&gt;公鑰認證（Public-key authentication）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實現 SSH 金鑰後，登入方式可使用金鑰登入，不需要輸入密碼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公開金鑰&lt;/strong&gt; 內容會填寫在 &lt;strong&gt;遠端伺服器&lt;/strong&gt; 上的 authorized_keys。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;私密金鑰&lt;/strong&gt; 會保留在您的&lt;strong&gt;本機系統&lt;/strong&gt;上，保護此私密金鑰，不要共用它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開金鑰可以與任何人共用，&lt;strong&gt;私密金鑰只有自己有存取權限&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH 可以選擇不同加密演算法，RSA 為預設、目前廣泛且相容性最好的加密方法，相反，ED25519 對比於 RSA 具有更好的性能但較差的相容性，目前絕大多數伺服器都逐漸支援。為我個人目前產金鑰的首選。在此確保本地端與伺服器可以正常通訊即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;絕大多數存取 GIT 的傳輸協定是 SSH。意味著在遠端操作像是 clone, push, pull 都會要求認證。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH 加密方式，雖然 RSA 比 Ed25519 相容性好，但實際在使用上建議以產生 Ed25519 為優先以確保安全性與速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ssh-金鑰建立與連線流程&#34;&gt;SSH 金鑰建立與連線流程&lt;/h2&gt;
&lt;p&gt;假設 nodeA 為本地端（使用者），nodeB 為伺服器端。&lt;/p&gt;
&lt;p&gt;nodeA 為工作的電腦，像是要進行 git clone，或是進行 SSH 連線到別的電腦上。&lt;/p&gt;
&lt;p&gt;nodeB 為被連線的電腦，像是 git 伺服器，網頁伺服器、代理伺服器、虛擬專用伺服器等&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 nodeA 或 nodeB 產生金鑰（公鑰與私鑰）。&lt;/li&gt;
&lt;li&gt;把私鑰放在 nodeA，公鑰放在 nodeB。&lt;/li&gt;
&lt;li&gt;nodeB 建立 ~/.ssh/authorized_keys，並填入公鑰。&lt;/li&gt;
&lt;li&gt;nodeA 建立 ~/.ssh/config，填入連線資訊，連線資訊包含伺服器 IP 與私鑰路徑。&lt;/li&gt;
&lt;li&gt;nodeA 在進行 SSH 連線時，預設會使用金鑰進行連線。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💡要特別注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;確定私鑰只有自己有存取權限，且 nodeB 沒有私鑰。&lt;/li&gt;
&lt;li&gt;nodeB 如果是 Windows 且為系統管理員。路徑需改為：
&lt;code&gt;C:\ProgramData\ssh\administrators_authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果連線失敗或設定金鑰後但卻要求輸入密碼，可在 SSH 連線時可以加上 -vvvv 進行除錯。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;確認-ssh-環境&#34;&gt;確認 SSH 環境&lt;/h2&gt;
&lt;p&gt;Linux 與 Windows 預設已經安裝好客戶端，輸入 &lt;code&gt;ssh USER@IP&lt;/code&gt; 便可以連線到其他伺服器。&lt;/p&gt;
&lt;p&gt;若想要建立 SSH 伺服器，則需要另外安裝，並運行 SSH 服務。&lt;/p&gt;
&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 預設已安裝好 openssh-client，可以直接先檢查版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -V
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 如果找不到指令表示尚未安裝，可透過以下指令安裝 openssh-client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sudo apt install openssh-client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Linux 目前裝的版本為 OpenSSL 3.0.2。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wells@server:~$ ssh -V
OpenSSH_8.9p1 Ubuntu-3ubuntu0.4, OpenSSL 3.0.2 15 Mar 2022
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若要讓其他電腦能透過 SSH 連到這台 Linux，則需要安裝 openssh-server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install openssh-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安裝後，透過 systemctl 指令來啟動、檢查服務。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable ssh &lt;span style=&#34;color:#75715e&#34;&gt;# 開機自動執行 sshd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service ssh start    &lt;span style=&#34;color:#75715e&#34;&gt;# 執行 sshd 服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl status ssh &lt;span style=&#34;color:#75715e&#34;&gt;# 檢查 sshd 服務狀態&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若成功執行，會看到綠色 active&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/ssh_status.png&#34;
	width=&#34;1115&#34;
	height=&#34;465&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/ssh_status_hua0da81854b4f8ff8affed24cb5022e52_182788_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/ssh_status_hua0da81854b4f8ff8affed24cb5022e52_182788_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;檢查 sshd 服務&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;239&#34;
		data-flex-basis=&#34;575px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;p&gt;Windows 底下除了透過 &lt;code&gt;ssh -V&lt;/code&gt; 檢查客戶端是否安裝。&lt;/p&gt;
&lt;p&gt;也可以透過 powershell 檢查並安裝：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 檢查 OpenSSH 安裝狀態&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-WindowsCapability -Online | Where-Object Name &lt;span style=&#34;color:#f92672&#34;&gt;-like&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OpenSSH*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Installed 表示已安裝，NotPresent表示尚未安裝&lt;/p&gt;
&lt;p&gt;目前此 Windows 可以看到 Client 已安裝，表示可以透過 SSH 連線到其他伺服器。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PS C:\Users\wells&amp;gt; Get-WindowsCapability -Online | Where-Object Name -like &amp;#39;OpenSSH*&amp;#39;

Name  : OpenSSH.Client~~~~0.0.1.0
State : Installed

Name  : OpenSSH.Server~~~~0.0.1.0
State : NotPresent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sshd 目前沒有安裝。若要讓其他電腦可以透過 SSH 連線到此電腦，則透過 powershell 進行安裝。&lt;/p&gt;
&lt;p&gt;以下為 OpenSSH.Client 與 OpenSSH.Server 的安裝指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安裝 OpenSSH.Client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Add-WindowsCapability -Online -Name OpenSSH.Client~~~~&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;.1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安裝 OpenSSH.Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Add-WindowsCapability -Online -Name OpenSSH.Server~~~~&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;.1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安裝 OpenSSH.Server 需要一段時間，安裝好後會出現 &lt;code&gt;RestartNeeded: True&lt;/code&gt;，請先重開機。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/install_ssh_server.png&#34;
	width=&#34;738&#34;
	height=&#34;111&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/install_ssh_server_hu8647fad26835361edeb81911b88f4522_3586_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/install_ssh_server_hu8647fad26835361edeb81911b88f4522_3586_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Windows 安裝 SSH server&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;664&#34;
		data-flex-basis=&#34;1595px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用 Microsoft Defender 防火牆，對私人網路打開&lt;code&gt;端口 22&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果有防毒軟體進行管理，此行不需要。但需要檢查防毒軟體的防火牆是否開啟端口 22。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netsh advfirewall firewall add rule name=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow SSH from private network&amp;#34;&lt;/span&gt; dir=&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; action=allow protocol=TCP localport=&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; profile=private
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著，啟用 SSH 服務與開機自動啟用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 設定每次電腦開機，自動啟動 sshd 服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-Service -Name sshd -StartupType &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Automatic&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 檢查 SSH 服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Start-Service sshd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 sshd 的狀態，應該為 Running 狀態&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PS C:\Users\wells&amp;gt; Get-Service sshd

Status   Name               DisplayName
------   ----               -----------
Running  sshd               OpenSSH SSH Server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，透過另一台電腦嘗試連線，便可以成功連線上伺服器終端&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\wells_nodeA&amp;gt;ssh wells@nodeB

ECDSA key fingerprint is SHA256:eaAI46GIucGkcFEeSAwO2GWsTOgr1919FyDoXsJKYG1.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
wells@nodeB&amp;#39;s password: xxxxxx
Warning: Permanently added &amp;#39;nodeB,100.100.120.16&amp;#39; (ECDSA) to the list of known hosts.

wells@nodeB C:\Users\wells_nodeB&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;連線除錯方式&#34;&gt;連線除錯方式&lt;/h3&gt;
&lt;p&gt;如果進行遠端連線失敗的話，可在連線時加入 &lt;code&gt;-vvvv&lt;/code&gt;，進行排錯，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\wells_nodeA&amp;gt;ssh -vvvv wells@nodeB

OpenSSH_for_Windows_8.6p1, LibreSSL 3.4.3
debug1: Reading configuration data C:\\Users\\wells_nodeA/.ssh/config
debug3: Failed to open file:C:/ProgramData/ssh/ssh_config error:2
debug3: expanded UserKnownHostsFile &amp;#39;~/.ssh/known_hosts&amp;#39; -&amp;gt; &amp;#39;C:\\Users\\wells_nodeA/.ssh/known_hosts&amp;#39;
debug1: Authenticator provider $SSH_SK_PROVIDER did not resolve; disabling
debug2: resolving &amp;#34;server&amp;#34; port 22
debug3: ssh_connect_direct: entering
debug1: Connecting to server [100.100.120.16] port 22.
debug3: finish_connect - ERROR: async io completed with error: 10060, io:00000299F796C380
debug1: connect to address 100.100.120.16 port 22: Connection timed out
ssh: connect to host server port 22: Connection timed out
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到 &lt;code&gt;Connection timed out&lt;/code&gt;，表示可能的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伺服器端的防火牆阻擋連線（電腦、防毒軟體、路由器）。&lt;/li&gt;
&lt;li&gt;sshd 沒打開。&lt;/li&gt;
&lt;li&gt;客戶端的 port 22 被阻擋。&lt;/li&gt;
&lt;li&gt;DNS 解析錯誤。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些問題需要一步一步進 debug，更進一步的操作可以參照 Google 大神尋求協助。&lt;/p&gt;
&lt;h2 id=&#34;建立金鑰&#34;&gt;建立金鑰&lt;/h2&gt;
&lt;p&gt;由上述的 SSH 連線行為，可以發現目前尚未設定金鑰，所以預設登入是使用密碼進行登入。&lt;/p&gt;
&lt;p&gt;建立金鑰非常簡單，由客戶端或伺服器端上執行皆可進行。&lt;/p&gt;
&lt;p&gt;這裡 Windows 與 Linux 產生金鑰的指令都是透過 ssh-keygen。&lt;/p&gt;
&lt;p&gt;其中參數的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t ed25519&lt;/code&gt; 為產生一對 ed25519 金鑰。或將其改為&lt;code&gt;-t rsa -b 4096&lt;/code&gt;，表示使用 RSA，長度為 4096 位元。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-C &amp;quot;xxx&amp;quot;&lt;/code&gt; 裡面的參數為任意值，主要是添加備註，幫助辨識金鑰是由誰建立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t ed25519 -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_email@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;產金鑰的過程，會看到 &lt;code&gt;Enter file in which to save the key&lt;/code&gt; 的路徑，預設是在個人目錄底下的 .ssh 資料夾底下。&lt;/p&gt;
&lt;p&gt;決定好路徑後，會再詢問 passphrase（金鑰密碼），若為空值，未來在使用金鑰進行驗證時不需要密碼。若駭客取得到私鑰，還有第二道牆需要突破。&lt;/p&gt;
&lt;p&gt;金鑰是儲存在個人電腦、個人帳戶，一般來說外洩的機會有難度。若害怕金鑰外洩的，可以輸入非空的數值。如此未來在使用金鑰驗證，還會額外要求輸入密碼以進行驗證。但相對又麻煩了&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;passphrase 可以透過 ssh-agent 來實現快取，而在快取時間內不用輸入 passphrase。&lt;/p&gt;
&lt;p&gt;此部分建議設定金鑰密碼以提高安全性。並使用 &lt;a class=&#34;link&#34; href=&#34;#%e9%87%91%e9%91%b0%e5%af%86%e7%a2%bc%e6%90%ad%e9%85%8d-ssh-agent&#34; &gt;金鑰密碼搭配 ssh-agent&lt;/a&gt; 進行快取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\wells_nodeA&amp;gt;ssh-keygen -t ed25519 -C &amp;#34;admin@wellstsai.com&amp;#34;
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\wells_nodeA/.ssh/id_ed25519): C:\Users\wells_nodeA/.ssh/nodeA_ed25519
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in nodeA_ed25519
Your public key has been saved in nodeA_ed25519.pub
The key fingerprint is:
SHA256:hCRwfElJDbYaaG1JgyDTs4Mqn4tQpIiPhmTwMWIMRO0 admin@wellstsai.com
The key&amp;#39;s randomart image is:
+--[ED25519 256]--+
|E=oo.o.+B=.      |
|o=+.+ +o*o+.     |
|=o+.  o ooo      |
|.+..     .       |
|*    S           |
|*oo..            |
|=Xo+             |
|*oo              |
|o.               |
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;於 nodeA 產出公私鑰後，可以到個人 .ssh 目錄下檢查：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;##### Windows #####
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Users&amp;gt;ls C:\Users\wells_nodeA\.ssh\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;authorized_keys    config    nodeA_ed25519    nodeA_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;##### Linux #####
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@nodeA:~$ ls ~/.ssh/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;authorized_keys  config  nodeA_ed25519  nodeA_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，私鑰沒有副檔名（nodeA_ed25519），公鑰（nodeA_ed25519.pub）附檔名為 &lt;code&gt;.pub&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;產完金鑰對後，便可以開始部署金鑰。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ 注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;私鑰在本機（Local），公鑰在伺服器（Server）上。若在 node B 產出公私鑰，私鑰複製到 nodeA 後記得在 nodeB 上刪除私鑰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私鑰確定只有自己能夠存取，在 Linux 上，若權限為 777，請透過 chmod 改為 400。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; ~/.ssh/nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;使用-ssh-金鑰建立兩台電腦連線&#34;&gt;使用 SSH 金鑰建立兩台電腦連線&lt;/h2&gt;
&lt;p&gt;我們要把公鑰（nodeA_ed25519.pub）複製到伺服器上。可以透過 scp 這個程式。&lt;/p&gt;
&lt;p&gt;用法為：&lt;code&gt;scp 本地檔案路徑 使用者名稱@伺服器:伺服器路徑&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Windows 複製公鑰到 Windows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp C:\Users\wells_nodeA\.ssh\nodeA_ed25519.pub wells@nodeB:C:\Users\wells_nodeB\.ssh\nodeA_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows 複製到 Linux&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp C:\Users\wells_nodeA\.ssh\nodeA_ed25519.pub wells@nodeB:~/.ssh/nodeA_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;輸入完密碼後，便可以把公鑰透過 scp 複製到伺服器上。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users&amp;gt;scp C:\Users\wells_nodeA\.ssh\nodeA_ed25519.pub wells@nodeB:C:\Users\wells_nodeB\.ssh\nodeA_ed25519.pub
wells@nodeB&amp;#39;s password:
nodeA_ed25519.pub                                                                                  100%  102     1.1KB/s   00:00

C:\Users&amp;gt;scp C:\Users\wells_nodeA\.ssh\nodeA_ed25519.pub wells@nodeB:~/.ssh/nodeA_ed25519.pub
wells@nodeB&amp;#39;s password:
nodeA_ed25519.pub                                                                                  100%  102     1.2KB/s   00:00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;複製後，在 nodeB 上（伺服器端），新增檔案並填入公鑰內容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用者為根據 nodeB 的使用者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 一般使用者：&lt;code&gt;C:\Users\wells_nodeA\.ssh\authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;⚠️ Windows 系統使用者：&lt;code&gt;C:\ProgramData\ssh\administrators_authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux 一般使用者/root：&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;記事本開啟公鑰 (nodeA_ed25519.pub)&lt;/li&gt;
&lt;li&gt;全選複製內容&lt;/li&gt;
&lt;li&gt;新增上述檔案&lt;/li&gt;
&lt;li&gt;在上述檔案內，貼上公鑰內容後存檔&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/add_authorized_keys.png&#34;
	width=&#34;650&#34;
	height=&#34;475&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/add_authorized_keys_hu91ea7c412258991c6b595f4fb9514810_29691_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/add_authorized_keys_hu91ea7c412258991c6b595f4fb9514810_29691_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在 authorized_keys 填入公鑰&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;328px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最後，本地端 nodeA 新增 config 設定檔後儲存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;code&gt;C:\Users\wells_nodeA\.ssh\config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux：&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host nodeB_wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HostName nodeB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IdentityFile ~/.ssh/nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;設定檔內容說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host 為個人可辨識的名稱&lt;/li&gt;
&lt;li&gt;User 是伺服器上的使用者名稱&lt;/li&gt;
&lt;li&gt;HostName 為伺服器的 IP 或 host 名稱&lt;/li&gt;
&lt;li&gt;IdentityFile 為私鑰路徑，Windows 與 Linux 上都可以使用 &lt;code&gt;~/&lt;/code&gt; 表示個人目錄&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;儲存後，就可以實現以金鑰進行登入，若登入失敗要求輸入密碼，可以檢查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金鑰是否正確&lt;/li&gt;
&lt;li&gt;authorized_keys 路徑是否正確&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;進行 SSH 連線，此時不會要求輸入密碼&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\wells_nodeA&amp;gt;ssh wells@nodeB

Microsoft Windows [版本 10.0.22631.2861]
(c) Microsoft Corporation. 著作權所有，並保留一切權利。

wells@NODEB C:\Users\wells&amp;gt;exit
Connection to nodeB closed.

C:\Users\wells_nodeA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用-ssh-金鑰存取位於-synology-上的-git-伺服器&#34;&gt;使用 SSH 金鑰存取位於 Synology 上的 Git 伺服器&lt;/h2&gt;
&lt;p&gt;在本地端 Windows/Linux 上建立好金鑰後，將公鑰放置 Synology 的個人使用者目錄下的 .ssh 資料夾，沒有目錄的話需要自行建立。並新增 authorized_keys 並填入公鑰內容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/add_pubkey_synology.png&#34;
	width=&#34;1348&#34;
	height=&#34;640&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/add_pubkey_synology_hu62014adb1811ed3d149649c6a550fa69_95934_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/add_pubkey_synology_hu62014adb1811ed3d149649c6a550fa69_95934_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;把公鑰放到個人目錄下的 .ssh 資料夾&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/add_authorized_keys_synology.png&#34;
	width=&#34;1348&#34;
	height=&#34;640&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/add_authorized_keys_synology_hua5cf89d08361869cbdd2a5cff1f7e5d9_87544_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/add_authorized_keys_synology_hua5cf89d08361869cbdd2a5cff1f7e5d9_87544_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在 .ssh 目錄新增 authorized_keys 並填入公鑰內容&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在本地端上的 config 設定檔，填入主機資訊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;code&gt;C:\Users\wells\.ssh\config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux：&lt;code&gt;~\.ssh\config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host NAS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HostName 192.168.50.12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IdentityFile ~/.ssh/nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;設定檔內容說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host 為辨識名稱&lt;/li&gt;
&lt;li&gt;User 為 NAS 登入帳號&lt;/li&gt;
&lt;li&gt;HostName 為 NAS IP&lt;/li&gt;
&lt;li&gt;IdentityFile 為私鑰路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;執行 git remote 相關指令時，則會優先使用金鑰進行認證，而不用輸入密碼。&lt;/p&gt;
&lt;h2 id=&#34;使用-ssh-金鑰存取-github&#34;&gt;使用 SSH 金鑰存取 Github&lt;/h2&gt;
&lt;p&gt;首先在 Github 建立新的 repo，若已經有 repo 的可略過此步驟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/create_new_repo.png&#34;
	width=&#34;1204&#34;
	height=&#34;1154&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/create_new_repo_hucaff2837d5311d685a905e2dc0c57fcc_53849_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/create_new_repo_hucaff2837d5311d685a905e2dc0c57fcc_53849_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;建立新的 repo&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;250px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;建立後，github 會提供 SSH 的連結&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git@github.com:WellWells/TEST_REPO.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/repo_init_page.png&#34;
	width=&#34;2076&#34;
	height=&#34;1047&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/repo_init_page_hu0937035d31ecb543a3a4fa12be964a40_57171_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/repo_init_page_hu0937035d31ecb543a3a4fa12be964a40_57171_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;空的 repo 頁面&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果在本地端直接進行 clone，會跳出沒有權限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@server:~$ git clone git@github.com:WellWells/TEST_REPO.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &amp;#39;TEST_REPO&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git@github.com: Permission denied (publickey).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: Could not read from remote repository.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please make sure you have the correct access rights
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and the repository exists.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;點擊右上方的個人圖示叫出選單，點選 Setting 進入設定頁面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/github_profile_click_menu.png&#34;
	width=&#34;505&#34;
	height=&#34;1217&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/github_profile_click_menu_hu60cfd4cd21b44ecf7e36d8f39da4732b_24752_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/github_profile_click_menu_hu60cfd4cd21b44ecf7e36d8f39da4732b_24752_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;點選右上方的個人圖示，叫出選單&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;41&#34;
		data-flex-basis=&#34;99px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;左邊選擇 SSH and GPG keys，進入 SSH Key 頁面後，點擊 New SSH key 新增公鑰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/github_setting_SSH.png&#34;
	width=&#34;1465&#34;
	height=&#34;640&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/github_setting_SSH_hu737ead4ea9f5995b9bc9688fc8e26360_48823_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/github_setting_SSH_hu737ead4ea9f5995b9bc9688fc8e26360_48823_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;新增 SSH Key&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wellstsai.com/post/ssh-connection/add_new_ssh_key.png&#34;
	width=&#34;1489&#34;
	height=&#34;640&#34;
	srcset=&#34;https://wellstsai.com/post/ssh-connection/add_new_ssh_key_hu6b7fa2dd08c3a295469f6fff8a7d349c_40304_480x0_resize_box_3.png 480w, https://wellstsai.com/post/ssh-connection/add_new_ssh_key_hu6b7fa2dd08c3a295469f6fff8a7d349c_40304_1024x0_resize_box_3.png 1024w&#34;
		style=&#34;max-width:80%;border-radius: 5px; &#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;貼上公鑰內容&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在本地端上的 config 設定檔，填入主機資訊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;code&gt;C:\Users\wells\.ssh\config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux：&lt;code&gt;~\.ssh\config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host github_wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HostName github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IdentityFile ~/.ssh/nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;設定檔內容說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt; 為辨識名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HostName&lt;/code&gt; 固定為 &lt;code&gt;github.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IdentityFile&lt;/code&gt; 為私鑰路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 clone 一次就可以正常使用金鑰存取 Github repo。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wells@server:~$ git clone git@github.com:WellWells/TEST_REPO.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &amp;#39;TEST_REPO&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;warning: You appear to have cloned an empty repository.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;進階安全設定&#34;&gt;進階安全設定&lt;/h2&gt;
&lt;p&gt;此章節適用於對安全性敏感的使用者，也建議設定以下相關 config 以達到更高的安全性。&lt;/p&gt;
&lt;h3 id=&#34;關閉密碼認證&#34;&gt;關閉密碼認證&lt;/h3&gt;
&lt;p&gt;如果預設遠端伺服器 (nodeB) 走的是密碼認證，確定金鑰可以成功登入後，可以關閉密碼認證提高安全性。&lt;/p&gt;
&lt;p&gt;設定檔路徑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;code&gt;C:\ProgramData\ssh\sshd_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux：&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找到約 50 行附近，並將 PasswordAuthentication 改為 no，記得移除前面的 &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---#PasswordAuthentication yes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++PasswordAuthentication no
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改後，重啟 sshd 後，&lt;code&gt;下次登入僅使用金鑰進行，若金鑰遺失則無法登入&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;透過 PowerShell 重啟 sshd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Restart-Service sshd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux 重啟 sshd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service ssh restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;金鑰密碼搭配-ssh-agent&#34;&gt;金鑰密碼搭配 ssh-agent&lt;/h3&gt;
&lt;p&gt;在&lt;a class=&#34;link&#34; href=&#34;#%e5%bb%ba%e7%ab%8b%e9%87%91%e9%91%b0&#34; &gt;建立金鑰&lt;/a&gt;章節有說明 passphrase 預設可為空值，在進行 SSH 時不需要密碼。然而私鑰如果外洩，駭客可以直接透過此私鑰進行 SSH 連線。&lt;/p&gt;
&lt;p&gt;在此，建立金鑰時可以加入 passphrase，並透過 ssh-agent 快取私鑰在記憶體中，只要輸入一次密碼後，都會透過此快取進行金鑰驗證。&lt;/p&gt;
&lt;p&gt;以下操作使用 Windows 為範例，Linux 的操作基本相同一致。&lt;/p&gt;
&lt;p&gt;其主要差異在 Windows 底下 SSH 執行檔分為兩包，分別為：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSH 底下的 &lt;code&gt;C:\Windows\System32\OpenSSH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Git 目錄底下的 &lt;code&gt;C:\Program Files\Git\usr\bin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;故需要將 Git 的 sshCommand 更改為 OpenSSH 的路徑。&lt;/p&gt;
&lt;p&gt;Windows：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 更改 git 的 ssh.exe 為 OpenSSH 底下的路徑，若未更改，則無法使用儲存在 OpenSSH 記憶體的私鑰&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 開機自動執行 ssh-agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-Service ssh-agent | Set-Service -StartupType Automatic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 啟動 ssh-agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Start-Service ssh-agent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 檢查 ssh-agent 的狀態&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-Service ssh-agent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 ssh-add 把私鑰加入 ssh-agent，此時會要求輸入 passphrase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add C:\Users\wells\.ssh\nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列出當前 ssh-agent 中已載入的金鑰&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 刪除所有金鑰&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ssh-add -D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 若預設為 bash，則在 ~/.bashrc 末端加入以下行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 新增私鑰到 ssh-agent，並輸入 passphrase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add ~/.ssh/nodeA_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;macOS 指令可能有些不同，請參閱&lt;a class=&#34;link&#34; href=&#34;https://apple.stackexchange.com/questions/48502/how-can-i-permanently-add-my-ssh-private-key-to-keychain-so-it-is-automatically&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;解法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;確定 ssh-agent 已載入私鑰，私鑰可以備份至安全的地方，並在此電腦上移除。&lt;/p&gt;
&lt;p&gt;只要 ssh-agent 有成功啟動，預設都會透過 agent 進行金鑰認證。&lt;/p&gt;
&lt;p&gt;最終，本地端 nodeA 的 .ssh 資料夾，應該只有 known_hosts 與 config。&lt;/p&gt;
&lt;p&gt;config 裡面的 IdentityFile 路徑也可以移除。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host nodeB_wells
    User wells
    HostName nodeB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ssh-agent 預設時間是永久，若要提高安全性可以設定快取時間。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-agent -t 1h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-ssh-agent-轉發&#34;&gt;使用 SSH agent 轉發&lt;/h3&gt;
&lt;p&gt;Github 與 nodeB 上已經填入公鑰，本地端 nodeA 已經透過 ssh-add 新增私鑰到 ssh-agent。&lt;/p&gt;
&lt;p&gt;所以本地端可以 SSH 到 nodeB，或透過進行 git 相關指令把 Github 的程式碼 clone 下來至 nodeA。&lt;/p&gt;
&lt;p&gt;現在，若要在 nodeB 上進行 git clone 把 Github 的程式碼抓下來，私鑰不需要放到 nodeB。&lt;/p&gt;
&lt;p&gt;可以透過 SSH agent 轉發實現私鑰轉發。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 添加 -A 可以啟用 SSH 代理轉發。允許在遠端伺服器上使用本地的 SSH 金鑰。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -A wells@nodeB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果每次 SSH 都要帶參數覺得麻煩，也可以在 config 內新增 ForwardAgent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host nodeB_wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User wells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HostName nodeB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ForwardAgent yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;連線後，遠端伺服器可以使用 &lt;code&gt;ssh-add -l&lt;/code&gt; 檢查是否已經載入私鑰。&lt;/p&gt;
&lt;p&gt;若已載入私鑰，此時便可透過該金鑰，在 nodeB 上進行 git clone。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 預設自帶版本為 8.6p1，進行 agent 轉發後檢查伺服器上的私鑰是有載入的。&lt;/p&gt;
&lt;p&gt;然而進行 git clone 會出現公鑰認證失敗，此部分為 OpenSSH Bug。&lt;/p&gt;
&lt;p&gt;Windows 使用者可以到微軟 &lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/Win32-OpenSSH/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenSSH Release&lt;/a&gt; 手動安裝_8.9p1 後，進行 git 相關操作是正常的。&lt;/p&gt;
&lt;p&gt;另外，如果遠端伺服器的信任度不高，可考慮改用 Proxyjump 進行跳板。其基本原理是私鑰儲存在 NodeA 上，當在 NodeB 存取 Github 時，可設定 NodeA 為跳板。&lt;/p&gt;
&lt;p&gt;使用 Proxy 的好處是不從 NodeA 轉發金鑰到 NodeB 上，而是直接在 NodeA 上進行 SSH 操作，並把結果回傳至 NodeB。&lt;/p&gt;
&lt;p&gt;如果 NodeB 的信任度較低（例如有其他使用者擁有更高的 root 權限），則應考慮使用 Proxyjump 進行代理操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;參考文獻&#34;&gt;參考文獻&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.apple.com/zh-tw/guide/mac-help/mchlp1066/mac&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;允許遠端電腦取用你的 Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/windows-server/administration/openssh/openssh_install_firstuse&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;開始使用 OpenSSH for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ubuntu.com/server/docs/service-openssh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenSSH Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.miniasp.com/post/2021/12/11/How-to-setup-OpenSSH-Server-in-Windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何在 Windows 正確的安裝與設定 OpenSSH Server 服務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/windows/security/operating-system-security/network-security/windows-firewall/configure-with-command-line?tabs=powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用命令列管理 Windows 防火牆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/azure/devops/repos/git/gcm-ssh-passphrase&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SSH 複雜密碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1327633/how-to-maintain-ssh-agent-login-session-with-windows-10s-new-openssh-and-powers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to maintain ssh-agent login session with Windows 10&amp;rsquo;s new OpenSSH and PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dmtavt.com/post/2020-08-03-ssh-agent-powershell/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Automatically starting ssh-agent when powershell or git-bash are started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-tw/windows-server/administration/openssh/openssh_keymanagement&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;適用于 Windows 的 OpenSSH 中的金鑰型驗證&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Using SSH agent forwarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71399334/ssh-fails-to-use-private-key-from-ssh-agent-communication-with-agent-failed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ssh fails to use private key from ssh-agent: communication with agent failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SSH Agent Forwarding considered harmful&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
