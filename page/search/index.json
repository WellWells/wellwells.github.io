[{"content":"前言 接續前篇 開始使用 Git 管理專案，我們學習了如何透過 Git 與 VSCode 建立儲存庫、新增檔案至暫存區，並提交至本地端的儲存庫。\n本篇將著重在分支（branch）的操作上。並藉由 VSCode 與 Git Graph 說明分支的切換、新增、刪除。\n什麼是分支？ 分支在 Git 中扮演著重要的角色。舉例來說，當我們需要開發一個新功能時，可以在不影響主分支（例如 main/master）的情況下，建立一個新的分支（例如 feature/user-login）。待新功能開發完成後，再將其與主分支整合。\n以 GitHub 上 AdGuardHome 專案為例：\nmaster 分支藍色為 v108 的新版本開發，現有正式版本為紅色 v107，每釋出一版 beta 或是 release 就會開一個新的分支進行記錄。\n建立分支的好處有以下幾點：\n允許團隊成員進行多個獨立的工作，而彼此之間不會互相干擾，並能夠輕鬆地同步工作進度。 在不影響主分支的情況下，可以進行修改和測試，確保主分支的穩定性。 可以自由切換不同分支版本，以便確認各版本之間的差異，進而更好地掌握整個開發流程。 當操作出錯時，可以更直觀地還原到原本的狀態，進行修復。此外，雖然也可以透過 reflog 來進行還原，但相較之下較為複雜不直觀。 何時應該建立分支？\n在開發新功能或修復 Bug 時。 當不確定操作 Git 會如何影響時，或進行複雜操作時。 當要針對里程碑進行新分支建立時，確保每個版本都是獨立且可控的。 🚩當在本地複製遠端儲存庫後，進行新功能修改時。🚩 👉 其中第 4 點與第 1 點類似，但值得特別提出來討論的是：\n在初學 Git 時，若忽略了此步驟，往後在提交時很容易發生因主分支改變而引發的衝突。\n此外，在多人共同開發的情況下，通常會希望由單一負責人進行主分支的整合與確認。因此建議在不影響主分支的情況下開啟新分支進行推送，然後由負責人進行整合（merge 或 cherry-pick）。\n複製一個遠端儲存庫（git clone） 首先，我們先從 GitHub 上複製既有的遠端儲存庫，在此我選用的是 AdGuardHome 這個專案，專案選用是不限定的，也可以使用自己的新增專案，或是其它相關的專案都可以。\n我們到專案頁面下，有一個藍色的 Code 按鈕，在 Local 標籤下，找到 Clone 選項內的 HTTPS 的儲存庫網址：https://github.com/AdguardTeam/AdGuardHome.git。\n若使用 SSH 的話，需要配置一組金鑰給 GitHub，可以參照先前文章：使用 SSH 金鑰進行無密碼遠端連線 進行金鑰配置。\n到 VSCode 中，Ctrl + ` 叫出終端介面，輸入 git clone 網址，便可以進行複製：\nPS C:\\Users\\Wells\u0026gt; git clone https://github.com/AdguardTeam/AdGuardHome.git Cloning into \u0026#39;AdGuardHome\u0026#39;... remote: Enumerating objects: 35971, done. remote: Counting objects: 100% (3588/3588), done. remote: Compressing objects: 100% (689/689), done. remote: Total 35971 (delta 3101), reused 3014 (delta 2898), pack-reused 32383 Receiving objects: 100% (35971/35971), 18.10 MiB | 16.05 MiB/s, done. Resolving deltas: 100% (27165/27165), done. 也可以在 VSCode 中，按 F1 叫出指令視窗，輸入 git clone 後 enter，並在提供網址後，選擇儲存庫的路徑。不過這我幾乎沒有用過。畢竟直接在終端機輸入 git clone 打指令快速多了。\n之後，透過可以於終端機輸入 code AdGuardHome 或是 Ctrl+K, Ctrl+O 以開啟資料夾，選擇 AdGuardHome 這個資料夾。便可開啟 AdGuardHome 的專案資料夾。\ncode 專案資料夾 分支的切換（git checkout） 切換到現有分支 打開 Git Graph，可以看到：\n空心的藍點為本地端的指標，為我們目前所操作的位置。目前是指到的對應提交 ID 為 2611534d。 粗體表示選中的分支，目前是選中 master/origin。同時本地端也有一個 master 分支。 遠端指標（origin/HEAD）指向 master/origin，意思是預設的主分支。指標就是指標，是不能進行 checkout 的。 進行 checkout 切換時，就是把 HEAD 指標指到某個分支或是提交上。\n我們對著分支的框框雙點兩下，或是右鍵 → Checkout Branch…，就可以切換到對應的分支。此時原本的分支有的 A 檔案、B 檔案，如果切換的分支沒有。則會自動刪除。（沒有忽略的情況下。）\n分離指標（detached HEAD） 切換是可以切換到提交（commit）上的，對著任何一個提交（commit）右鍵進行 checkout，會出現 detached HEAD （分離指標）的狀態，此狀態的意思是目前 HEAD 沒有指在分支上，若未來在推送時，由於 HEAD 沒有指向分支所以沒辦法成功推送。\n此外在分離指標狀態下進行提交後，未來在切分支時，若沒有先建立分支，原本所提交的內容由於沒有分支，所以會不見變成孤立的提交（orphan commit），此時要透過 git reflog --all 進行查找。\n⚠️ detached 狀態下 → 新增 2 筆提交 → 推送失敗 → 切換至某個存在分支 → 原本提交的 2 筆變為孤立的提交\n✅ 所以請確定進行切換時是切換到分支上而不是提交上。否則會造成很多不必要的麻煩與處理。另外，孤立的提交會在 git 某些觸發條件下被清除。\n建立新分支（git branch） 假設要在某個提交後長出新的功能或是嘗試性的錯誤修復。對著該提交（73ad1f95）右鍵 → Create Branch…。中間有個 check out 的選項，打勾會自動切換到該分支，不勾選的話就單純的新增一個分支。\n圖中建立新分支時有勾選 checkout，所以可以看到 HEAD 會指向新建立的分支。\n刪除分支 假設要刪除我們剛剛建立的分支，由於我們目前是在該分支上，所以是沒辦法刪除的。可以先切換到其它分支上，然後對著原本的分支右鍵 → Delete branch。\n刪除的選項中有個 Force Delete 的選項，在刪除時會先檢查該分支中的提交有沒有被應用到其它分支上。例如：新增了一個 feature/test 分支，然後提交了 3 個新的內容，在刪除 feature/test 分支就會多了一個確認提醒這 3 個新內容沒有合併到其它分支上。如果還是堅持要刪除，則會跳出額外的 Force Delete 視窗，點選即可強制刪除該分支。\n結論 我們學習了如何從 GitHub 中進行複製遠端儲存庫，並且在不同分支之間進行切換、新增分支、刪除分支等操作。在這個過程中，我們也學會了處理可能導致分離指標狀態的情況。\n若不小心切換到提交而非分支，就會進入分離指標狀態，從而導致推送失敗。若直接切換到現有分支上，則會導致新提交變成孤立提交，只能透過 git reflog 查找。因此建議的做法是，在切換前先建立一個暫存分支，然後進行切換。在暫存分支上進行操作後，再進行 cherry-pick，最後刪除暫存分支。\n分離指標狀態 → 提交新的 2 筆 → 推送失敗 → 建立暫存分支 → 切換到既有分支 → cherry-pick 這 2 筆提交 → 推送 → 刪除暫存分支。\n在開始複製遠端儲存庫時，建立新的分支是第一要務，以確保主分支不受影響。不過當功能確認是正常的情況下或僅有單人操作時，建立新的分支可能就不是必要的。然而，無論在操作、整理、或是存在不確定因素時，都建議開新的分支進行操作，如此一來操作錯誤可以直接切回正常的分支，然後刪除操作失敗的分支。\n熟悉分支的切換、新增、刪除後，就可以開始學習 git rebase 整理好已經提交的內容了。\n參考文獻 GitHub - mhutchie/vscode-git-graph ","date":"2024-03-25T22:50:00+08:00","image":"https://wellstsai.com/post/git-tutorial-branches/cover_hued530971dee35542191f34227004ccb6_234260_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/git-tutorial-branches/","title":"Git 分支的建立與切換與刪除"},{"content":"前言 延續前篇 什麼是 Git 與版本控制？，本節主要說明如何使用 VSCode 與 Git 管理專案。\n其中大部分的操作盡量簡化並避免指令的輸入，除非在操作上有必須且不可之因素。\n不知道什麼是 Git、VSCode 或是還沒安裝的可以參考 Awesome Windows - 必備生產力軟體安裝與說明，有說明 VSCode 與 Git 的安裝教學。\n其他平台上的安裝，可以到各自的官方網站中進行下載與安裝，在此就不過多贅述。\n使用 Git 的分散式工作流程 在一個資料夾中透過指令的方式輸入 git init 初始化工作區資料夾後，會在當前目錄下建立一個新的 .git 資料夾，這個資料夾會記錄並追蹤其他檔案以進行版本控制。\n這個資料夾預設是不會動到的，換言之，如果想移除某個資料夾的 git 版本控制，移除 .git 資料夾目錄即可。\n初始化工作區後，我們便可以透過 git add 指令，把需要的檔案加入暫存區（stash area）。\n當確定好暫存區的檔案後，便可以進行提交（git commit）。把這些檔案的變化，以一個 commit 的形式新增到本地儲存庫（local repo）中。\n新增到本地儲存庫後，後續可以透過推送（git push）把本地端的修改推到遠端儲存庫上。\n而其他人像是 User 2 或是 User 3，透過複製（git clone）或是擷取（git fetch）把遠端儲存庫下載到本機電腦，便可以看到剛剛推送的新資料。\n其中，User 2 與 User 3 各自有獨立的本地儲存庫。也因此被稱為分散式版本控制系統。\n當遠端儲存庫有新的修改，本地儲存庫必須先與遠端儲存庫同步才能推送，這部分後續會在說明。\n這邊只需要注意的點：\n上述指令都可以藉由 VSCode 中的指令快速完成，也因此詳細的指令不需要特別記住。 本地初始化本地儲存庫後，要推送到遠端儲存庫前，要先使用 git remote 新增遠端儲存庫的資訊。 在使用推送前一定要先進行擷取，以確保當前的分支與遠端儲存庫一致。不要隨便使用 force push 覆蓋遠端儲存庫的資訊。 設定 Git 的使用者資訊 在安裝好 git 後，需要先設定使用者的名稱。每次提交都會使用這些資訊來進行記錄。\n首先打開命令列（鍵盤上的 ⊞ Win + R，並輸入 cmd 後點確定）。\n並藉由以下指令設定 git 使用者的資訊，其中下面資訊需更換為自己的名稱與信箱：\ngit config --global user.name \u0026#34;WellsTsai\u0026#34; git config --global user.email \u0026#34;Wells@wellstsai.com\u0026#34; 使用 git config \u0026ndash;list，可以檢查目前 git 的設定狀態\nwells@server:~/$ git config --list user.name=WellsTsai user.email=Wells@wellstsai.com core.editor=code --wait 或是也可以直接使用 VSCode，開啟配置檔檢查：\nLinux: ~/.gitconfig\nWindows: C:\\Users\\USER_NAME.gitconfig\n確定 .gitconfig 有內容就可以開始進行 git 的相關指令了。\nVSCode 與前置作業 執行 VSCode 第一次執行 VSCode，語言可能是英文的。\n可以點選 Ctrl + Shift + P 呼叫出命令面板，輸入 Language，找到 Configure Display Language，便可以切換語言為繁體中文。\n更多功能像是左下方的齒輪，可以提供主題切換、同步 VSCode、多個設定配置、遠端通道存取。需要了解的點選上方的說明進行學習。\nVSCode 快速鍵 有部分指令記住可以加快 VSCode 上的使用，以下快速鍵是建議記住的：\n說明 快速鍵 備註 命令面板 Ctrl + Shift + P 或是 F1 最常使用的指令，要做的事情幾乎都可以用到。 搜尋與開啟檔案 Ctrl + P 搜尋檔案，輸入冒號可以快速跳到某行。 開啟命令提示字元 Ctrl + ` 「`」 是位於鍵盤 1 左邊的「~鍵」，叫出命令列可以進行系統的操作，像是刪除檔案、執行腳本、操作 Git 指令等。 開啟資料夾 Ctrl + K, Ctrl + O 除了開啟單一檔案(Ctrl + O)，VSCode 可以開啟資料夾，以某個資料夾為根目錄進行專案開發。 自動換行 Alt + Z 有時候螢幕太小而程式碼太長，自動換行可以把超出螢幕的文字自動換行。 其實還有很多快速鍵，不過我最常用的也就這幾個，更多的指令可以參考官方資料\n這些指令不記的話，那麼就要把滑鼠移動到左上方點選檔案→開啟資料夾，對比於使用快速鍵（Ctrl + K, Ctrl + O）可以省下許多時間。\n或是 F1 叫出命令面板，輸入開啟資料夾也是另一種方法。\nVSCode 的延伸模組 VSCode 提供非常多好用的延伸模組，其中要能夠順手的操作 Git，有一些是幾乎必裝的延伸模組。\nGitLens： 提供非常多功能，並提供付費版可以解鎖一些進階功能（Git Graph、可視化文件歷史記錄等\u0026hellip;），對於普通開發者免費版本已經足夠，像是互動式的 rebase 編輯器、編輯器顯示 blame 資訊 等都是免費的。為目前 Git 延伸模組安裝的第一名。 Git Graph： 提供了一個交互式的 Git 圖形界面，讓你可以在編輯器中輕鬆地查看和操作分支、提交歷史等 Git 相關信息，並直觀地理解專案結構、分支和歷史。由於 GitLens 的 Git 圖形是進階功能，可以改裝此擴充解決。 基本的兩套已經非常足夠，還有一些其他延伸模組沒提及到的就自行評估與自行安裝。\nSSH 與遠端連線 在我們一般工作的電腦，往往都是在 Windows 上進行，像是上網看影片、Windows 驅動開發、Office 資料處理、MATLAB 等\u0026hellip;。\n對於 Linux 伺服器上所進行的開發，VSCode 提供了非常多的方式進行遠端連線與開發。例如：\nWindows 系統下安裝 Windows Subsystem for Linux並藉由 VSCode 連線至 WSL。\n使用 Remote-SSH 進行連線。\n在外面沒辦法進行 SSH 到 Linux 伺服器？ 我們可以安裝 Tailscale 進行內網穿透。\n使用 遠端隧道 - Remote Tunnels 進行遠端開發。\n部屬容器進行連線。\n這邊要注意的是，曾經看到同事掛載 SAMBA 伺服器，並直接在 Windows 底下使用 VSCode 開啟掛載路徑，這樣進行開發的效能是直接大打折扣的。\n初始化 Git 資料夾 開啟資料夾 打開 VSCode 後，我們可以在使用者目錄底下新增一個新的資料夾，並透過 VSCode 開啟此資料夾。\n新增資料夾可以透過 UI 或是指令的方式新增，其指令在 Windows 與 Linux 皆為 mkdir git_test\n新增後，可以使用 Ctrl + K, Ctrl + O 開啟該資料夾。\n或是直接在終端機中輸入 code git_test。\nVSCode 會開新視窗，並將其根目錄設為 git_test。\nwells@server:~$ mkdir git_test wells@server:~$ code git_test 新增檔案 使用 Ctrl + N 新增一個空白檔案，或是在終端機中輸入 code hello.txt 便可以開啟一個 hello.txt 的空白檔案。\n輸入一些文字後儲存，路徑就為預設的專案根目錄中。\n初始化本地儲存庫 於終端機中輸入 git init，便可在該目錄初始化本地儲存庫。預設分支名稱為 master。\n此時，hello.txt 檔案名稱會被標記為變為綠色，表示 git 看到了未追蹤的檔案。\n原始檔控制 檢視差異（git diff） 點選 VSCode 左邊有一個類似於 git 分支的圖示可以進行原始檔控制，可以看到有一個 hello.txt 的變更。\n該檔案右邊有個 U 表示 Update，若為 M 表示該檔案已被追蹤，現在被修改了。\n點選 hello.txt，編輯區會跳出比對視窗，比對視窗的左邊為原始檔，右邊為目前的檔案，會以綠色標示新增的內容、紅色代表刪減的內容。由於一開始沒有內容，故左邊原始檔案內容全部為空，而右邊則是我們新增的內容文字。\n暫存檔案（git add） 我們可以選取想要的檔案，將其暫存至暫存區（stash）。對變更區的檔案右鍵點選暫存變更，或是當滑鼠移到該檔案時，有一個 + 號，點擊即為暫存變更。\n提交暫存區檔案（git commit） 在暫存區後，我們可以在暫存的變更看到被暫存的檔案，此時有一個檔案在暫存區。\n我們輸入好提交按鈕上方的訊息，點擊提交便可以在本地端儲存庫提交一筆新的 commit。\n顯示當前的 graph（git log） 可以再重新刪掉一些內容，或在新增一些檔案。然後重新進行上述步驟新增第 2,3 筆 commit。\n回到原始檔控制的標籤，可以找到 View Git Graph (git log) 的按鈕，該按鈕為 GitGraph 延伸功能所提供，所以必須確定有安裝此擴充功能才有此按鈕。\n可以看到當前的分支為 master，目前已經提交了兩筆 commit。\n由此 Git Graph 可以對 Git 進行許多複雜的操作，這些操作會等後面的章節提到再說明。\nGit commit 特徵 從上述的 Git Graph 中可以看到，我們目前在分支 master。在實際專案中，可能會有許多不同的分支進行著，而在沒有衝突的情況下，開發者可以任意且自由地切換分支。\n提交的 commit 具有以下要素：\n作者（Author） 提交者（Committer） 內容（標題 + 詳細說明） 檔案變動資訊 Commit ID 時間 其中要特別注意的：\ncommit ID 為唯一，用來進行 Git 相關操作的一個獨立 ID。\ncommit 內容的部分，第一行為標題，之後會空一行才開始輸入內文。\n你也可以指輸入一行標題，弄死下一個看你程式的人。🤫\n下一個人看到你寫的程式的時候，就會抱怨為什麼這個＿＿連寫清楚 commit 都有問題？\n結論 在此，我們已經學會了在本地端使用 git 初始化 repo、新增檔案、將檔案暫存後進行推送，並且瞭解了整個 Git 圖形的情況。\n這些基本操作在 VSCode 上進行算是蠻清晰明瞭，當然也可以透過命令行一步步執行，只是要查看檔案的狀態通常需要使用命令，像是 git status 與 git log，在純文字介面情況下進行判讀，若遇到大型專案會難閱讀分支間的關係。\n甚至是透過指令輸入提交，需要一直不斷地 -m 分割每行（git commit -m \u0026ldquo;第一行\u0026rdquo; -m \u0026ldquo;第二行\u0026rdquo; -m \u0026ldquo;第三行\u0026rdquo;）。\n也因此簡單的事情，我們還是透過 VSCode 內建的原始檔控制進行以降低人為錯誤。\n參考文獻 初次設定 Git VSCode - docs ","date":"2024-03-12T16:30:00+08:00","image":"https://wellstsai.com/post/git-tutorial-init/cover_hu1d6c6e3de26ddd79b007c8451395a77f_90136_120x120_fill_box_smart1_3.png","permalink":"https://wellstsai.com/post/git-tutorial-init/","title":"開始使用 Git 管理專案"},{"content":"前言 本系列 Git 教學將著重在 VS Code 與 Git 的操作、整合與專案管理。\n什麼是版本控制？ 版本控制是隨著時間用來追蹤文件的差異與變化，並提供儲存與回朔到特定版本的功能。\n像是 Google Sheet、微軟 Microsoft 365 (Word、PowerPoint、Excel) 都提供歷史版本檔案的回朔：\n藉由軟體所提供的歷史紀錄，我們可以不需要將檔案複製進行備份，形成多個檔案的結果。\n版本控制如果是文字檔案，還可以比對檔案之間的差異。像是說明 test.txt 從 A 版本變為 B 版本新增或刪除了哪些東西，這就是版本控制的目的。\n而要管理像是文字檔案（txt, c, py, js, md 等\u0026hellip;），繪圖檔案(psd, ai)、模擬檔案等文件。\n可以透過常見主流且為業界標準的軟體為：Git 與 Subversion(SVN)。\n兩者皆為開源、免費。可以在私人電腦或是公司電腦上進行安裝並管理文件、專案。\n什麼是 Git？ Git 是一個分布式版本控制系统（version control system，VCM）。\n每個成員都可以將完整的程式碼從遠端倉庫(remote repo(sitory))複製（clone）到本地端（local repo）。\n當多個不同成員進行 clone 後，每個成員的本地電腦端都會擁有自己的一個副本進行管理。\n若成員 A 開始修改與編輯後，可再進行推送（push）到遠端倉庫。\n成員 B 由於當時 clone 時，還沒有 A 的修改，所以可能會發生同一個檔案上的衝突（conflict）。\n此時 B 要與 A 進行溝通，進行差異上的合併（merge）、或是進行重置基準（rebase）等操作。\n以 AdGuardHome 開源軟體為例，可以看到開發者會針對每個新版本會開啟新的分支（branch）進行管理，並且由多個不同使用者進行提交程式碼。\n其中在提交程式碼並修復新的 bug 可能會開新的分支，最終由主開發人員評估後，進行 merge 的操作。\n什麼是遠端倉庫？ 我們在本地端初始化一個新的 repo 後，可以將本地端的內容 push 到遠端倉庫。\n遠端倉庫的主要功能是儲存程式碼，為位於網路上的伺服器。\n並可能提供一些額外的功能像是：\n代碼審查（code review） 問題追蹤（issue tracking） 持續整合（continuous integration，CI） 持續交付（continuous delivery，CD） 建立 wiki 文件說明 項目管理 權限管理 可視化進度（visualize progress） 等\u0026hellip; 目前主流的遠端倉庫主要有：\nGitHub（微軟）：\n提供了代碼審查、問題追蹤、持續整合等功能。 在個人開發者和企業中都廣受歡迎。 提供免費和付費服務計劃，用戶可以根據需要選擇不同的計劃。 GitLab：\n可以在公司內部架設，也有雲端服務可用。 強調 DevOps 和 CI/CD 整合，提供了完整的 DevOps 平台。 提供社區版（免費）和企業版（付費）等不同版本。 Azure DevOps（微軟）：\n不僅是程式碼管理工具，還是一個完整的 DevOps 平台，包括代碼管理、CI/CD、專案管理等功能。 深度整合了 Azure 雲端服務。 提供免費和付費計劃，企業和團隊可以選擇適合自己需求的方案。 上述平台，會根據使用人數、是否付費，提供不同層級的服務。\n在個人開發者中，使用最多的遠端倉庫就是 GitHub 了。\n中大型企業往往不想將程式碼放到 GitHub，會考慮自己架設 GitLab 放在公司內部的伺服器上。\n而某些外國企業在合作上，甚至是需要執行 DevOps 進行程式碼追蹤，會另外要求使用 Azure DevOps 進行程式碼管理與敏捷開發。\n開始使用 Git 選擇指令介面還是圖形界面？ 在開始使用 Git，首先要有好的 IDE 進行操作。\n傳統上的 IDE 就是 cmd + vim/nano 等文字編輯器。藉由命令提示字元、一行一行的輸入指令。\ngit merge 時遇到檔案衝突，必須在指令模式下找到衝突的程式碼、編輯、存檔、git add後，最終沒衝突再 git commit。\n相比之下，圖形界面（GUI）則簡化了這些複雜的指令輸入過程。透過點擊操作，可以輕鬆解決許多問題。\n對我來說，大部分的操作都是透過 GUI 進行，因為它更直觀且易於操作。不過有些特定的操作、或是制式化的操作可能使用指令模式來處理會更快。\n我建議熟悉兩種操作方式，就可以更靈活地使用 Git。\n所以電腦請先安裝好：\nGit VS Code Windows Terminal（選用） PowerShell（選用） Clink（選用） 詳細的安裝方式可以參考 Awesome Windows - 必備生產力軟體安裝與說明 進行安裝。\n我最初開始學 Git 時，使用的遠端倉庫為 GitHub。\nGithub 提供了 GitHub Desktop，這套軟體少了蠻多重要的功能，因此不建議使用。\n還有像是 SourceTree、TortoiseGit 等其他 GUI，雖然是 Git 官方所推薦，但相較於 VS Code 的擴充性還是差了一大截所以也不推薦。\n註冊 GitHub 在 GitHub 上進行註冊，取得一個免費放程式碼的空間。\n無限制的公共/私人存儲庫 自動安全和版本更新 每月 2,000 分鐘的 CI/CD 公共存儲庫免費 500 MB的套件存儲 公共存儲庫免費 問題和專案 社區支援 GitHub Copilot 訪問 無論是架設技術部落格或是存放個人的程式碼都綽綽有餘。\n至於註冊方法可以參照官方一步一步進行操作。整體來說不會很困難。\n使用 Git 的迷思 害怕使用 Git\n萬物皆可 Git，只要檔案不要超過 100 MB（經驗法則）。除了程式碼外，也可以用來追蹤像是 .md 或是圖片檔案。\nGit 太複雜，難以入門\n在網路上，常常會將 Git 與 SVN 進行比較，並聲稱 Git 很複雜。\n實際上，初次接觸 Git 時，你只需要記住基本操作: git commit，並在提交時附上簡單的說明。隨著時間的推移，你會逐漸熟悉其他操作，如合併（merge）或重整（rebase）分支等。\n如果擔心操作出錯，可以創建一個新的分支（例如 TEST）來進行操作。當你確定操作無誤後，可以刪除原始分支（如 main），並將測試分支（TEST）重新改名為為主分支（main）。這樣做可以大大減少犯錯的可能性。如果 TEST 分支在 merge 卡住、出現問題時，可以輕鬆地刪除它。\n需要購買相關書籍嗎？ 不需要！ (但是，如果想看紙本書籍也不是不行。)\n現在網路資訊那麼發達，指令忘了網路上查一查就好了。\n更多免費的資源，官方也早已撰寫好電子書籍 - Pro Git book。\n如果真的有問題，問問 ChatGPT 可能都還比較快。\n也因此看書學習 Git 是不需要的。\n如果要學習 Git，一些推薦的相關資源可以參考：\nPro Git book Git Branching Git Tutorial (w3schools) 結論 下一章節會說明如何使用 VS Code 進行 Git 與專案整合。\n參考文獻 Git - 關於版本控制 版本控制 - 維基百科 什麼是版本控制？ | Microsoft Learn 什麼是 Git？ | Microsoft Learn ","date":"2024-03-04T16:50:00+08:00","image":"https://wellstsai.com/post/git-tutorial-introduction/cover_hua77a28c2b5a5a614a6a1ece286d27b68_228739_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/git-tutorial-introduction/","title":"什麼是 Git 與版本控制？"},{"content":"引言 買的 M.2 NVMe 外接硬碟盒終於到貨了。\n本篇將進行說明安裝與測速，以供後人參考。\n最終目的為組一個 USB 3.2 Gen 2 的 SSD 外接硬碟。\n外接硬碟盒 延續前篇 M.2 SSD 外接固態硬碟選購指南\n最終根據外觀與需求選擇了 iTGZ 外接盒，使用的是瑞昱的 RTL9210。\n本次在淘寶上含運費約 ¥65，約為台幣 295 元。\n整個內容物包含：\nM.2 外接硬碟盒。 十字螺絲起子。 20 公分傳輸線，Type C 對 C 與 Type C 對 A 各一。 散熱片。 M.2 SSD 本身 RTL9210 支援 PCIe Gen3×2，其設計為 USB 3.2 Gen 2，根據這兩點只需要選擇 PCIe 3 即可。\n在此選擇了 TOSHIBA 旗下的KIOXIA EXCERIA G2 1TB，其特點為：\n讀寫都大於 1200 MB/s。 主控：Phison E12C。 NAND 類型：TLC。 便宜。 2024/02/01 購入，南紡 3C 販售價格為 NT$1590，搭配折價券在折 200 元。實付 NT$1390。\n安裝 M.2 SSD 到外接盒 安裝 SSD 到外接盒非常容易：\n透過外接盒所附贈的附螺絲起子，把外接盒打開。 插入 M.2 SSD。 貼上散熱片。 蓋上外接盒蓋子並鎖上螺絲。 並使用附贈的線材連接至電腦。\n格式化與 4K 對齊外接 SSD 預設插入電腦，電腦是不會出現裝置的，因為沒有格式化。\n首先點選鍵盤 Win + R 叫出執行，輸入 diskpart，\n輸入 list disk 顯示當前電腦的硬碟資訊：\nDISKPART\u0026gt; list disk 磁碟 ### 狀態 大小 可用 Dyn Gpt -------- ------------- ------- ------- --- --- 磁碟 0 連線 953 GB 1024 KB * 磁碟 1 連線 14 GB 0 B 磁碟 2 連線 931 GB 931 GB 在這台電腦，硬碟 2為插入的 SSD 外接盒。透過 select disk 2 選擇這個硬碟：\nDISKPART\u0026gt; select disk 2 磁碟 2 是所選擇的磁碟。 建立主要分割區，其中 4K 進行對齊：\nDISKPART\u0026gt; create partition primary align=4096 DiskPart 成功地建立了指定的磁碟分割。 輸入format fs=exFAT quick進行格式化，其檔案格式為 exFAT，可在 Windows、macOS、Android、iOS 上進行存取。\nDISKPART\u0026gt; format fs=exFAT quick 100 % 已完成 DiskPart 已順利格式化磁碟區。 輸入list vol顯示磁碟區的標籤，可以看到磁碟區 3 還沒有標籤。\nDISKPART\u0026gt; list vol 磁碟區 ### Ltr 標籤 Fs 類型 大小 狀態 資訊 ---------- --- ----------- ----- ---------- ------- --------- -------- 磁碟區 0 C NTFS 磁碟分割 953 GB 良好 開機 磁碟區 1 FAT32 磁碟分割 100 MB 良好 系統 磁碟區 2 NTFS 磁碟分割 683 MB 良好 隱藏 磁碟區 3 exFAT 磁碟分割 931 GB 良好 選擇該磁碟區sel vol 3，並指派一個磁碟編號，在此設定為 E 槽，其指令為assign letter=E：\nDISKPART\u0026gt; select vol 3 磁碟區 3 是所選擇的磁碟區。 DISKPART\u0026gt; assign letter=E DiskPart 成功地指派了磁碟機代號或掛接點。 打開本機，就會看到外接硬碟了。\n硬碟測速 測速分別使用CrystalDiskMark 與 AS SSD Benchmark 兩款工具，其測試速度結果如下：\n其中可以看到的是，順序讀寫約為 900 MB/s 附近。\n以實際複製 115 GB 共 29 個檔案為案例，耗時約為 2 分 30 秒。\n溫度從一開始待機 35 度上升至 58 度，複製後 30 秒內 可降至 50 度內。\n複製速度在 700 MB/s 附近。\n結論 以 NT$1685 的價格組好一個 USB 3.2 Gen 2 的 1 TB SSD 外接硬碟覺得 CP 值蠻高的。\n後續就看未來使用上有什麼問題再繼續補充了。\n","date":"2024-02-23T01:22:00+08:00","image":"https://wellstsai.com/post/unboxing-nvme-ssd-enclosure/cover_hub0b0d78f44dbe1b5578c111ce8ec3d08_181948_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/unboxing-nvme-ssd-enclosure/","title":"SSD 外接硬碟開箱與速度測試"},{"content":"引言 今天想要選購一個外接固態硬碟（external SSD），該如何進行？\n另外在市面上還可以看到隨身碟（USB flash drive）與傳統外接硬碟（external HDD）這兩種。\n其特性與差異整理如下表：\n特點 隨身碟 固態硬碟（SSD） 外接(機械)硬碟（HDD） 速度 速度較慢 非常快，低讀寫延遲 最慢、高讀寫延遲 容量 8, 16, 32, 64, 128, 256, 512, 1024 GB 250, 500 GB, 1, 2, 4 TB 1, 2, 4, 5, 6, 8, 10 TB 體積 小巧，便於攜帶 小型，便於攜帶 較大，相對較重 熱處理 差 散熱片導熱 不需處理 優點 便宜、小巧 速度快 容量大、單位成本低 缺點 速度差異大 價格普遍較高 機械結構：耗電大、怕摔、有噪音 市場平均每 GB 成本（NTD/GB） 3.58 元 2.59 元（外接成品）、2.33~2.54（M.2） 1.26 元 HDD\n上表可以看到 HDD 使用機械結構，在考慮大容量、不在意速度時可以考慮。且由於怕摔，目前在方便攜帶上不是考慮的最佳選擇。\n隨身碟\n隨身碟與固態硬碟的差異主要在於容量與速度的考量，隨身碟其特性為小巧好攜帶，但市面上太多節約成本的考量導致速度參差不齊。\n隨身碟是單位成本最貴的，但容量也不過 32, 64, 128 GB 為常見選擇，其價位也差不多為 100 （32 GB）到 500 元（128 GB）附近。\n市售產品有像是：\nKingston DT Max 256G 256 GB：NTD 799。 威剛 UE800 256G：NTD 999。 廣穎 Marvel M80 250G：NTD 945。 創見 ESD310C 256GB：NTD 1199。 SSD\n固態硬碟市場上有分為成品型與獨立 NVMe M.2 SSD + 外接盒\n成品型 獨立NVMe M.2 SSD + 外接盒 外觀較為小巧、買來可以直接使用，通常裡面會提供一個 SSD 硬碟與一條線，可以直接無痛使用。不需要再管東管西。 一切都很自由，可以自行選擇不同的廠商、記憶體顆粒、主控晶片、外接盒的控制器等，且整體價格上會在更低一點。 M.2 指的是一種小型、高效的介面規格，並支援多種訊號協定。其中用於 SSD 的協定為 SATA 與 PCI Express（PCIe） 兩種傳輸協定。\nSATA 最快速度為 6 Gbps，實際最高速度為 600 MB/s。如果可以請選擇 NVMe，否則會受限於 USB 速度無法跑版 USB 3.2 Gen 2 的 1000 MB/s。 NVMe 是一種專為使用 PCIe 介面的快閃記憶體而設計的通訊協定，其中在選購 SSD 時會標記 PCIe Gen3 或是 PCIe Gen4，PCIe Gen 4 具有比 PCIe Gen3 更快的速度，但若選擇組裝外接 SSD，USB Gen 2 的速度選擇 PCIe Gen 3 即可，可以達到最快讀寫速度 1000 MB/s 左右。 本篇文章會以 NVMe M.2 SSD + 外接盒為出發點，進行選購注意參數說明。\n硬碟選擇優先順序 好攜帶：隨身碟 \u0026gt; SSD \u0026gt; HDD 高效能：SSD \u0026gt; 隨身碟 \u0026gt; HDD 考慮超大容量：HDD \u0026gt; SSD \u0026gt; 隨身碟 成本考量：隨身碟 \u0026gt; HDD \u0026gt; SSD 作業系統開機：SSD \u0026gt; HDD \u0026gt; 隨身碟 怕摔：隨身碟 \u0026gt; SSD \u0026raquo; HDD 功耗：SSD \u0026gt; 隨身碟 \u0026gt; HDD 不缺錢：SSD \u0026gt; 隨身碟 \u0026gt; HDD USB 外接介面 外接硬碟無論內部是走哪種協定或技術，最終對主機都是透過 USB 進行通訊。\nUSB 歷年改版上有很多不同名稱與版本，容易令人混淆與匪夷所思。\n目前把握常見的三個最常見的 USB 版本：\nUSB 3.2 Gen 1：最高速度為 500 MB/s。 USB 3.2 Gen 2：最高速度為 1200 MB/s。 USB 3.2 Gen 2x2：最高速度為 2400 MB/s。 詳細的 USB 名稱與速度、線長比較如下表所示：\nUSB 3.2 Gen 1 USB 3.2 Gen 2 USB 3.2 Gen 2×2 USB4 Gen 2×2 USB4 Gen 3×2 傳輸頻寬 5 Gbps 10 Gbps 20 Gbps 20 Gbps 40 Gbps 理論最快速度 500 MB/s ≈ 1200 MB/s ≈ 2400 MB/s ≈ 2400 MB/s ≈ 4800 MB/s 實際單檔讀取速度 450-500 MB/s 950-1000 MB/s 1800-1900 MB/s 1800-1900 MB/s 3700-3800 MB/s 先前名為 USB 3.1 Gen 1、USB 3.0 USB 3.1、USB 3.1 Gen 2 × × × 介面選項 USB-A、USB Micro B、USB-C USB-A、USB Micro B、USB-C USB-C USB-C USB-C 線長 \u0026lt; 1 m \u0026lt; 1 m \u0026lt; 0.8 m \u0026lt; 0.8 m \u0026lt; 0.8 m 例如 iPhone 15 Pro 支援 USB 3.2 Gen 2 速度，速度最高可達 1200 MB/s，反觀 iPhone 15 只支援到 USB 2.0，故速度最高只有到 480 Mbps（60 MB/s）。\n若要將 NVMe M.2 SSD 變成外接硬碟，其 2024 年主流硬碟皆為 USB 3.2 Gen 2，實際速度讀寫約為 1000 Mbps 附近。\n也因此，選擇 NVMe M.2 SSD 讀寫速度只需要找讀寫 1000 MB/s 以上即可。\n例如「鎧俠 KIOXIA Exceria G2 1TB/M.2 PCIe Gen3/讀:2100M/寫:1700M/TLC/五年保」，表示循序讀寫分別為 2100 MB/s 與 1700 MB/s，並使用 TLC 顆粒，容量為 1 TB。\n根據 USB 編碼方式的差異，理論上最高傳輸速度可能會略有差異。實際速度根據不同的顆粒、快取機制也有所差異，可多參考網路上的性能指標評測。實際單檔速度僅為讀取速度，實際單檔寫入速度通常會相同或更低一些。\nNVMe M.2 SSD 選購注意參數 TLC 還是 QLC？ 在選用上優先考量 TLC 而不是 QLC，QLC 並非目前市場主流選擇。\n在選用 SSD 時最常看到就是 TLC (3) 與 QLC (4)，偶而會看到 MLC (2)。\n括號內表示的是每個單元可以儲存的 bit 數，越小表示要達到同等容量會需要更多的單元，而因為單元數量更多，也因為資料更能夠有冗餘避免讀寫失敗，等於壽命較長。且資料處理上也相對較快。\n選擇 PCIe Gen 3 還是 PCIe Gen 4？ 市面上外接盒的主控晶片通常 PCIe Gen 3，可達到 USB 3.2 Gen 2的速度。所以選擇 PCIe Gen 3 即可，並且讀寫要大於 1200 MB/s 即可。選擇 PCIe Gen 4，也是可以向下兼容 PCIe Gen 3。\n若要組 USB 3.2 Gen 2×2，則要看外接盒的控制晶片有沒有支援，且該 NVMe M.2 SSD 讀寫要大於 2400 MB/s。\n是否要有 DRAM？ 選擇至少有 1 GB DRAM 的 M.2 SSD，不要選擇 DRAMless。\nDRAM 是 SSD PCB 上一個獨立的晶片，可以用來加快資料傳輸的目的。例如把快閃記憶體轉換層（FTL）快取在 DRAM，有較大的 DRAM 可以有更快的存儲速度。\n部分 NVMe M.2 SSD 考量成本使用 DRAMless，即沒有 DRAM。沒有 DRAM 的 SSD 會依賴於 NAND 快閃記憶體本身或主機記憶體（電腦的DRAM）來保存映射表和快取資料。而要讀取電腦的 DRAM，需要使用主機記憶體緩衝（host memory buffer，HMB）利用 PCIe 介面直接對電腦 DRAM 進行存取。若應用在外接應碟上，由於走的是 USB 協定，HMB 技術不支援 USB 協定。\n外接硬碟盒控制晶片的選擇？ 選擇外接硬碟盒控制晶片時，首要考慮的是 M.2 插槽所支援的協定，市面上有 SATA 與 PCIe（NVMe）。該控制晶片負責橋接 PCIe 或 SATA 將其轉換為 USB 介面。這也直接影響外接硬碟盒支援的 USB 3.2 速度。市面常見晶片為：\n主控晶片 USB 協定 瑞昱 RTL9210 USB 3.2 Gen 2 瑞昱 RTL9210b USB 3.2 Gen 2 + SATA 智微 JMS583 USB 3.2 Gen 2 祥碩 ASM2362 USB 3.2 Gen 2 祥碩 ASM2364 USB 3.2 Gen 2×2 祥碩 ASM2464PD USB 4/Thunderbolt Gen 3×2 以上晶片都是台灣製造，即便是淘寶買的 SSD 外接盒也不外乎這三個晶片。而網路上對於三款控制晶片的測試並不多，所以並非考量 SSD 性能差異的因素。此外，USB3.2 Gen 2x2，SSD 的讀寫速度需大於 2400 MB/s，才能發揮其速度。\n部分可能會看到使用 Intel JHL7440 晶片，這晶片相對於今日比較舊了。其對應晶片可以選擇 ASM2464PD 取代。\n買滑蓋式還是掀蓋式的外接盒？ 如果可以優先選擇掀蓋式而不是滑蓋式。\n市面上許多標榜免工具即可安裝，這種大多數為滑蓋式，像是抽屜一樣即可取出 M.2 SSD，滑蓋式的散熱通常裡面會蓋上獨立的散熱遮罩，並沒辦法直接把熱導到機殼。反之，掀蓋式沒有滑動的行為，所以散熱條貼在 SSD 上後，蓋上外殼可以直接把熱導到外殼。不過這些可以再網路上找到更多的評測進行選擇。\nSSD 正常使用溫度？ Wells 目前安裝於桌上型使用溫度平常為 42℃，一般工作溫度為 50 ~ 55℃ 之間，若超過 60℃ 會使 SSD 降速並降低使用壽命。\n硬碟的格式化選擇？ exFAT 為優先考量。可以實現跨裝置的需求。\n選擇 exFAT 可以實現跨裝置（Windows, macOS, iOS, Android）並正常讀取硬碟內資料。\n如果只在特定裝置工作，可根據作業系統選擇對應的格式。\nWindows：NTFS macOS / iPad / iOS：AFPS Android：exFAT 跑不到預期速度？ 請確定線長、USB 孔的支援、控制晶片支援的 PCIe、控制晶片韌體、SSD 本身的快取。\n速度這件事情是組裝或購買高速 SSD 蠻容易注重的點，畢竟錢都花了，沒跑到預期速度當然會蠻嘔的。\n如果沒有跑到預期速度，可以檢查以下幾點：\n線長是否短於 0.8 m？ 電腦的 USB 孔確定是否支援所需的 USB 版本？ 如果有使用 Type C 轉 Type A，轉接頭是否不良？ M.2 SSD 本身讀寫速度是否滿足 USB 的速度（本身 PCIe 讀寫只有 2000 Mbps，總跑不到 USB4 的速度吧？） 控制晶片本身的效能 控制晶片的韌體是否為最新版？ SSD 本身的快取空間滿了、溫度過高會降速 有沒有開啟寫入快取？ 結論 考慮到實際應用、容量、成本、散熱、廠商口碑等因素，往往會取決於決定哪款 SSD，在選擇之前可以多查詢網路上的讀寫實測。\n如果真的沒心力進行評估哪款 M.2 SSD 的話，選擇大廠、較多人買的成品 SSD 也比較不會踩雷。\n例如 2024 年市面上比較常看到的外接 SSD 產品如下：\nADATA SE900G SanDisk Extreme PRO Portable SSD V2 SK hynix Beetle X31 ADATA SD810 Kingston XS2000 Portable SSD Crucial X10 Pro 以上幾款外接 SSD，在外觀和防護方面都值得肯定。而由於尺寸要求小巧，散熱設計可能會有所犧牲。\n另外，儘管它們都支援 USB 3.2 Gen 2×2，但由於採用不同的 NVMe 控制晶片或快取設置的不同，某些產品可能能夠達到最高速度，而其他產品則不一定。\n在購買時，建議參考其他人的評測結果。不過這些終端產品的售價普遍都會比較高一點。\n參考文獻 兩種 M.2 SSD 固態硬碟的類型：SATA 和 NVMe NVMe vs M.2 vs SATA vs PCIe: What are these SSDs? 最新SSD固態硬碟顆粒SLC/MLC/TLC/QLC有什麼區別？ USB 3.1 Gen 1、Gen 2 及 USB 3.2 的差異為何？ The New USB standard: USB 3.2 Explained USB4® | USB-IF 使用 iPhone 15 的 USB-C 連接器充電及連接 原價屋查價 欣亞數位線上估價 SSD Database SSD_Buying_Guide_List.pdf Understanding File Systems ","date":"2024-02-02T13:30:00+08:00","image":"https://wellstsai.com/post/external-ssd-buying-guide/cover_hu6c96c5f7e313b7e158514f05d532b5b1_260610_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/external-ssd-buying-guide/","title":"2024 M.2 SSD 外接固態硬碟選購指南"},{"content":"引言 在選購無線路由器等網通裝置時，標榜 AC3000、AX6000、以及 BE7000 等規格的路由器規格已經成為現代家庭網路的主流選擇。\n以某牌為例，其無線速度特性標榜為：\nWi-Fi 5 (1024 QAM)：最高 1733 Mbps。 Wi-Fi 6 (2.4 GHz)：最高 574 Mbps。 Wi-Fi 4：最高 300 Mbps。 這些傳輸速度代表兩個終端設備如手機或電腦連線上此 Wi-Fi 熱點時。如果兩個設備同時支持 Wi-Fi 5 與 1024 QAM，則其最高傳輸速度可達 1733 Mbps。如此一來內網的兩個端點設備可以更高速的傳輸。\n這些速度指的是無線路由器在最佳情況下所能提供的理論最高傳輸速度。\n然而，實際的傳輸速度會受到許多因素影響，例如：\n設備之間的距離。 障礙物（牆、轉角）。 同頻干擾。 網絡擁擠。 Quality of Service（QoS）優先權。 裝置本身設計不良（熱、天線、EMI）。 線材（網路線）。 也因此，若想知道兩設備之間實際傳輸速度，可以透過 iPerf3 進行測速與評估，並且也可以應用在外網、VPN 或是 Tailscale 測速。\n這邊要提及的一點是如果跟電信業者申請例如：300 Mbps/300Mbps (下載/上傳) 的網路。\n設備 A 使用 Wi-Fi 6 網卡走 2.4 GHz 頻段 (547 Mbps) 連線到無線路由器。無線路由器接了一個電信設備對外網 (300 Mbps)，並到客戶端 B 的電信設備 (300 Mbps) 進行接收，其速度會被限制在最高 300 Mbps 的電信設備。若客戶端 B 的是 (100 Mbps)，則速度會被限制在最高 100 Mbps。\n設備 A 使用 CAT-5 有線網路 (100 Mbps) 進行上網，手機使用 2.4 GHz 連線到路由器（574 Mbps），兩個終端設備在測速時，其最高速度為 100 Mbps。要改善網路速度，可以讓設備 A 使用無線網卡或是更換網路線。\n網路速度受到終端設備的硬體參數、傳輸協定以及整個通信鏈路（telecommunications link）中最低速度的影響。\nLinux 安裝 iPerf3 若為 Arm 架構或其他版本的 Linux，可以到官網查詢安裝方式，或是透過 Github 直接下載 Arm 版本的 iPerf3，甚至是下載 source code 自行編譯。\n以下說明測試環境為 Ubuntu 20.04 的安裝：\n# 更新套件列表 sudo apt update # 安裝 iperf3 sudo apt install -y iperf3 # 顯示 iperf3 的版本 iperf3 --version 如果需要移除 iperf3，可以使用以下命令：\nsudo apt remove iperf3 安裝好後，檢查輸出版本為 iperf 3.9 (cJSON 1.7.13)\nwells@server:~$ iperf3 --version iperf 3.9 (cJSON 1.7.13) Linux server 5.15.0-91-generic #101-Ubuntu SMP Tue Nov 14 13:30:08 UTC 2023 x86_64 Optional features available: CPU affinity setting, IPv6 flow label, SCTP, TCP congestion algorithm setting, sendfile / zerocopy, socket pacing, authentication Windows 安裝 iPerf3 Windows 下是已經編譯好的執行檔，下載後即可執行。\n可以到官網進行下載，目前最新版本為 2016 年版的 iPerf 3.1.3。\n下載後解壓縮到任何地方，資料夾 iperf-3.1.3-win64 內有執行檔，於該目錄底下，於 cmd 中執行 iperf3.exe 即可。\n建立 iPerf3 伺服器 測試兩個裝置彼此之間的網路速度，nodeA 運行為伺服器，而另一台 nodeB 模擬上傳或下載的行為。\n開啟 iperf3 的目錄\n在路徑中輸入 cmd\n跳出 cmd，確定該路徑為 iperf3 目錄底下\n輸入 iperf3 -s 後會建立好 iperf3 伺服器，並打開 port 5201，等待客戶端進行連線。\n如果要自行指定 port，可以改為 iperf3 -s -p 5205，往後客戶端在連線需加上對應的端口號碼。\n內網 IP 直連 硬體配置：兩台電腦透過有線網路進行內網測速，經過數台路由器。其中 nodeA 作為伺服器（192.168.1.30）。\nnodeA 建立好伺服器後，在 nodeB 輸入 iperf3 -c IP/HOST，便可以測試 nodeB 的上傳速度。即傳輸方向是從 nodeB 到 nodeA：\nwells@nodeB:~$ iperf3 -c 192.168.1.30 Connecting to host 192.168.1.30, port 5201 [ 4] local 192.168.1.20 port 55482 connected to 192.168.1.30 port 5201 [ ID] Interval Transfer Bandwidth Retr Cwnd [ 4] 0.00-1.00 sec 85.3 MBytes 715 Mbits/sec 0 219 KBytes [ 4] 1.00-2.00 sec 78.0 MBytes 655 Mbits/sec 0 219 KBytes [ 4] 2.00-3.00 sec 86.2 MBytes 723 Mbits/sec 0 219 KBytes [ 4] 3.00-4.00 sec 88.5 MBytes 742 Mbits/sec 0 219 KBytes [ 4] 4.00-5.00 sec 86.4 MBytes 725 Mbits/sec 0 219 KBytes [ 4] 5.00-6.00 sec 90.7 MBytes 761 Mbits/sec 0 219 KBytes [ 4] 6.00-7.00 sec 85.6 MBytes 718 Mbits/sec 0 219 KBytes [ 4] 7.00-8.00 sec 85.3 MBytes 715 Mbits/sec 0 219 KBytes [ 4] 8.00-9.00 sec 78.7 MBytes 660 Mbits/sec 0 219 KBytes [ 4] 9.00-10.00 sec 82.3 MBytes 691 Mbits/sec 0 219 KBytes - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth Retr [ 4] 0.00-10.00 sec 847 MBytes 711 Mbits/sec 0 sender [ 4] 0.00-10.00 sec 846 MBytes 710 Mbits/sec receiver 表格參數的意義如下，其中著重在 Bandwidth 這個參數：\nID: 通常代表連接的編號。 Interval: 測試的時間間隔。 Transfer: 這段時間內傳輸的數據量。 Bandwidth: 這段時間的平均頻寬，表示為傳輸速度。 Retr: 重試的次數。 Cwnd: 現在的窗口大小。 由上表可以得知 nodeB 傳資料到 nodeA 的平均速度為 711 Mbps。\n若要測試 nodeB 的下載速度，即傳輸方向是從 nodeA 到 nodeB，可使用iperf3 -c IP/HOST -R：\nwells@nodeB:~$ iperf3 -c 192.168.1.30 -R Connecting to host 192.168.1.30, port 5201 Reverse mode, remote host 192.168.1.30 is sending [ 4] local 192.168.1.20 port 42550 connected to 192.168.1.30 port 5201 [ ID] Interval Transfer Bandwidth [ 4] 0.00-1.00 sec 111 MBytes 930 Mbits/sec [ 4] 1.00-2.00 sec 106 MBytes 888 Mbits/sec [ 4] 2.00-3.00 sec 94.4 MBytes 791 Mbits/sec [ 4] 3.00-4.00 sec 108 MBytes 911 Mbits/sec [ 4] 4.00-5.00 sec 91.8 MBytes 770 Mbits/sec [ 4] 5.00-6.00 sec 101 MBytes 844 Mbits/sec [ 4] 6.00-7.00 sec 101 MBytes 845 Mbits/sec [ 4] 7.00-8.00 sec 102 MBytes 858 Mbits/sec [ 4] 8.00-9.00 sec 93.2 MBytes 783 Mbits/sec [ 4] 9.00-10.00 sec 102 MBytes 859 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth [ 4] 0.00-10.00 sec 1011 MBytes 848 Mbits/sec sender [ 4] 0.00-10.00 sec 1011 MBytes 848 Mbits/sec receiver nodeA 傳資料到 nodeB 的平均速度為 848 Mbps。\n內網 IP 經由 Tailscale 經由 Tailscale 組網後，若想要評估兩個節點傳送的速度，可以直接輸入對方的 hostname 進行測試。\n以下測試為相同的電腦，但改為 Tailscale 的 hostname 進行測試。\n上傳測試結果：\nwells@nodeB:~$ iperf3 -c nodeA Connecting to host nodeA, port 5201 [ 4] local 100.116.123.164 port 43086 connected to 100.110.114.119 port 5201 [ ID] Interval Transfer Bandwidth Retr Cwnd [ 4] 0.00-1.00 sec 46.3 MBytes 388 Mbits/sec 0 216 KBytes [ 4] 1.00-2.00 sec 34.4 MBytes 289 Mbits/sec 0 216 KBytes [ 4] 2.00-3.00 sec 41.0 MBytes 344 Mbits/sec 0 216 KBytes [ 4] 3.00-4.00 sec 45.1 MBytes 379 Mbits/sec 0 216 KBytes [ 4] 4.00-5.00 sec 44.4 MBytes 373 Mbits/sec 0 216 KBytes [ 4] 5.00-6.00 sec 47.0 MBytes 395 Mbits/sec 0 216 KBytes [ 4] 6.00-7.00 sec 45.1 MBytes 378 Mbits/sec 0 216 KBytes [ 4] 7.00-8.00 sec 46.8 MBytes 393 Mbits/sec 0 216 KBytes [ 4] 8.00-9.00 sec 45.2 MBytes 379 Mbits/sec 0 216 KBytes [ 4] 9.00-10.00 sec 44.6 MBytes 374 Mbits/sec 0 216 KBytes - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth Retr [ 4] 0.00-10.00 sec 440 MBytes 369 Mbits/sec 0 sender [ 4] 0.00-10.00 sec 439 MBytes 369 Mbits/sec receiver 下載測試結果：\nwells@nodeB:~$ iperf3 -c nodeA -R Connecting to host nodeA, port 5201 Reverse mode, remote host nodeA is sending [ 4] local 100.116.123.164 port 32852 connected to 100.110.114.119 port 5201 [ ID] Interval Transfer Bandwidth [ 4] 0.00-1.00 sec 95.6 MBytes 802 Mbits/sec [ 4] 1.00-2.00 sec 86.9 MBytes 729 Mbits/sec [ 4] 2.00-3.00 sec 90.6 MBytes 760 Mbits/sec [ 4] 3.00-4.00 sec 72.0 MBytes 604 Mbits/sec [ 4] 4.00-5.00 sec 81.5 MBytes 684 Mbits/sec [ 4] 5.00-6.00 sec 73.5 MBytes 616 Mbits/sec [ 4] 6.00-7.00 sec 78.9 MBytes 662 Mbits/sec [ 4] 7.00-8.00 sec 87.9 MBytes 738 Mbits/sec [ 4] 8.00-9.00 sec 90.8 MBytes 761 Mbits/sec [ 4] 9.00-10.00 sec 70.4 MBytes 590 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth [ 4] 0.00-10.00 sec 828 MBytes 695 Mbits/sec sender [ 4] 0.00-10.00 sec 828 MBytes 695 Mbits/sec receiver Tailscale 與 IP 直連對比，上載速度降為原來的 52%，下載速度降為原來的 82%。\n多客戶端並行測試（multiple parallel client connection） 如果想要測試伺服器的性能，可以使用 iperf3 -c IP/HOST -P client_counts 進行\n3 個用戶同時下傳：\nwells@nodeB:~$ iperf3 -c 192.168.1.30 -R -P3 Connecting to host 192.168.1.30, port 5201 Reverse mode, remote host 192.168.1.30 is sending [ 4] local 192.168.1.20 port 60680 connected to 192.168.1.30 port 5201 [ 6] local 192.168.1.20 port 60694 connected to 192.168.1.30 port 5201 [ 8] local 192.168.1.20 port 60704 connected to 192.168.1.30 port 5201 [ ID] Interval Transfer Bandwidth [ 4] 0.00-1.00 sec 37.2 MBytes 312 Mbits/sec [ 6] 0.00-1.00 sec 37.2 MBytes 312 Mbits/sec [ 8] 0.00-1.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 0.00-1.00 sec 112 MBytes 935 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 1.00-2.00 sec 37.1 MBytes 312 Mbits/sec [ 6] 1.00-2.00 sec 37.1 MBytes 312 Mbits/sec [ 8] 1.00-2.00 sec 37.0 MBytes 311 Mbits/sec [SUM] 1.00-2.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 2.00-3.00 sec 37.2 MBytes 312 Mbits/sec [ 6] 2.00-3.00 sec 37.0 MBytes 310 Mbits/sec [ 8] 2.00-3.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 2.00-3.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 3.00-4.00 sec 37.1 MBytes 311 Mbits/sec [ 6] 3.00-4.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 3.00-4.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 3.00-4.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 4.00-5.00 sec 37.1 MBytes 311 Mbits/sec [ 6] 4.00-5.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 4.00-5.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 4.00-5.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 5.00-6.00 sec 37.1 MBytes 311 Mbits/sec [ 6] 5.00-6.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 5.00-6.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 5.00-6.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 6.00-7.00 sec 37.1 MBytes 311 Mbits/sec [ 6] 6.00-7.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 6.00-7.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 6.00-7.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 7.00-8.00 sec 37.0 MBytes 311 Mbits/sec [ 6] 7.00-8.00 sec 37.1 MBytes 312 Mbits/sec [ 8] 7.00-8.00 sec 37.1 MBytes 312 Mbits/sec [SUM] 7.00-8.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 8.00-9.00 sec 37.1 MBytes 311 Mbits/sec [ 6] 8.00-9.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 8.00-9.00 sec 37.1 MBytes 311 Mbits/sec [SUM] 8.00-9.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 9.00-10.00 sec 37.2 MBytes 312 Mbits/sec [ 6] 9.00-10.00 sec 37.1 MBytes 311 Mbits/sec [ 8] 9.00-10.00 sec 37.0 MBytes 310 Mbits/sec [SUM] 9.00-10.00 sec 111 MBytes 934 Mbits/sec - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth [ 4] 0.00-10.00 sec 372 MBytes 312 Mbits/sec sender [ 4] 0.00-10.00 sec 372 MBytes 312 Mbits/sec receiver [ 6] 0.00-10.00 sec 372 MBytes 312 Mbits/sec sender [ 6] 0.00-10.00 sec 372 MBytes 312 Mbits/sec receiver [ 8] 0.00-10.00 sec 371 MBytes 311 Mbits/sec sender [ 8] 0.00-10.00 sec 371 MBytes 311 Mbits/sec receiver [SUM] 0.00-10.00 sec 1.09 GBytes 935 Mbits/sec sender [SUM] 0.00-10.00 sec 1.09 GBytes 935 Mbits/sec receiver 結論 使用 iPerf3 測速後，若網速未達到需求，可進行進一步的除錯。\n對於家用內部網路來說，線材品質、裝置設定以及協定支援等因素可能是導致網速不佳的主因。\n甚至有時候重開路由器網速就正常了，遇到這種或許可以重新開始評估一台新的路由器了\u0026hellip;。\n當遇到 Tailscale 速度過慢的問題時，可以使用 tailscale ping host 命令評估裝置是否為直接連接或透過 DERP 中繼轉發。\n我自己在使用 Tailscale 時通常是直接連接的，但有時連接某些 Wi-Fi 後開始使用 DERP 中繼。即使斷開 Wi-Fi 並切回原本的網路，仍無法直接連接。在這種情況下，強制重啟 Tailscale 服務有時會解決問題。\n參考文獻 Install iPerf 3 on Ubuntu 20.04 iPerf3 user manual page ","date":"2024-01-30T16:40:00+08:00","image":"https://wellstsai.com/post/iperf3/cover_hue1d73ec6af284376bcb13e4bfb180fe3_117568_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/iperf3/","title":"安裝並使用 iPerf3 進行網路速度測試"},{"content":"引言 在先前文章使用 Tailscale 輕鬆建立安全且私密的通道中，說明如何透過 Tailscale 建立只有自己能夠存取的 VPN（tailnet）。\n本篇文章將著重如何在 Synology 上如何安裝最新版本的 Tailscale。\n並實現自動更新等機制。確保 Tailscale 保持在最新版本。\n以下操作的系統配置：\nNAS 裝置：DS220+ 作業系統：DiskStation Manager 7 (DSM 7) CPU：Intel Celeron J4025 Synology Package Arch：Geminilake Generic Arch：x86_64 其中，如果要更新到最新版本的 Tailscale，需要知道 NAS 的通用架構（Generic Arch）。\n這部分會根據不同的通用架構決定要下載哪個 Synology package（spk）檔案進行安裝與更新。\n如果不知道自己的 NAS 架構，可以到 Synology 和 SynoCommunity 套件架構以查詢 NAS 的通用架構。\n傳統安裝方式 傳統安裝方式為透過 Synology 內的套件中心進行安裝，此版本為 Synology 釋出的版本。\n點選左上方的主選單按鈕。\n點選套件中心（Synology package center）。\n在所有套件中，最下方找到 Tailscale，並點選安裝套件。\n至此，安裝好後，點選主選單的 Tailscale 登入後就可以正常使用了。\n在套件中心，已安裝的頁面中檢查安裝版本，可以看到為官方所提供的 1.38.4-700038004。\n該版本為 Synology 發布 (2023/5/8)。\n根據 Tailscale 官方最新釋出版本為 1.58.2 (2024/1/25)。\n從官網安裝最新版本的 Tailscale Tailscale 每次更新，官方會為 Synology 編譯並發布最新版本的 spk。\n使用者可以自行下載，並在套件中心手動進行安裝。未來有更新，則重複此動作。\n在此，Wells 已經整合成一個腳本，實現全自動安裝與定時更新。照著以下步驟執行即可。\n#!/bin/bash # 更新 Tailscale tailscale update --yes # 檢查更新是否成功 if [ $? -eq 0 ]; then echo \u0026#34;執行 Tailscale 更新成功\u0026#34; exit 0 fi # 若找不到指令，手動下載指定版本的 Tailscale 安裝包 url=\u0026#34;https://pkgs.tailscale.com/stable/tailscale-x86_64-1.58.2-7000058002-dsm7.spk\u0026#34; filename=$(basename \u0026#34;$url\u0026#34;) # 在使用者的家目錄下建立暫存資料夾 cd ~ mkdir tmp_synology cd tmp_synology # 下載 Tailscale 安裝包 wget \u0026#34;$url\u0026#34; # 安裝 Tailscale Synology 套件 sudo synopkg install \u0026#34;$filename\u0026#34; # 啟動 Tailscale Synology 套件 sudo synopkg start Tailscale # 移除暫存資料夾 rm -rf ~/tmp_synology # 再次執行 Tailscale 更新 tailscale update --yes 複製上述的腳本內容到記事本。\n修改腳本中 url，需要針對 NAS 通用架構，進行更改。\n可以到 Synology 和 SynoCommunity 套件架構查詢 NAS 的通用架構。\n找到自己的 NAS 型號所對應的 Generic Arch。以 DS220+ 為例，為x86_64。\n到 Tailscale 釋出穩定版本 找到對應的 DSM 版本與 Generic Arch。\n複製其 spk 網址，並取代腳本中 url 那行的網址即可。\n其中腳本的 spk 網址為適用於 x86_64，如果為相同的 Generic Arch，則腳本不需要更改。\n例如：DS224+, DS923+, DS723+, DS423+, DS1621+, DS220+, DS420+, RS820+, RS1219+, FS1018, FS3017 等機種都是 x86_64，所以上述腳本不需修改可以直接使用。\n點選左上方的主選單按鈕。\n點選控制台（Control Panel）。\n點選任務排程表（Task Scheduler）。\n新增一個排程任務（定時執行）。\n填寫任務名稱。\n設定腳本定時執行時間，在此設定每天凌晨 0 點執行此腳本。\n任務設定中，在執行指令貼上對應 NAS 的架構，在此可設定是否透過信箱回傳執行結果。\n點選確認。\n第一次可以手動執行更新將 NAS 上的版本更新為最新版本。\n這邊 Wells 安裝套件中心的版本（1.38），不移除該版本的情況下。\n是可以直接正常升級到最新版本。所以有沒有先移除在執行腳本應該都沒差。\n套件中心檢查版本，可以看到為 1.58.2，而 Synology的最新版本為 1.38.4\n如此一來，每天 0 點，會自動執行 tailscale update 進行自動更新。\n結論 安裝好後，就可以進入到控制台，並點選 Tailscale 的 APP，此時會打開新的分頁，登入後就可以開始組網了。\n詳細的組網可參考使用 Tailscale 輕鬆建立安全且私密的通道。\n參考文獻 我的 Synology NAS 使用哪種 CPU？ Synology 和 SynoCommunity 套件架構 使用 Tailscale 輕鬆建立安全且私密的通道 Tailscale套件 - 穩定版 ","date":"2024-01-25T17:10:00+08:00","image":"https://wellstsai.com/post/tailscale-synology/cover_hub0c52d4e5b287e589c8d4ab51a4e4223_212794_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/tailscale-synology/","title":"在 Synology NAS (DSM) 上安裝最新版本的 Tailscale"},{"content":"引言 以下內容是基於公司目前使用 Scrum 管理所產生的心得。\n皆為個人主觀感受、抱怨與現實。\n並且沒有問題解決方案，就單純粹發牢騷。\n如果有錯誤、不認同也歡迎在下方討論。\n在網路上以敏捷為關鍵字搜尋，會發現充斥著必看、必學、強大、簡單、靈活、真敏捷等話術。或是XXX 公司都在使用的管理方法等術語吸引學習。\n身為主管的你，怎麼能不學？\n但事實成效不一定比較好，你目前團隊執行的是真正敏捷還是表面上的敏捷？\n什麼是 Scrum? Scrum 是一個敏捷項目管理系統，它「協助人們和團隊以合作的方式逐步提供價值。」\n在 Scrum 管理所構成的團隊合作做模式下，最重要的團隊彼此間的信任（Trust）。\n一旦沒有信任，Scrum 大師所闡述一大堆什麼自主性、高績效都是屁。因為團隊成員的執行都是被動且低效的。\nScrum 往往牽扯到公司的認知、團隊間的行為、態度與價值觀的問題。而不是找個顧問來，在管理軟體上弄弄看板、清單、執行每日的站立會議就當成是在 Scrum。\n沒有能力點破當前團隊問題的人，往往執行的都是偽敏捷（fake agile）。\n角色定義 敏捷中的角色定義 Scrum Master（SM）: 為 Scrum 的主持人，確保 Scrum 流程的順利進行，並促進團隊的自我組織和不斷改進。\nProduct Owner（PO）: 又為產品負責人，PO 的主要目標是確保開發團隊優先處理最有價值的工作，以滿足產品的需求和願景。為利害關係人與開發人員之間的橋樑。\nDevelopers: 開發人員的主要目標是通過合作和創新，交付高品質的軟體。在 Scrum 框架中，開發人員被鼓勵自我組織，共同決策並確保團隊進展。\n公司的角色定義 根據目前身處的團隊內所看到的角色定義。\nStakeholders: 利害關係人，通常會希望獲得產品資訊，或是參與其中。可能是最終用戶、其他團隊、上級領導，或是是另一家企業。\n領導-A：整個技術部的領導者，管理多個團隊。需要面對整個公司部門的其他領導，並回報給董事長。對於產品技術不懂。\n主管-B：團隊內的領導者，與團隊內的成員有密切接觸。目前擔任 PO 並與團隊成員有密切接觸，每兩週回報給領導-A。技術不熟悉但積極學習。\n冗員-C：就是個冗員。\n冗員的定義是對團隊沒什麼貢獻或是負生產，但又身為團隊一員的人。其中可能有以下特質：\n講得出很多技術，但都不會做。 著重在耍嘴皮子，常常與事實認知有錯誤。 什麼事情都要管，最終自己份內的事情沒有完成。 團隊內的負情緒製造者。 執行不符合自己職位的事情。 成員-D：團隊內的成員，有實戰經驗好的與差的。\n實戰經驗好的，往往能在時間內完成或超出預期的工作內容。其結果往往會被稱讚。 實戰經驗差的，做出來的東西被評估不足，需要額外訓練或有人合作進行。 現實職場 在現實職場中，尤其是在傳統產業或大型團隊中，常常面臨著各種人的問題因素，這些因素可能導致開發進度延遲、資源浪費所造成低效率。\n技術負債：為了趕上進度或滿足某些要求，而採取先求有再求好的策略，最終導致技術負債累積。 重複工作：由於技術負債導致重新開發架構或軟體。 不平等待遇：你認真做事情，卻可能比資深不做事的錢少。 能力不足：由於缺乏關鍵的技能或知識，無法有效地完成分配的任務。 領導力不足：明明某成員執行方向偏離了，領導者未能判斷與指正，導致該成員自由發展，浪費時間。 缺乏溝通：團隊內部溝通不良，導致訊息傳遞不清晰，任務執行出現偏差。 倚老賣老：過於依賴過去的經驗，而不願意接受新的觀點或方法。 多一事不如少一事：害怕承擔風險或額外的負擔，而只選擇較簡單的工作執行。 混吃等死：僅僅為了生存而工作，在工作缺乏熱情和動力。 可能還有更多，也歡迎補充遺漏的。\n這些問題只是凸顯現實職場中的情境，並不是要評斷或批評像是倚老賣老或是混吃等死這樣的行為。\n在某些公職體系中，工作可能需要循序漸進，遵循前人的方法執行。這種方式可以確保穩定性和可靠性。\n然而，在私人企業體系中，這些行為會導致 Scrum 的失敗。敏捷開發強調快速反饋、靈活適應和團隊合作，因此需要成員具備主動精神。\n最終的執行結果受到團隊中人文、認知等種種因素的影響，這些因素會導致最終執行結果成效不彰。\n✨ 案例 1:\n公司準備設計某產品，外包給 A 廠商製作，他們有能力分析與完成工作內容，並給予回饋。\n然而公司指派給一個沒有能力的冗員負責監督（亦或是冗員搶著說要負責）。\nPO 無法判斷此工作是否適合該冗員。而冗員搶了 A 廠商該做的事情，並表現出這個工作需要他才可以進行。\n最終變任由該冗員自由發展、自由設計。最終，長久下來的合作沒有任何產品產出。\n實際上，該工作若由 A 廠商執行，他們能夠做完全執行、分析，並且，並進行全自動分析會更快（例如參數化設計變數，並執行最佳化分析）。\nPS. 產品為一代名詞。\n✨ 案例 2:\n公司員工 A 曾獨立開發一款軟體，並獲得好評。\n然而該同事已離職。雖然有留下原始碼，但因為技術負債而導致沒有人能夠接他的程式碼。\n進而指派員工 B 使用全新的軟體架構來實現一樣的軟體。\n以上兩個案例（或更多），只是凸顯出傳統團隊內的能力不足、技術負債與重複工作問題。\n實際上的問題，如果更深層來看可能是缺乏溝通、多一事不如少一事或是領導力不足甚至是不平等待遇所導致。\n有產出的團隊需要什麼？ 專業的人\n在一個團隊中，確保對的團隊成員在擅長領域發揮所長，避免浪費資源。\n還包含像是團隊內要有優秀的領導人，與對應知識的團隊成員。\n沒有專業的人在團隊內只會凸顯團隊的無能與無貢獻。\n信任\n主管講得天花亂墜，最終又因為許多事情而改變方向。造成成員內部互相矛盾而信任破裂。執行力也會大幅下降。\n亦或是本身團隊內部成員已經有疙瘩了，不信任的情況下只會越來越多衝突。\n足夠的薪水報酬\n基於信任，相信薪水應該在某個水平。\n一旦被得知薪酬給得不夠，信任也不用談了。\n愛（❤️）\n有了信任、錢給夠了，愛自然就產生了。\n愛你自己的工作、在工作上獲得成就感，自然而然貢獻整個團隊，整個團隊有了更多資源，向心力也進而提升。\n✨ 案例:\n曾接觸到的公司制度自由，但缺少了 1, 2, 3。隨著時間的推移，對於工作的愛也就消逝了。\n對於公司主管他們是站在資方面的，秉持著多一事不如少一事的態度，問題沒辦法從根本解決。\n在不願意改善專業人才、信任與薪酬的情況下，Scrum 很難如預期正常運行。\n目前執行的 Scrum 考慮到信任的不足，重新審視團隊在執行 Scrum 過程中，發現其中許多情境實在令人感到幽默。\nStory Point 是用來衡量每一項任務的複雜程度，但最終常被成員來評估時間。\n變相的是大家都盡可能的塞滿許多子任務藉此填高分數，塑造自己很忙、貢獻很多。\n最終專注在個人任務而非交付功能。\n此外，Story Point 會給人一種分數就是 KPI 的指標。或是讓人感覺做了很多重要的事情。\n有人將工作拆成很多細小工作，然後給予最低的一分，但有人不是。例如：\n重複工作拆細，並給 1 分，最後分數 20 分。 工作沒有拆細，但工作很難，給予的分數又不夠高，最後 9 分。 且一開始在規劃時，曾執行過 Scrum 的大濕又說不能高於 13 分等限制。\n由於工作拆細而分數變高，但有人又限制自己的認知分數，最終結果給人一大堆認知上的錯覺與障礙。\nStory Point 其實還有許多可以值得討論的，但局限於系統有些參數沒有被評估到。例如：\n速度：Story Point / Number of days 任務執行速度：Tasks / Number of days 任務負載：Tasks / Story Point Daily stand-up 會議與 Sprints 透過快速、短暫的時間內彼此交代昨天做了什麼、今天要做什麼，以及是否遇到任何問題，可以讓大家互相了解情況。\nScrum 大濕說：自己任務完成可以去看板上找任務來做的。\n我想通常在一個團隊中，有愛才能夠持續下去吧？\n畢竟，即使能夠快速完成任務，如果對團隊沒有信任了，執行的內容也會更偏向個人事務而非公司事務。\nSprint Review 在第一次的會議中，對於Sprint Review的部分並沒有太多共鳴。\n團隊中會有冗員會讓自己看起來很忙。花了半小時講一堆不是他做的東西，但是卻又凸顯自己的貢獻程度。\n討論到最後，我們花了大量時間在會議上討論細節。\n例如：如何壓接頭、如何確認和探討等技術細節。\n結果，第一次的成果展示變得冗長且無趣。\n質問對方 某個冗員 C 跟成員 D 可能感情還不錯。\n成員 D 說明內容時，C 提出了以下觀點：\n有做這個工作嗎？ 問一個很專業的問題____ 也不知道你這樣對不對 應該有什麼其他方式來____ 冗員 C 平常常常說些無意義的話，但實際上他也不知道該怎麼做。\n最後，他只是為了表現自己而發表一些言辭，這讓人感到心累。\n不斷更換軟體 從一開始的 Jira、Trello 如今到 Asana。\n在上傳資料時，總是擔心資料外洩的問題。\n然而，並且沒有邀請專業人員（例如 MIS）參與會議，以評估是否適合自行架設服務（self-hosting）。\n實際上，這一切都歸結於公司是否願意投資於這種專案管理工具軟體。\n我想，等 Asana 的試用版過期後，過一段時間可能又會考慮更換其他軟體。\n結論 其實不管在哪個公司或團隊中，這些人、問題永遠都會存在著。\n唯一能做的就是調整自己的心態，學會看開，並適應這種情況，甚至考慮轉換方向。\n對於主管來說，有些事情是無法處理的。他們可能選擇消極的態度，或者過度友善地默許冗員的存在。\n而在更高層的領導者眼中，則是被底下的 PO 矇著。還產不出實際產品與可能，陪著瞎忙繼續吃老本做代工。\n而對於敏捷執行後的結論往往都是：\n敏捷不會改變現況，只有團隊真正想要改變才能實現進步。 敏捷運作到最後都不敏捷。 敏捷只記得每天的站立會議。 試著想想\n用看板等於敏捷？ 每天站立會議等於敏捷？ 有請顧問來講課就是敏捷？ 許多潛在因素像是：\n團隊之間是否彼此信任？ SM 有沒有辦法得知開發團隊達成目標的潛在障礙？ PO 有沒有辦法得知 Stakeholders 的需求？ 團隊成員的專業技能是否能夠獨立完成份內工作？ 團隊成員是否具有高度的自主性？ Sprint Review 是否為有效會議？ Daily stand-up 是否每天執行與是否為流水帳？ Sprint 事項是否為了完成而隨便執行？ 公司的組織文化是否支持敏捷開發方法？ SM 有沒有因公司組織文化提供客製化敏捷？ 也因為團隊內部太多人擅於找一堆理由來掩飾組織、團隊、個人的問題。\n自主性不高的團隊成員，套用了敏捷也始終不會敏捷。\n反倒是公司主管或領導可以問問自己：\n公司養了多少冗員？ 哪些員工是真正有付出價值與產出的？ 冗員你要如何讓他做事？不干擾其他人？ 沒有能力或能力較差的成員該如何安排？ 公司沒人力，是否主動且積極尋找新員工？ 真正遇到不合適的員工是資遣他還是安排更適合的位置？ 有付出的員工，薪資是否對得起那些不做事的？ 員工內部自我訓練與 SOP 有被建立起來嗎？ 不過對於這些高層領導，公司又不是他們的。\n誰又願意沒事找事做進行人事改革呢？\n頂多把那些冗員的考績打差罷了。問題有因此而解決嗎？\n參考資料 Scrum 指南 王泰瑞 - scrum master 的獨白 搞笑談軟工 - 說實話，做實事 搞笑談軟工 - 對症下藥 敏捷健檢：偽敏捷的三十大症狀，你的團隊或組織中了幾個？ Scrum does not work here in Asia ","date":"2024-01-23T16:20:00+08:00","image":"https://wellstsai.com/post/bad-scrum/cover_hufee8f29b6edf1bf13cecb5bf4b74c988_237346_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/bad-scrum/","title":"糟糕的 Scrum 管理"},{"content":"前言 由於家人有購買便宜的虎航機票，在 2024/1/1 規劃了五天北九州自助之旅。\n整篇文章會說明出遊心得與整體花費。\n航班 航班 日期 起飛時間 抵達時間 託運總重 手提公斤數 桃園往福岡 2024/1/1 06:45 10:00 30 kg 兩袋共 10 kg 福岡往高雄 2024/1/5 19:55 21:55 70 kg 兩袋共 10 kg 地圖與行程 五日的行程可以參考：我的地圖。\n詳細的北九州照片可以參考：北九州行程五日遊相簿\n主要考量本次都是自駕，第一天會拿到北九州券，所以先往北跑然後順時針玩一圈。\n北九州花費 項目 單人消費金額（臺幣） 備註 來回機票 7324 桃園福岡，福岡小港 第一天住宿 839 單人房當雙人房賣 第二天住宿 1421 第三天住宿 1475 第四天住宿 1478 機場接送（去） 1093 自費 機場接送（回） 50 信用卡免費，加大車種 200 元 日產租車 5 天 2475 小倉城 80 九州券免費 AEON 超市 845 九州券免費，總消費金額為 NTD 3380 九州自然動物園 886 含動物園與 safari 熊本城門票 182 柳川游船 409 高速公路過路費 451 五天過路費，總共為 NTD 1804 以上的評估是平均一人共同的花費。\n在住宿上的選擇，考慮到長輩所以比較保守。\n若九州行程考慮機票、接駁、伴手禮、午晚餐、消夜等雜項支出\u0026hellip;\n實際整體記帳的支出為 25000 NTD 附近（不考慮九州折抵券）。\n若考慮北九州送的折抵券（5000 JPY / 人），花費應該為 26000 NTD 附近。\n旅程心得 出發（桃園機場） 搭乘的是紅眼班機（Red-eye flight）。晚上 22:30 從住處呼叫接駁前往桃園機場，抵達桃園機場時間為凌晨 1:50 附近，並且在車上進行 2024 的跨年。\n由於等待託運還有一段時間，所以就附近走走，找超商買吃的。\n差不多可以託運的時間為 4:00 附近，託運完後拿到機票就出境囉。\n出境後，可以找到桃園機場免費貴賓室繼續休息。\n不過我這裡有家人高等級信用卡所提供的貴賓券，可以進到特定的貴賓室享用餐點。就順便幫家人準備好早餐了。\n等到時間差不多就準備上飛機出發到福岡，由於整晚沒睡，飛行時間 3 小時睡好睡滿。\n抵達福岡機場後，出境先到機場櫃檯領取北九州的現金券（5000 JPY / 人）。\n活動時間為：2023年11月20日（一）至2024年2月21日（三），領取後 5 日內需使用完畢。\n主要就是在結帳時，出示手機 QR 碼即可折抵，算是非常佛心的活動。也因此規劃行程第一站就是先往北跑。\n第一天（2024/1/1） 早上抵達後，主要第一天在機場拿完北九州現金券，搭巴士到租車地領車。\n用餐後，開車前往小倉城。本體建築逛了約 1.5~2 個小時。\n逛完後出來吃個冰、逛個神社與市集就差不多 16:30 附近。\n當初有規劃皿倉山行程看夜景，但是由於特殊節日所以提早關門也就沒去了。\n藉此開車吃完晚餐後，就到了 AEON 大買特買，北九州現金券可以全額折抵。\n買完後就到了旅店，這邊當初在 Booking 上沒有看清楚，而不小心訂了單人房、雙人賣。\n只提供一個枕頭，但衛浴毛巾都是兩套。整體房間偏小，非常失敗的住宿品質就不多說了。唯獨早餐可能還有一點可以回味的。\n第二天（2024/1/2） 九州自然動物園（10:00~14:30） 第二天從北邊往東南移動，到了九州自然動物園。\n在這裡可以有別於台灣的動物園，接觸且能觸碰到小動物，例如倉鼠、兔子、袋鼠。\n主打野生動物巴士（safari），推薦參加，整體價格差不多為 3900 日圓 （830 台幣，含動物園 + safari）\n可以進去鱺餵食老虎、獅子、大象等大型動物，我覺得是非常難得的體驗。\n在這邊主要可以看到非常可愛的小老虎、水豚、馬、袋鼠、倉鼠、松鼠猴、白老虎、獅子、大象、長頸鹿等。\n金鱗湖 + 湯之坪街道（15:00~17:00） 離開動物園後到了金鱗湖。\n此地會需要停車費，大概一次 500 日圓。\n該景點主打漂亮的拍照行程，金鱗湖當下是藍天、白雲，配上陽光、湖面，拍起來真的非常的美。\n另外，附近還有一個湯之坪街道可以慢慢逛的。\n主要販售許多不同的產品、炸物等，整條街非常長，適合愛走路的慢慢看。\n走到差不多約傍晚 5 點，商店便開始陸續打烊。\n晚餐 + 住宿 目的地為明天的阿蘇火山口，這邊選擇開車一小時到深山住一晚。\n主要是開夜車蠻刺激且危險，可能需要評估自身能力。\n比較有感觸的是日本的拉麵一碗才 150 台幣又有兩片叉燒，好吃、不用排隊、CP 值又高。\n第三天（2024/1/3） 阿蘇火山口（11:40 ~ 12:40） 隔天早上開了約 2 小時才到阿蘇火山口，阿蘇火山口能先上去就先上去了。\n可以在官網先查詢火山口是否有開放再決定是否此行。\n阿蘇火山口非常受天氣影響，冬天和夏天的情況可能不同。\n當天抵達又冷、風大、下雨，而且有硫磺刺鼻的味道。\n我們一路開車直達火山口附近，只需要走約 2 分鐘就可以看到最大的火山口。在火山口拍照後，由於起霧所以馬上就下山離開此地了。\n而到閘門口，也發現當前管制只出不進。\n有規劃此地，開車直通目的地就對了，算是一個很看天氣的行程。\n火山口好看嗎？\n我覺得都蠻特別的，但無法看清全貌。且天氣不怎麼作美、又冷，所以整個看火山口也差不多 10 分鐘的事情就馬上到休息區休息了。\n阿蘇神社（14:30~15:30） 中午用餐在超商解決後，前往阿蘇神社。\n即便是平日週三，排隊車輛也非常多，看看神社，整體行程約 1 小時就結束了。\n如果不是那麼熱愛神社的，我個人認為此景點可以 pass。\nyoume Town 光之森 + 唐吉訶德（16:45~20:30） 準備前往熊本市區。途中會經過 youme Town 光之森商場。\n家人幫同事購買一些 UNIQLO 的商品，也就順便在此用餐。\n只能說日本即便是平日晚上，還是有非常非常多的人來擺公司用餐、購物。\n尤其像是 UNIQLO，媽媽爸爸帶著小孩來買衣服更是數不勝數。\n離開後路上經過唐吉訶德也順便買了一些簡單的東西。\n雖然沒有到便宜，但我個人認為比台灣的好逛且商品豐富。\n住宿 到了熊本市區。\n第三第四天住在 REF Kumamoto by VESSEL HOTELS。\n附近有非常熱鬧的太陽路新市街，不愁吃，非常多居酒店、麥當勞、星巴克與商場。\n整體住宿品質我個人覺得是五天下來最好的。\n第四天（2024/1/4） 熊本城 熊本城可以了解到日本的城堡建築、由於地震後需要重建保存古蹟。\n非常值得慢慢細細品味的城堡。也順便複習了明治維新等相關歷史。\n在這邊有任何問題也都馬上拿出 ChatGPT 進行查詢，我覺得蠻方便的。\n第五天（2024/1/5） 柳川遊船 + 夜明茶屋(11:30~14:00) 柳川遊船整個體驗非常特別，猶如安平運河遊船。但是步調更慢、更能體會這條川的特別之處。\n這趟行程與香港人同行，船上沒人懂日文，又船夫只說日文，所以比較可惜一點。\n到某些特定雕像，船夫會照常說明，並唱相關的民謠（雨降）。\n建議來此地，事前做個功課會更有感覺。\n到達終點後有接駁車送回乘船處，在此也中午了，所以先到夜明茶屋用餐。\n整體氛圍感非常棒，且享用了便宜的鰻魚飯、生魚片井飯、甚至是河豚。\n完全不用擔心有任何問題的享用了非常日式的料理。\n坐巴士回到車上後，也準備前往機場順便還車。\n回程 國內線 還車的地方在國內線。\n所以還車後，先逛了國內線的伴手禮店，有許多東西在國際線也可以買到，但又不確定，所以就憑感覺買了。\n購買的心得是首推像是冷藏的糕點，可以放 8 小時左右，這種生鮮在國際線就買不到。\n其他的我覺得都可以在國際線購買，甚至還有一些國內線沒有的，像是薯條三兄弟。\n國內線機場門口有提供免費接駁巴士到國際線（6 分鐘一班）。\n國際線 回台灣時不知道購物戰力如何，虎航在託運上多加了 200 元購買額外的行李重量。\n可託運總重為 70 kg，不過這邊最後只託運了 51 kg\u0026hellip;。\n國際線機場人非常多。託運行李後，拿機票後就可以出境了。\n出境後不外乎就是免稅品店、7-11，由於搭乘虎航，每個人的手提行李只能兩件。\n最後到指定的 Gate 等待叫號上飛機回台灣。\n到台灣機場後，透過接駁直達到家。結束整個日本之旅。\n","date":"2024-01-17T14:50:00+08:00","image":"https://wellstsai.com/post/kitakyushu/images/%E9%87%91%E9%B1%97%E6%B9%96_hu7cd1b831bb960f78742c240b4db40cdc_643998_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/kitakyushu/","title":"北九州五日自由行"},{"content":"目前此方法已經失效。\n什麼是 ChatGPT？ ChatGPT 是由 OpenAI 開發的一種語言模型，使用了基於生成式預先訓練轉換器（generative pre-trained transformers，GPT）的語言模型，透過大量文字內容學習自然語言處理的能力，理解使用者的輸入，並根據上下文產生對應的回應內容。\n在程式碼方面，ChatGPT 能夠回答不同程式語言、函式庫和框架的相關問題，也能能夠提供程式，並解釋其運作原理或是相關建議。\n在修飾、潤稿方面上也能提供建議，或是翻譯為英文、日文等操作。\n為目前電腦使用者基本且不可或缺的工具。但也不應該過度依賴，畢竟有產出的內容可能是錯誤的資訊。\nChatGPT API 金鑰 傳統上使用 ChatGPT，會需要到官方網站，並提供網頁介面供使用者進行與得到回覆內容。\n透過 OpenAI 所提供的 API 金鑰，則可以使用官方提供的 API 來存取服務內容。藉此可以整合其他服務。\n例如透過 API 金鑰，可以：\nVSCode 的外掛整合（Genie AI，問程式碼、建議分析） 瀏覽器外掛（ChatGPT Summary for Chrome，頁面進行摘要） 命令行界面（SGPT，在命令列直接與 ChatGPT 交互） 翻譯軟體 手機相關軟體（Keybot、OpenCat 等\u0026hellip;） 其中 API 金鑰的定價根據官方描述，常見的模型對應售價可以整理成以下表格：\nModel Input Output gpt-3.5-turbo-1106 $0.0010 / 1K tokens $0.0020 / 1K tokens gpt-3.5-turbo-instruct $0.0015 / 1K tokens $0.0020 / 1K tokens gpt-4-1106-preview $0.01 / 1K tokens $0.03 / 1K tokens gpt-4-1106-vision-preview $0.01 / 1K tokens $0.03 / 1K tokens gpt-4 $0.03 / 1K tokens $0.06 / 1K tokens gpt-4-32k $0.06 / 1K tokens $0.12 / 1K tokens 已認證的手機號碼可獲得三個月內 5 美金的使用額度。可以到官方渠道進行產生金鑰並直接使用。\n對於未驗證的帳號或已使用完額度的帳戶，實際上在登入 API 頁面時，會產生 session API 金鑰。透過這個金鑰也可以進行 ChatGPT API 的存取而不需要費用。\n取得 session API 金鑰 首先於官網右上角登入（Login），如果沒有註冊帳號的可以直接註冊，目前註冊帳號不用驗證手機號碼了。\n登入後，網址應該為 https://platform.openai.com/docs/overview\n開啟開發者工具（F12），找到開發者工具內的網路標籤。\n此時重新整理網頁會看到 login，右側的預覽裡面帶有 sensitive_id，此為 session key、API 金鑰。\n結論 複製 API 金鑰後，就可以貼在需要 API 的第三方應用內了。該金鑰的特點為：\n效期為 14 天，過期後需要重新登入，在取得一次新的金鑰。 14 天內如果再次重新登入 ，該金鑰會強制過期。 僅支援 gpt-3.5 以及更低版本的模型，gpt-4 無法使用。 低調使用。 參考文獻 ChatGPT ","date":"2023-12-28T17:17:00+08:00","image":"https://wellstsai.com/post/chatgpt-key/cover_huf8a182652f213945c8af6f740ccc4084_91881_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/chatgpt-key/","title":"免費申請 ChatGPT API 金鑰"},{"content":"什麼是控制器區域網路？ 控制器區域網路（controller area network，CAN）為應用於汽車相關領域的資料傳輸協定。允許網路內的多個裝置互相通訊，提供實時可靠的數據傳輸。\n由 Bosch 在 1983 年提出，並在 1993 年正式通過國際標準組織（ISO），發布標準化的 CAN 協定。\n目前的 CAN 版本有：\nCAN 2.0 （1993），又稱 Classical-CAN CAN FD （2012） CAN XL （2022） 主要簡化電子控制器（electronic control units，ECU）或是不同裝置彼此間的通訊，都需要 UART 進行點對點通訊。藉由 CAN 可以大幅降低線路的複雜度。\n使用 CAN 可以大幅簡化接線並提高可靠性 如今的汽機車領域都有使用 CAN 通訊，其特性在於：\n低成本和輕量級網路：通訊使用線性匯流排（linear bus）架構，這種結構降低了實施成本，同時使整個網路保持輕量化。 實現多設備直接通訊：允許網路上的多個設備直接互相通訊，無需中央主機控制通訊，提供了系統的靈活性。 提供可靠的實時性：可以提供數據傳輸得即時性，特別適用於車輛控制系統場景。 抗干擾能力： 透過使用差動訊號（CAN-High / CAN-Low）提高了對電磁干擾的抗性，可以確保在雜訊高的環境中穩定通訊。 低功耗與支援網路喚醒：具有低功耗特性，同時支援網路喚醒功能。 簡潔的架構：相對於乙太網路架構更為簡單，使得系統設計和維護更加容易。 其中不足的地方可能在於有限的傳輸速率與節點，在大量資料如影像、影片則是不適合的。\n另外 CAN 協定不實現加密，有需要時需自行實現安全性。\nCAN 主要傳輸內容為：\n控制指令 感測器數據（車速、轉向角、溫度、檔位） 診斷訊息 韌體（更新） 即時事件 CAN 的重點摘要 使用 CAN_H(igh) 與 CAN_L(ow) 進行通訊，不需要地（GND）。\n差動訊號（differential signal）是通訊訊號，共模訊號（common-mode signal）雜訊。分別代表 Vd 與 Vcm。\nVcm 是同時存在於 CAN_H 與 CAN_L，透過相減可以把共模雜訊消除。\nVd = V_CAN_H - V_CAN_L，Vcm = (V_CAN_H + V_CAN_L) / 2\nCAN_H 與 CAN_L 為差動訊號。預設輸出準位為 2.5 v（CAN_H/L 對地）。\nRecessive 表示位元 1，此時 CAN_H = CAN_L = 2.5 v，Vd 為 0 v。\nDominant 表示位元 0：CAN_H = 3.5 v，CAN_L = 1.5 v，Vd 為 2 v。\nCAN 傳輸採用仲裁（arbitration）方式，傳輸上 dominant 優先權高於 recessive，因此 CAN ID 越小，優先權越高。在系統設計不佳的情況下，低優先順序的 CAN ID 有可能會遇到無法傳輸的風險。\n仲裁過程若發生碰撞（即 A 節點發 0，B 節點發 1），此時 B 節點會停止傳輸變而接收。並使用載波檢測多重存取／碰撞避免（Carrier Sense Multiple Access with Collision Avoidance，CSMA/CA）等待 CAN 網路可以訪問自動重發以避免碰撞。\n能分別哪些節點是暫時錯誤或是永久錯誤，如果節點有問題會自動停用該節點。\n若不知道哪條線是 CAN_H 與 CAN_L，可以透過三用電表的平均值或示波器進行評估，CAN_H 平均電壓會高於 2.5 v，而 CAN_L 平均電壓會低於 2.5 v。\nCAN 每次發送稱作數據幀（Frames），一個幀裡面主要有目標 ID、長度、資料內容，細節可參考：Frame 格式\nCAN FD 可以向下兼容 CAN 2.0，但 CAN 2.0 不兼容 CAN FD。\n微處理機（microprocessor，MCU）通常會選用支援 CAN 通訊協定的 IC，這類 IC 通常會提供 SDK 進行開發。開發者不會牽扯更加底層的操作實現。\n使用 CAN 通訊會再搭配一個 CAN 收發 IC 實現電壓準位轉換與差動訊號的轉換。\nCAN 網路的終端點會加上終端電阻（termination resistor）120 Ohms 減少傳輸線路上的反射波。可參考：終端電阻的設計與考量。 量測其網路中的 CAN_H 與 CAN_L，應為 60 Ohms 附近。\nCAN 有機率丟包，評估整體負載率建議不要超過 60-70%（經驗法則）。\nCAN 2.0 最高速率為 1 Mbps，CAN FD 資料傳輸速率最高可達 8 Mbps。\n傳輸速率分為兩種：名義速率（nominal bit rate，NBR）與資料速率（data bit rate，DBR）。 CAN 2.0 仲裁階段與資料傳輸階段的速率一致，一般所說的 500 Kbps、1 Mbps 指的是整個 CAN 的通訊速率。 CAN FD 仲裁階段速率與 CAN 2.0 一致，最高可達 1 Mbps。然而 DBR 最快可達 8 Mbps。\nCAN 的名詞解釋 名詞 說明 Standard CAN CAN2.0 標準格式，又名 CAN 2.0A，使用 11 個位元表示 ID。 Extended CAN CAN2.0 擴展格式，又名 CAN 2.0B，使用 29 個位元表示 ID。 CAN FD 具備可彈性資料率（Flexible Data），可使用 11 或 29 個位元表示 ID。並且最多可提高到 64 bytes 資料長度。其特點在於資料傳輸時使用更快的傳輸速率，為 CAN FD 被提出的基本理念。而在一幀內傳輸更多的數據也進而更低的 CAN 負載率。 CAN XL 第三代 CAN 協定，擁有比 CAN FD 更長的資料長度（2048 byte）。 FlexCAN NXP 旗下的 IP 模組，實現了 CAN FD 與 CAN 2.0B 協議，並符合 ISO 11898-1 標準。 MCAN TI 旗下的 IP 模組，實現 CAN FD，並符合 ISO 11898-1 標準。 MCMCAN Infineon 實現的模組，MCMCAN 目前已取代自家的 MultiCAN。支援傳統 CAN 與 CAN FD。 Vector 德國公司，提供汽車和嵌入式系統領域的解決方案。 CANoe Vector 用於 CAN 軟體開發及測試工具。可以產生訊號、模擬通訊行為。簡化版本為 CANalyzer CANape 由 Vector 開發的工具，主要用於電子控制單元（electronic control units，ECU）和高級駕駛輔助系統（advanced driver-assistance systems，ADAS）的測量、標定和診斷工具。 Peak-System（PCAN） 德國公司，提供汽車和嵌入式系統領域的解決方案。 XCP 通用的測量和校準協定（universal measurement and calibration protocol），允許外部設備（例如校準工具或測量儀器）與嵌入式系統通信，以進行參數調整、性能評估和故障診斷等操作。 UDS 統一診斷服務（unified diagnostic services），用於車輛診斷系統中進行通訊和訊息交換的通訊協定。在汽車行業中用於車輛診斷的標準之一，它定義了統一的服務和診斷協定，以確保不同車輛製造商的診斷工具可以與車輛的控制單元（ECU）進行有效的通訊。 OBD-II 為標準協定，允許外部電子設備訪問車輛的內部電腦系統，以進行診斷和排放測試。通常在車上會看到 16-pin（2x8） 的 SAE J1962 母頭連接器 .dbc Database Container 是由 Vector 所開發的檔案格式，為業界標準。廣泛用於 CAN 相關軟體。描述 CAN 網路上 ID 、名稱、長度等相關內容。 CiA CAN in Automation（CiA）是國際用戶和製造商組織，開發並支持基於 CAN 的高層協定及其國際標準化。以改善 CAN 協定未包含的範疇。像是流量控制、裝置定址、汽車電子控制單元校調（XCP）等\u0026hellip; CANopen 基於 CAN 的通訊協定所實現的高層通訊協定。適用於嵌入式應用。它擴展了 CAN 的能力，支援更大的數據包大小，並提供了豐富的通訊功能，使其適用於更複雜的機械自動化應用。由 CiA 組織開發和維護。 DeviceNet 基於 CAN 的通訊協定所實現的高層通訊協定。主要用於工廠自動化，作為控制器（PLC）與工業 I/O 裝置（例如限位開關、感應器、驅動器、顯示器和操作界面）之間的通訊。由 Open DeviceNet Vendor Association（ODVA）維護。 J1939 基於 CAN 的通訊協定所實現的高層通訊協定。主要針對車輛應用。它允許在車輛系統中進行廣泛的數據交換，支援消息的無限長度，並支持主/從結構，適用於複雜的車輛通信需求。由國際汽車工程師學會（Society of Automotive Engineers，SAE）制定的標準。 recessive bit CAN 訊號的位元 1，此時 CAN 的差動電壓標準為 0 v。 dominant bit CAN 訊號的位元 0，此時 CAN 的差動電壓標準為 2 v。 資料幀格式（data frame） 開始旗標（start of frame，SOF），用於表示資料幀開始的旗標。CAN 節點開始之前會檢測有沒有 11 個位元 1，以確定整個網路為閒置狀態。\n仲裁欄位（arbitration field，12 or 32 bit）\nbase ID（11 bit） 遠程傳輸請求（remote transmission request，RTR），在實際應用中幾乎不使用。 擴展 CAN 中，多了遠程請求（substitute remote request，SRR）、IDE 旗標、擴展 ID（extended ID，18 bit）。 控制欄位（control field，6 bit）\nID 擴展（identifier extension，IDE）旗標，若為 CAN 2.0A 則為位元 0。 保留位元 (r0)，預設為位元 0。 數據長度編碼（data length code，DLC），使用 4 bit 表示後續的資料長度。 資料（data field），使用 1 ~ 8 個 byte 表示傳遞資料。\nCRC 欄位（16 bit），包含 15 bit 的 CRC 序列與 CRC 分隔符。\n確認欄位（acknowledgement field，2 bit），包含了 ACK slot 和 ACK delimiter。如果 CRC 匹配成功，則會在 ACK slot 為位元 0。ACK delimiter 固定為位元 1。\n結束旗標（EOF，7 bit），表示整個幀結束。7 個位元 1 表示幀的結束。\n幀間隔（interframe space，IFS），固定 3 個位元 1，確保相鄰的幀有足夠時間間隔。這段時間可以拿來防止干擾、同步，並為接收下一個幀做準備，以及進行錯誤處理。\n每個訊息幀固定由 11 個位元 1 結尾，分別為 ACK delimiter、EOF、IFS。節點在新的 SOF 旗標，會檢測是否有 11 個位元 1 判斷網路是否為閒置。其中 SOF 為進行節點同步的機制。 SOF 到 CRC 內只允許連續 5 個位元相同，如果連續 5 個位元 0 或 1，則會塞入一個相反位元作為填充位元（stuff bit），該填充位元可用於訊號同步、也可藉由此機制確定通訊是否異常以提高可靠性。 CAN FD 特點與差異 CAN FD 的思維在於 CAN 2.0 的改良。其重點為：\n在一幀內傳輸更多的資料，以降低 CAN 負載。\n更快的資料速率。\nCAN FD 控制器可向下兼容處理 CAN 2.0 標準。\n在既有 CAN 2.0 網路（500 Kbps），傳送 CAN FD （5 Mbps）的幀會造成網路錯誤。必須使全部節點升級，或是使用閘道進行網路分離等\u0026hellip;。\n支援 11 與 29 位元的 ID。\n移除遠端幀，也因此將資料中的 RTR 替換為 Remote Request Substitution bit （RRS），並始終為位元 0。\nCAN 2.0 中的 r0 重新命名為 FD frame (FDF)，固定為位元 1。\n使用 Bit Rate Switch（BRS）旗標來決定是否以更高的 data baud rate 傳遞資料。\n若為 0 則和 CAN 2.0 一致使用固定的速率傳輸位元（NBR）。\nError Status Indicator（ESI），預設為位元 0 表示正常工作，若為位元 1 則表示錯誤被動模式。\nStuff bit count（SBC）為三個格雷碼與一個奇偶位元，提高通訊的可靠性。\n上圖可以看到，CAN 2.0 與 CAN FD 在傳送相同資料下，如果未開啟 BRS，位元傳送的速率是走 NBR。\n開啟 BRS ，資料傳輸率可以最高走 8 Mbps 的速度進行傳輸。圖中所使用的 DBR 分別是 4 倍與 10 倍的 NBR。\n位元時間（Bit timing） 位元結構 針對 CAN 所配置的速率，如 500 Kbps 的 NBR，表示每秒傳送 500000 的位元。\n將傳輸速率倒數，可以得到每個位元的時間，稱為位元時間（Tb 或是 Tnbt）。\n一個位元時間分為 4 段，其中這 4 段分別為：\n同步區段 （sync segment） 傳輸時間區段 （propagation time segment） 相段緩衝區段 1（phase buffer segment 1） 相段緩衝區段 2（phase buffer segment 2） 以 500 Kbps 的傳輸速率，表示 Tb = 0.2 us （公式 1）。這四段時間相加為一個 Tb（公式 2）。\n其中傳輸時間區段需要考慮，Node A 處理時間、傳輸時間、Node B 處理時間。\n也因此傳輸時間區段至少為：兩倍的物理傳輸延遲 + Node A 處理時間 + Node B 處理時間。Node A 在傳送 SOF 時，才能滿足 CAN 仲裁的優先機制。\nTime Quantum（Tq） 位元時間分為 4 段，使用最小的單位時間（Time Quantum，Tq）表示每段的長度。\n以一個 80 MHz 的裝置時脈，Tq = 1 / 80 MHz = 12.5 ns\n如果需要將 CAN FD 的資料位元率設定 5000 kbps。\n配置 Tsync_seg = 1 (固定)，Tseg1 = 13，Tseg1 = 2。整個 Tq 為 16 個單位。\n12.5 ns × 16 = 0.2 us 表示一個位元為 0.2 us，將其倒數可以得到 5000 Kbps。\n預除器（baud rate prescaler，BRP） 一個裝置有不同的時脈，使用裝置內部的 BRP 可以進行除頻，來調整 Tq。\n80 MHz 裝置時脈，Tq = 12.5 ns\n若 prescaler 為 2，則除頻變為 40 MHz，此時 Tq = 25 ns。\n取樣點（sample point） 取樣點簡稱 SP。根據主流協定與標準（如 CANopen、DeviceNet），CAN 的取樣點建議使用 87.5%。而 75% 為 ARINC 825 的預設值。\n在此，選定主流 87.5% 取樣點，在 CAN 通訊上出錯的機率也會比較低。\n同步跳躍寬度（Synchronization Jump Width，SJW） SJW 用來補償振盪器的容忍度。透過同步，SJW 可以被延長或縮短。\n在 CAN 系統中，振盪器的頻率可能會因溫度變化、電壓波動或元件老化而產生變化。\n為了確保不同節點之間的通信穩定，使用相位緩衝段和 SJW 這兩個機制，以補償由於振盪器容忍度引起的相位偏移。\n此數值與 NBR、DBR 無關，主要是提供時脈偏移的容忍度，常態值為 1 ~ 2 個 Tq。\n計算區段時間 需要考慮\nMCU IC 時脈 位元速率（NBR / DBR） 傳輸線延遲 CAN IC 延遲 溫度（不可控） 其中已知數值：\n位元時脈（NBR / DBR） 系統時脈（MCU 可能為 8 MHz / 20 MHz / 40 MHz / 80 MHz） 可以透過計算機進行初步評估。根據選定的取樣率（常見為 75 % ~ 90 %，建議使用 87.5 % 進行評估）。\n便可決定要多少的 prescaler、TSEG1 與 TSEG2。\n終端電阻的設計與考量 標準終端電阻（standard termination） 前面有提到整個 CAN 網路的終端兩點會有各 120 Ohms 的終端電阻，這個 120 Ohms 是依據 ISO 11898-2 所規範。\n因為頭尾兩端各有電阻，所以看入某個端點的輸入阻抗，並聯後約為 60 Ohms 附近。可以使用電表測量 CAN_H 與 CAN_L，阻抗為 45 ~ 65 Ohms 附近。\n在 ISO 11898 定義下，最高速度為 1 Mbps、長度不超過 40 m，殘段（stub）長度為 0.3 m，最大節點數 30 個。\n透過網路設計可以降低訊號反射，使其擁有更長的網路、更長的殘段、更多的設備。\n例如考慮 10 個節點（2 終端 + 8 裝置），終端以加上 120 Ohms 電阻。\n若分支 CAN 網路的殘段很長，可以加入 2.6 KOhms 電阻以降低反射。\n考慮 8 個 2.6 KOhms的終端，其最終的阻抗：\n(2600 / 8) // 120 // 120 ≈ 50.65 Ohms 即便只有 1 個端點，2.6 KOhms 與兩個終端電阻並聯，得到阻抗為 58.6 Ohms，也是符合整體線路阻抗，不過實際上傳輸有沒有問題，會需要於通訊中進行測試評估。\n殘段電阻計算方式為：\n330 Ohms × 殘段數 = 殘段的終端電阻值 由 ISO 的規範下，預設 CAN 網路的兩個終端，必須有兩個 120 Ohms 電阻。\n在實驗室中：\n僅只有一個終端電阻的情況下可能也是可以正常工作的。但還是建議養成習慣多補一個終端電阻。 殘段端的電阻，由於測試距離很短往往訊反品質很好而感受不出其成效。最終會於安裝於整車網路後進行訊號評估。 分離式電阻（split termination） 使用分離式電路組成的 RC 濾波可以濾除高頻雜訊：\n即兩個相同電阻（60 Ohms）串接對地，中間並聯一個 4.7 nF 電容對地，其效果為低通濾波器，可以有效提高抗干擾的能力並減少電磁輻射。\n其截止頻率 fc = 1 / (2πRC)，可計算出約為 1.12 MHz (Rt = 30 Ohms)，即超過該頻率的訊號會被濾除。\nPCAN-View 收發測試 本節說明 PCAN 的基礎設定，並解釋前章節的參數與其對應介面。\n開啟 PCAN-View。上方為接收端，下方為傳送端。\n插入硬體後，點選左上方的連接 ICON，可以進入裝置的設定。\n這邊走的是 CAN FD，NBR 與 DBR 分別為 1000 Kbps 與 5000 Kbps。取樣點設定為 87.5%。\n設定裝置後，MCU 目前固定每 500 ms 傳送一次資料。可以看到 Receive 端出現 0xC0 的 ID。\n若要送資料給 MCU，在 Transmit 空白處右鍵，點 New message\u0026hellip;。\n傳送資料類型為 CAN FD，並開啟 BRS 加快資料的傳輸。資料長度為 64 個 byte。\n新增後，選中 Transmit 底下的 msg，點選空白鍵發送 msg。MCU收到資料後回傳 0x777。\n參考文獻 History of CAN technology FlexCAN控制器 Getting Started with the MCAN (CAN FD) Module Introduction to the Controller Area Network (CAN) Basics of debugging the controller area network (CAN) physical layer TJA1040 high speed CAN transceiver Practical tips: CAN-Bus SN65HVD23x 3.3-V CAN Bus Transceivers ISO 11898-1:2015 - Road vehicles ISO 11898-2:2016 - Road vehicles XCP (protocol) Unified Diagnostic Services CAN bus Learning Module CAN CAN FD Explained Calculator for CAN Bit Timing Parameters The Configuration of the CAN Bit Timing CAN Bit Timing Requirements ","date":"2023-12-25T16:00:00+08:00","image":"https://wellstsai.com/post/can-interface/cover_hude0e6f3596daa7fb8aca3c8454bd8aeb_256377_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/can-interface/","title":"控制器區域網路（CAN bus）特性與重點"},{"content":"引言 Secure Shell（SSH）是一個安全協定，允許兩台電腦通過安全的連接進行數據交換（執行命令、傳檔案），並提供加密保證數據的安全與完整性。\nSSH 通常用於兩台電腦的遠端登錄。它取代了舊的遠端訪問協定，像是 Telnet 是以明文沒有加密的方式傳輸密碼和內容。而 PTT 也在 2020 年關閉不安全的 Telnet 協定，改用 SSH 或是 WebSocket 協定，以確保通訊過程都有加密，防止竊聽與竄改，提高安全性和隱私性。\nSSH 除了裝置遠端連線，還可以：\n建立 SSH 隧道（Tunneling）進行端口轉發，安全的的訪問網路資源。 SFTP、SCP 提供安全檔案傳輸進行上傳或下載檔案。 rsync 用於檔案同步，減少傳輸用量。 其他應用\u0026hellip; 預設 Linux、MacOS 或是 Windows 預設都整合了 OpenSSH 套件。OpenSSH 是一個開源的 SSH 實作，讓使用者可以透過 SSH 協定所實作的套件，裡面包含了：\n遠端操作工具\nssh，用於遠程登入到其他主機並執行命令。 scp，本地與遠端的檔案傳輸。 sftp，類似 FTP 的使用方式，但傳輸都有進行加密。 金鑰管理工具\nssh-add，將私鑰加入 SSH 代理程式，以便在不需要再次輸入密碼的情況下使用私鑰進行身份驗證。 ssh-keysign，用於對 SSH 證書進行簽名以進行身份驗證。 ssh-keyscan，用於掃描遠端主機以檢索其 SSH 公鑰。 ssh-keygen，用於生成 SSH 金鑰對（公鑰和私鑰）。 伺服器端\nsshd (SSH Daemon)，在伺服器上運行的守護程序，負責接受來自客戶端的 SSH 連線請求。 sftp-server，處理 sftp 客戶端的請求並進行檔案傳輸。 ssh-agent，管理用戶的 SSH 金鑰，並在需要時提供這些金鑰進行身份驗證。 本文章重點會著重在如何建立公鑰與私鑰，並透過這兩把鑰匙實現無密碼認證。另外也會提及伺服器端如何運行 SSH 服務，並讓用戶端透過 SSH 進行連線。\n在傳統上密碼登入方式，輸入正確的使用者密碼以進行身分驗證。若伺服器暴露在公共網路上時，可能會面臨暴力破解的風險，進而導致伺服器資料外洩。\n為了提升安全性(與懶得輸入密碼?)，可以透過公私鑰進行驗證。如此一來不需要輸入密碼就可以連線，且駭客在沒有私鑰的情況下也無法登入。\n💡 本文章有使用 Tailscale 建立內網，達成本地端與伺服器端的電腦透過 hostname 或是 IP 進行連線。\n兩台電腦要連線需要有 IP，如果是公網 IP 則需要設定路由器進行端口轉發到內網，但相對暴露 SSH 端口危險的。 不想暴露端口、沒有公網 IP 或是無法修改路由器設定等，可閱讀使用 Tailscale 輕鬆建立安全且私密的通道來實現兩台電腦的連線。\nSSH 重點摘要 SSH 主要兩種驗證方式為：\n密碼身分認證（Password-based authentication） 公鑰認證（Public-key authentication） 實現 SSH 金鑰後，登入方式可使用金鑰登入，不需要輸入密碼。\n公開金鑰 內容會填寫在 遠端伺服器 上的 authorized_keys。\n私密金鑰 會保留在您的本機系統上，保護此私密金鑰，不要共用它。\n公開金鑰可以與任何人共用，私密金鑰只有自己有存取權限。\nSSH 可以選擇不同加密演算法，RSA 為預設、目前廣泛且相容性最好的加密方法，相反，ED25519 對比於 RSA 具有更好的性能但較差的相容性，目前絕大多數伺服器都逐漸支援。為我個人目前產金鑰的首選。在此確保本地端與伺服器可以正常通訊即可。\n絕大多數存取 GIT 的傳輸協定是 SSH。意味著在遠端操作像是 clone, push, pull 都會要求認證。\nSSH 加密方式，雖然 RSA 比 Ed25519 相容性好，但實際在使用上建議以產生 Ed25519 為優先以確保安全性與速度。\nSSH 金鑰建立與連線流程 假設 nodeA 為本地端（使用者），nodeB 為伺服器端。\nnodeA 為工作的電腦，像是要進行 git clone，或是進行 SSH 連線到別的電腦上。\nnodeB 為被連線的電腦，像是 git 伺服器，網頁伺服器、代理伺服器、虛擬專用伺服器等\u0026hellip;\n在 nodeA 或 nodeB 產生金鑰（公鑰與私鑰）。 把私鑰放在 nodeA，公鑰放在 nodeB。 nodeB 建立 ~/.ssh/authorized_keys，並填入公鑰。 nodeA 建立 ~/.ssh/config，填入連線資訊，連線資訊包含伺服器 IP 與私鑰路徑。 nodeA 在進行 SSH 連線時，預設會使用金鑰進行連線。 💡要特別注意的是：\n確定私鑰只有自己有存取權限，且 nodeB 沒有私鑰。 nodeB 如果是 Windows 且為系統管理員。路徑需改為： C:\\ProgramData\\ssh\\administrators_authorized_keys 如果連線失敗或設定金鑰後但卻要求輸入密碼，可在 SSH 連線時可以加上 -vvvv 進行除錯。 確認 SSH 環境 Linux 與 Windows 預設已經安裝好客戶端，輸入 ssh USER@IP 便可以連線到其他伺服器。\n若想要建立 SSH 伺服器，則需要另外安裝，並運行 SSH 服務。\nLinux # 預設已安裝好 openssh-client，可以直接先檢查版本 ssh -V # 如果找不到指令表示尚未安裝，可透過以下指令安裝 openssh-client # sudo apt install openssh-client 可以看到 Linux 目前裝的版本為 OpenSSL 3.0.2。\nwells@server:~$ ssh -V OpenSSH_8.9p1 Ubuntu-3ubuntu0.4, OpenSSL 3.0.2 15 Mar 2022 若要讓其他電腦能透過 SSH 連到這台 Linux，則需要安裝 openssh-server\nsudo apt install openssh-server 安裝後，透過 systemctl 指令來啟動、檢查服務。\nsudo systemctl enable ssh # 開機自動執行 sshd sudo service ssh start # 執行 sshd 服務 sudo systemctl status ssh # 檢查 sshd 服務狀態 若成功執行，會看到綠色 active\nWindows Windows 底下除了透過 ssh -V 檢查客戶端是否安裝。\n也可以透過 powershell 檢查並安裝：\n# 檢查 OpenSSH 安裝狀態 Get-WindowsCapability -Online | Where-Object Name -like \u0026#39;OpenSSH*\u0026#39; Installed 表示已安裝，NotPresent表示尚未安裝\n目前此 Windows 可以看到 Client 已安裝，表示可以透過 SSH 連線到其他伺服器。\nPS C:\\Users\\wells\u0026gt; Get-WindowsCapability -Online | Where-Object Name -like \u0026#39;OpenSSH*\u0026#39; Name : OpenSSH.Client~~~~0.0.1.0 State : Installed Name : OpenSSH.Server~~~~0.0.1.0 State : NotPresent sshd 目前沒有安裝。若要讓其他電腦可以透過 SSH 連線到此電腦，則透過 powershell 進行安裝。\n以下為 OpenSSH.Client 與 OpenSSH.Server 的安裝指令：\n# 安裝 OpenSSH.Client Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 # 安裝 OpenSSH.Server Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 安裝 OpenSSH.Server 需要一段時間，安裝好後會出現 RestartNeeded: True，請先重開機。\n使用 Microsoft Defender 防火牆，對私人網路打開端口 22。\n如果有防毒軟體進行管理，此行不需要。但需要檢查防毒軟體的防火牆是否開啟端口 22。\nnetsh advfirewall firewall add rule name=\u0026#34;Allow SSH from private network\u0026#34; dir=in action=allow protocol=TCP localport=22 profile=private 接著，啟用 SSH 服務與開機自動啟用：\n# 設定每次電腦開機，自動啟動 sshd 服務 Set-Service -Name sshd -StartupType \u0026#39;Automatic\u0026#39; # 檢查 SSH 服務 Start-Service sshd 可以看到 sshd 的狀態，應該為 Running 狀態\nPS C:\\Users\\wells\u0026gt; Get-Service sshd Status Name DisplayName ------ ---- ----------- Running sshd OpenSSH SSH Server 至此，透過另一台電腦嘗試連線，便可以成功連線上伺服器終端\nC:\\Users\\wells_nodeA\u0026gt;ssh wells@nodeB ECDSA key fingerprint is SHA256:eaAI46GIucGkcFEeSAwO2GWsTOgr1919FyDoXsJKYG1. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes wells@nodeB\u0026#39;s password: xxxxxx Warning: Permanently added \u0026#39;nodeB,100.100.120.16\u0026#39; (ECDSA) to the list of known hosts. wells@nodeB C:\\Users\\wells_nodeB\u0026gt; 連線除錯方式 如果進行遠端連線失敗的話，可在連線時加入 -vvvv，進行排錯，例如：\nC:\\Users\\wells_nodeA\u0026gt;ssh -vvvv wells@nodeB OpenSSH_for_Windows_8.6p1, LibreSSL 3.4.3 debug1: Reading configuration data C:\\\\Users\\\\wells_nodeA/.ssh/config debug3: Failed to open file:C:/ProgramData/ssh/ssh_config error:2 debug3: expanded UserKnownHostsFile \u0026#39;~/.ssh/known_hosts\u0026#39; -\u0026gt; \u0026#39;C:\\\\Users\\\\wells_nodeA/.ssh/known_hosts\u0026#39; debug1: Authenticator provider $SSH_SK_PROVIDER did not resolve; disabling debug2: resolving \u0026#34;server\u0026#34; port 22 debug3: ssh_connect_direct: entering debug1: Connecting to server [100.100.120.16] port 22. debug3: finish_connect - ERROR: async io completed with error: 10060, io:00000299F796C380 debug1: connect to address 100.100.120.16 port 22: Connection timed out ssh: connect to host server port 22: Connection timed out 可以看到 Connection timed out，表示可能的原因有：\n伺服器端的防火牆阻擋連線（電腦、防毒軟體、路由器）。 sshd 沒打開。 客戶端的 port 22 被阻擋。 DNS 解析錯誤。 這些問題需要一步一步進 debug，更進一步的操作可以參照 Google 大神尋求協助。\n建立金鑰 由上述的 SSH 連線行為，可以發現目前尚未設定金鑰，所以預設登入是使用密碼進行登入。\n建立金鑰非常簡單，由客戶端或伺服器端上執行皆可進行。\n這裡 Windows 與 Linux 產生金鑰的指令都是透過 ssh-keygen。\n其中參數的部分：\n-t ed25519 為產生一對 ed25519 金鑰。或將其改為-t rsa -b 4096，表示使用 RSA，長度為 4096 位元。 -C \u0026quot;xxx\u0026quot; 裡面的參數為任意值，主要是添加備註，幫助辨識金鑰是由誰建立的。 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; 產金鑰的過程，會看到 Enter file in which to save the key 的路徑，預設是在個人目錄底下的 .ssh 資料夾底下。\n決定好路徑後，會再詢問 passphrase（金鑰密碼），若為空值，未來在使用金鑰進行驗證時不需要密碼。若駭客取得到私鑰，還有第二道牆需要突破。\n金鑰是儲存在個人電腦、個人帳戶，一般來說外洩的機會有難度。若害怕金鑰外洩的，可以輸入非空的數值。如此未來在使用金鑰驗證，還會額外要求輸入密碼以進行驗證。但相對又麻煩了\u0026hellip;\npassphrase 可以透過 ssh-agent 來實現快取，而在快取時間內不用輸入 passphrase。\n此部分建議設定金鑰密碼以提高安全性。並使用 金鑰密碼搭配 ssh-agent 進行快取。\nC:\\Users\\wells_nodeA\u0026gt;ssh-keygen -t ed25519 -C \u0026#34;admin@wellstsai.com\u0026#34; Generating public/private ed25519 key pair. Enter file in which to save the key (C:\\Users\\wells_nodeA/.ssh/id_ed25519): C:\\Users\\wells_nodeA/.ssh/nodeA_ed25519 Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in nodeA_ed25519 Your public key has been saved in nodeA_ed25519.pub The key fingerprint is: SHA256:hCRwfElJDbYaaG1JgyDTs4Mqn4tQpIiPhmTwMWIMRO0 admin@wellstsai.com The key\u0026#39;s randomart image is: +--[ED25519 256]--+ |E=oo.o.+B=. | |o=+.+ +o*o+. | |=o+. o ooo | |.+.. . | |* S | |*oo.. | |=Xo+ | |*oo | |o. | +----[SHA256]-----+ 於 nodeA 產出公私鑰後，可以到個人 .ssh 目錄下檢查：\n##### Windows ##### C:\\Users\u0026gt;ls C:\\Users\\wells_nodeA\\.ssh\\ authorized_keys config nodeA_ed25519 nodeA_ed25519.pub ##### Linux ##### wells@nodeA:~$ ls ~/.ssh/ authorized_keys config nodeA_ed25519 nodeA_ed25519.pub 其中，私鑰沒有副檔名（nodeA_ed25519），公鑰（nodeA_ed25519.pub）附檔名為 .pub。\n產完金鑰對後，便可以開始部署金鑰。\n⚠️ 注意：\n私鑰在本機（Local），公鑰在伺服器（Server）上。若在 node B 產出公私鑰，私鑰複製到 nodeA 後記得在 nodeB 上刪除私鑰。\n私鑰確定只有自己能夠存取，在 Linux 上，若權限為 777，請透過 chmod 改為 400。\nchmod 400 ~/.ssh/nodeA_ed25519 使用 SSH 金鑰建立兩台電腦連線 我們要把公鑰（nodeA_ed25519.pub）複製到伺服器上。可以透過 scp 這個程式。\n用法為：scp 本地檔案路徑 使用者名稱@伺服器:伺服器路徑\nWindows 複製公鑰到 Windows\nscp C:\\Users\\wells_nodeA\\.ssh\\nodeA_ed25519.pub wells@nodeB:C:\\Users\\wells_nodeB\\.ssh\\nodeA_ed25519.pub Windows 複製到 Linux\nscp C:\\Users\\wells_nodeA\\.ssh\\nodeA_ed25519.pub wells@nodeB:~/.ssh/nodeA_ed25519.pub 輸入完密碼後，便可以把公鑰透過 scp 複製到伺服器上。\nC:\\Users\u0026gt;scp C:\\Users\\wells_nodeA\\.ssh\\nodeA_ed25519.pub wells@nodeB:C:\\Users\\wells_nodeB\\.ssh\\nodeA_ed25519.pub wells@nodeB\u0026#39;s password: nodeA_ed25519.pub 100% 102 1.1KB/s 00:00 C:\\Users\u0026gt;scp C:\\Users\\wells_nodeA\\.ssh\\nodeA_ed25519.pub wells@nodeB:~/.ssh/nodeA_ed25519.pub wells@nodeB\u0026#39;s password: nodeA_ed25519.pub 100% 102 1.2KB/s 00:00 複製後，在 nodeB 上（伺服器端），新增檔案並填入公鑰內容。\n使用者為根據 nodeB 的使用者\nWindows 一般使用者：C:\\Users\\wells_nodeA\\.ssh\\authorized_keys ⚠️ Windows 系統使用者：C:\\ProgramData\\ssh\\administrators_authorized_keys Linux 一般使用者/root：~/.ssh/authorized_keys 記事本開啟公鑰 (nodeA_ed25519.pub) 全選複製內容 新增上述檔案 在上述檔案內，貼上公鑰內容後存檔 最後，本地端 nodeA 新增 config 設定檔後儲存：\nWindows：C:\\Users\\wells_nodeA\\.ssh\\config Linux：~/.ssh/config Host nodeB_wells User wells HostName nodeB IdentityFile ~/.ssh/nodeA_ed25519 設定檔內容說明\nHost 為個人可辨識的名稱 User 是伺服器上的使用者名稱 HostName 為伺服器的 IP 或 host 名稱 IdentityFile 為私鑰路徑，Windows 與 Linux 上都可以使用 ~/ 表示個人目錄 儲存後，就可以實現以金鑰進行登入，若登入失敗要求輸入密碼，可以檢查\n金鑰是否正確 authorized_keys 路徑是否正確 進行 SSH 連線，此時不會要求輸入密碼\nC:\\Users\\wells_nodeA\u0026gt;ssh wells@nodeB Microsoft Windows [版本 10.0.22631.2861] (c) Microsoft Corporation. 著作權所有，並保留一切權利。 wells@NODEB C:\\Users\\wells\u0026gt;exit Connection to nodeB closed. C:\\Users\\wells_nodeA\u0026gt; 使用 SSH 金鑰存取位於 Synology 上的 Git 伺服器 在本地端 Windows/Linux 上建立好金鑰後，將公鑰放置 Synology 的個人使用者目錄下的 .ssh 資料夾，沒有目錄的話需要自行建立。並新增 authorized_keys 並填入公鑰內容。\n在本地端上的 config 設定檔，填入主機資訊：\nWindows：C:\\Users\\wells\\.ssh\\config Linux：~\\.ssh\\config Host NAS User wells HostName 192.168.50.12 IdentityFile ~/.ssh/nodeA_ed25519 設定檔內容說明\nHost 為辨識名稱 User 為 NAS 登入帳號 HostName 為 NAS IP IdentityFile 為私鑰路徑 執行 git remote 相關指令時，則會優先使用金鑰進行認證，而不用輸入密碼。\n使用 SSH 金鑰存取 Github 首先在 Github 建立新的 repo，若已經有 repo 的可略過此步驟。\n建立後，github 會提供 SSH 的連結\ngit@github.com:WellWells/TEST_REPO.git 如果在本地端直接進行 clone，會跳出沒有權限：\nwells@server:~$ git clone git@github.com:WellWells/TEST_REPO.git Cloning into \u0026#39;TEST_REPO\u0026#39;... git@github.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 點擊右上方的個人圖示叫出選單，點選 Setting 進入設定頁面\n左邊選擇 SSH and GPG keys，進入 SSH Key 頁面後，點擊 New SSH key 新增公鑰。\n在本地端上的 config 設定檔，填入主機資訊：\nWindows：C:\\Users\\wells\\.ssh\\config Linux：~\\.ssh\\config Host github_wells HostName github.com IdentityFile ~/.ssh/nodeA_ed25519 設定檔內容說明\nHost 為辨識名稱 HostName 固定為 github.com IdentityFile 為私鑰路徑 在 clone 一次就可以正常使用金鑰存取 Github repo。\nwells@server:~$ git clone git@github.com:WellWells/TEST_REPO.git Cloning into \u0026#39;TEST_REPO\u0026#39;... warning: You appear to have cloned an empty repository. 進階安全設定 此章節適用於對安全性敏感的使用者，也建議設定以下相關 config 以達到更高的安全性。\n關閉密碼認證 如果預設遠端伺服器 (nodeB) 走的是密碼認證，確定金鑰可以成功登入後，可以關閉密碼認證提高安全性。\n設定檔路徑：\nWindows：C:\\ProgramData\\ssh\\sshd_config Linux：/etc/ssh/sshd_config 找到約 50 行附近，並將 PasswordAuthentication 改為 no，記得移除前面的 #\n---#PasswordAuthentication yes +++PasswordAuthentication no 修改後，重啟 sshd 後，下次登入僅使用金鑰進行，若金鑰遺失則無法登入\n透過 PowerShell 重啟 sshd\nRestart-Service sshd Linux 重啟 sshd\nsudo service ssh restart 金鑰密碼搭配 ssh-agent 在建立金鑰章節有說明 passphrase 預設可為空值，在進行 SSH 時不需要密碼。然而私鑰如果外洩，駭客可以直接透過此私鑰進行 SSH 連線。\n在此，建立金鑰時可以加入 passphrase，並透過 ssh-agent 快取私鑰在記憶體中，只要輸入一次密碼後，都會透過此快取進行金鑰驗證。\n以下操作使用 Windows 為範例，Linux 的操作基本相同一致。\n其主要差異在 Windows 底下 SSH 執行檔分為兩包，分別為：\nOpenSSH 底下的 C:\\Windows\\System32\\OpenSSH Git 目錄底下的 C:\\Program Files\\Git\\usr\\bin 故需要將 Git 的 sshCommand 更改為 OpenSSH 的路徑。\nWindows：\n# 更改 git 的 ssh.exe 為 OpenSSH 底下的路徑，若未更改，則無法使用儲存在 OpenSSH 記憶體的私鑰 git config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe # 開機自動執行 ssh-agent Get-Service ssh-agent | Set-Service -StartupType Automatic # 啟動 ssh-agent Start-Service ssh-agent # 檢查 ssh-agent 的狀態 Get-Service ssh-agent # 使用 ssh-add 把私鑰加入 ssh-agent，此時會要求輸入 passphrase ssh-add C:\\Users\\wells\\.ssh\\nodeA_ed25519 # 列出當前 ssh-agent 中已載入的金鑰 ssh-add -l # 刪除所有金鑰 # ssh-add -D Linux：\n# 若預設為 bash，則在 ~/.bashrc 末端加入以下行 eval \u0026#34;$(ssh-agent -s)\u0026#34; # 新增私鑰到 ssh-agent，並輸入 passphrase ssh-add ~/.ssh/nodeA_ed25519 macOS 指令可能有些不同，請參閱解法\n確定 ssh-agent 已載入私鑰，私鑰可以備份至安全的地方，並在此電腦上移除。\n只要 ssh-agent 有成功啟動，預設都會透過 agent 進行金鑰認證。\n最終，本地端 nodeA 的 .ssh 資料夾，應該只有 known_hosts 與 config。\nconfig 裡面的 IdentityFile 路徑也可以移除。\nHost nodeB_wells User wells HostName nodeB ssh-agent 預設時間是永久，若要提高安全性可以設定快取時間。\nssh-agent -t 1h 使用 SSH agent 轉發 Github 與 nodeB 上已經填入公鑰，本地端 nodeA 已經透過 ssh-add 新增私鑰到 ssh-agent。\n所以本地端可以 SSH 到 nodeB，或透過進行 git 相關指令把 Github 的程式碼 clone 下來至 nodeA。\n現在，若要在 nodeB 上進行 git clone 把 Github 的程式碼抓下來，私鑰不需要放到 nodeB。\n可以透過 SSH agent 轉發實現私鑰轉發。\n# 添加 -A 可以啟用 SSH 代理轉發。允許在遠端伺服器上使用本地的 SSH 金鑰。 ssh -A wells@nodeB 如果每次 SSH 都要帶參數覺得麻煩，也可以在 config 內新增 ForwardAgent\nHost nodeB_wells User wells HostName nodeB ForwardAgent yes 連線後，遠端伺服器可以使用 ssh-add -l 檢查是否已經載入私鑰。\n若已載入私鑰，此時便可透過該金鑰，在 nodeB 上進行 git clone。\nWindows 預設自帶版本為 8.6p1，進行 agent 轉發後檢查伺服器上的私鑰是有載入的。\n然而進行 git clone 會出現公鑰認證失敗，此部分為 OpenSSH Bug。\nWindows 使用者可以到微軟 OpenSSH Release 手動安裝_8.9p1 後，進行 git 相關操作是正常的。\n另外，如果遠端伺服器的信任度不高，可考慮改用 Proxyjump 進行跳板。其基本原理是私鑰儲存在 NodeA 上，當在 NodeB 存取 Github 時，可設定 NodeA 為跳板。\n使用 Proxy 的好處是不從 NodeA 轉發金鑰到 NodeB 上，而是直接在 NodeA 上進行 SSH 操作，並把結果回傳至 NodeB。\n如果 NodeB 的信任度較低（例如有其他使用者擁有更高的 root 權限），則應考慮使用 Proxyjump 進行代理操作。\n參考文獻 允許遠端電腦取用你的 Mac 開始使用 OpenSSH for Windows OpenSSH Server 如何在 Windows 正確的安裝與設定 OpenSSH Server 服務 使用命令列管理 Windows 防火牆 SSH 複雜密碼 Adding a new SSH key to your GitHub account How to maintain ssh-agent login session with Windows 10\u0026rsquo;s new OpenSSH and PowerShell Automatically starting ssh-agent when powershell or git-bash are started 適用于 Windows 的 OpenSSH 中的金鑰型驗證 Using SSH agent forwarding Ssh fails to use private key from ssh-agent: communication with agent failed SSH Agent Forwarding considered harmful ","date":"2023-12-15T18:50:00+08:00","image":"https://wellstsai.com/post/ssh-connection/cover_hu008f9935e91088f0fcd36d9134ad0b3c_252783_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/ssh-connection/","title":"使用 SSH 金鑰進行無密碼遠端連線"},{"content":"首圖/DON DON DONKI Taiwan 唐吉訶德\n12/7 號開幕日 今天為唐吉訶德（DON DON DONKI）開幕日。順便經過就安排去朝聖一下。\n相較於先前在臺北也有在開幕日朝聖過西門店，還特地住在西門町附近，凌晨約 2 點逛唐吉訶德西門店還是要排隊至少約 20 分鐘才能進去。\n開幕當天逛唐吉訶德大立店其實沒有那麼的擁擠。可能跟店鋪大小也有關。\n不過話說回來，店鋪大小根據新聞稿描述「亞洲最大」、「占地 900 坪、1000 坪、1200 坪」。我都不知道哪個數據才是真的了\u0026hellip;\n而根據維基百科與新聞資訊，說明馬來西亞店鋪大小為 42243 平方英尺 = 3924.503 m²。以大立店 1200 坪 × 3.30578 = 3966.936 m² 才有可能比馬來西亞店大。如果低於 1200 坪，那就不是全亞洲最大了🙃。但我覺得大多資訊看看就好，畢竟有許多內容可能是媒體或官方新聞稿所炒作。\n但可以肯定的是，唐吉訶德大立店是全臺灣最大，逛起來最舒服的一間唐吉訶德。\n店舖名稱：DON DON DONKI 高雄大立店\n地址：高雄市前金區五福三路57號AB館B1（高雄大立百貨地下 1 樓）\n營業資訊：週一至週日 10:00 - 23:00\n聯絡電話：(07)231-8911\n相關連結：官方網站 | FB 粉絲專頁\n備註：目前入口為大立 A 館，出口為 B 館，手扶梯搭 B1 上來直通 MUJI 無印良品。\n唐吉訶德大立店照片 以下為唐吉訶德大立店店內照片，主要可以分為兩區：A 館與 B 館。\n由於開幕近幾天流量管制，A 館目前規劃為入口，B 館為出口通往無印良品。未來應該可以直接從無印良品直接進入到 B 館。\nA 館為化妝品、剪刀、眼罩、酒等，沒有要購買的話應該5分鐘內就會走到 B 館了。\nB 館提供像是蔬果、熟食、隱形眼鏡、家電、衛浴、食品、冰淇淋跟結帳。\n排隊 開幕當天排隊等待約 20 分鐘就入場，可能是用餐時間所以排隊的人不多。周末我想應該會排爆。\n排隊途中店員推薦可以加入好友，領取滿 300 折 30 的活動，Line 需要提供信箱等一些個資。\nA 館 進入大立 B1 後，可以看到 A 館入口。\nA 館提供的大多為化妝品\n如果沒有要買化妝品的話，A 館蠻快就逛完了。走著走著會看到連通道與大立店的裝飾品。不過話說裝飾品的海龜跟後面的建築跟高雄好像沒什麼關係(?)\n中途還會遇到推銷大立聯名信用卡。快速走過去就會看到 B 館入口了。\n連通道 B 館 映入眼簾的是蔬果區（草莓、蘋果），B 館這邊基本上就隨便逛了。\n有看到餅乾、便當等。但是大部分的東西比價起來，都沒有比較便宜。\n雜貨 音箱看起來不怎麼樣，沒意外應該是中國製。\n電池的部分感覺沒大廠好用。\n零食 熟食便當 甜點 邊走邊吃就是讚\n果汁、豆乳與芥末 泡麵類 餅乾糖果 Hello Kitty 另一區餅乾與糖果 Pocky，兔子真可愛。\n類似大創的 39 元商品 論實用性，CP值非常低。\n冰品 等到結帳不知道是不是都融光了。\n購物袋 結帳前的購物袋區，購物袋的質感感覺沒有 IKEA 好。\n結帳櫃檯 結帳效率蠻高的。\n用餐區 用餐區提供扭蛋機與為數不多的座位（約 6 個附近）。\n在這邊順便吃了冰冷的便當 + 起司塔。\n心得 首日大家都怕人擠人的心態，反而人潮沒有那麼多。真正最多人的應該會是第一周的周末。\n目前唐吉訶德的狀態是進館內先排隊一次，結帳時再排一次。\n討厭排隊或攜帶兒童的人非常不適合，因為等待時間非常長，至少要等 20 分鐘以上。\n本次購買 99 元便當與 79 元的 DONKI 起司塔。\n但結帳後準備享用時，便當的飯是冰的，所以非常不推薦。\n起司塔的部分，結帳後外包裝的紙盒也吸飽了水氣整個爛掉。內容物雖然是完好的，但與超商甜點比起來，事實就是非常難吃。\n可能真的推薦的只有蔬果類的吧。目前有裝滿一袋日本蘋果 499 元 (約 20 顆)。\n其他零食餅乾等類型的，如果不是迫切需要，建議還是在日本購買。或是像泡麵類的商品體積龐大，不太適合放在行李箱裡，如果想吃的話，直接在此購買或者透過直接網購是比較推薦的方式。\n整體而言，逛起來就像是在臺北西門店一樣，與在日本購物相比，價格並不算便宜，甚至有些商品比全聯還要貴。\n真的要再探討的話，日本有賣 eufy Security (Anker) 等第三方 AirTag 配件，這些東西想必臺灣要上市應該是不可能的。（還有 R-18 區）\n大多數人只是解解饞，如果真的想大量購物的話，飛去日本一趟也是不錯的選擇😊。\n不過還是肯定唐吉訶德插旗大立百貨，結合 MUJI 無印良品旗艦店讓這邊更加熱鬧。\n參考文獻 唐吉訶德官網 活絡商圈 全台最大唐吉訶德落腳高雄百貨 Don Quijote (store) 大立百貨 在日本唐吉訶德吃不到壽司、和牛串！唐吉訶德為何只在海外推出餐食？ ","date":"2023-12-07T19:00:00+08:00","image":"https://wellstsai.com/post/don-don-donki/cover_hu5373ac233c66ea2e01d63fd46f051d8c_76975_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/don-don-donki/","title":"高雄唐吉訶德（DON DON DONKI）大立店開幕"},{"content":"引言 這篇文章會介紹我在 Windows 上常用到的開發工具，並說明為什麼要安裝以及好用在哪。\n在 Windows 上進行開發，除了內建的記事本、小畫家、命令提示字元（cmd）之外。\n使用其他工具能夠更有效率地進行開發工作。雖然主要著重於 Windows 開發過程中的工具，但其中一些技巧也可應用在 Linux 環境中。\n值得特別注意的是，隨時準備好左手。左手在快速完成某些事情時是不可或缺的，大多數的情況下負責的是快速鍵的呼叫。\n快捷鍵 Windows 上提供非常多快捷鍵，基本的快捷鍵有：\n⊞ Win + R：開啟執行視窗（可用 PowerToys Run 或 Everything 取代）\n輸入 cmd、calc（小算盤）、notepad（記事本）、regedit（登錄編輯程式）、mstsc（遠端桌面連線）、mspaint（小畫家）可快速開啟相對應的應用程式。\n⊞ Win + D：快速回到桌面，再一次會回復全部視窗\n⊞ Win + Shift + S：自由截圖 （可用 ShareX 取代）\nAlt + Print Screen：視窗截圖\n⊞ Win + L ：鎖定電腦不登出\n⊞ Win + ; ：Emoji 面板打表情符號（分號鍵位於英文字母 L 的右邊）\nCtrl + Shift + Esc：直接開啟工作管理員，對比於Ctrl + Alt + Del只需要左手就可以完成，而且也不用先叫出 menu 後，再用滑鼠點工作管理員。\n部分像是 Emoji 面板為 Windows 10 以上內建，其他快捷鍵大多數在 XP 時代就存在了。\n另外像是 Ctrl + X / V / Z / F / S / A 為標準指令，對應 剪下、貼上、復原輸入、搜尋、儲存、全選，大多古老的 Ctrl 指令就不再此贅述。\n安裝 winget Windows 程式包管理器（winget）是微軟為 Windows 10 及 Windows 11 所提供的應用程式，提供搜尋、安裝、移除、更新所需軟體。\n透過 winget，我們可以快速且統一的安裝相關軟體，避免多餘的行為（尋找軟體的官方網站→找到下載連結→下載→執行→安裝→刪除安裝檔）\n若要檢查系統是否支援，可以打開命令列（鍵盤上的 ⊞ Win + R，並輸入 cmd 後點確定），輸入以下指令：\nwinget --version 回傳結果為版本 v1.6.3133：\nC:\\Users\\wells\u0026gt;winget --version v1.6.3133 倘若找不到版本表示尚未安裝，可以到 Microsoft Store 安裝 winget。\n安裝後，記得重啟 cmd 再檢查版本，如果安裝成功，就可以看到版本號。\n推薦軟體 以下介紹那些軟體可以幫助我們快速完成任務，順序依照名稱進行排序。\nEverything 基於 C 語言的 Windows 桌面搜尋引擎，可以在 NTFS 磁碟中快速搜尋檔案名稱或內文。\n基本上是可以取代 Windows 內建的檔案搜尋功能作為日常使用，其最大特點是即時的檔案搜尋。\n工作原理是對電腦上所有的檔案與資料夾從主要檔案資料表（mater file table，MFT）建立資料庫索引，在打開 Everything 時，資料庫中載入至記憶體提供即時搜尋。同時在背景下追蹤 Windows 中的 Update Sequence Number 日誌 （USN Journal）持續更新資料庫。\nEverything 可透過 winget 於 cmd 中完成安裝，或是官網自行下載。\nwinget install -e --id voidtools.Everything 安裝過程由於要存取 USN 日誌，所以會需要系統管理員權限。這邊採預設安裝為服務，日後開機自動在背景執行。\n安裝後，第一次打開會針對電腦進行索引，索引後便可以開始搜尋檔案。\n預設空格為 and 運算，所以要找檔名有 ABC 的 png 圖片可以搜尋：ABC .png\n若要搜尋檔名有 abc，且副檔名為 png 或是 txt 可以搜尋：abc .png|.txt\n在搜尋上可以使用正規表示式語法來實現更複雜的搜尋。\n更多的規則可以參考說明 → 搜尋語法。裡面也有說明如何針對文件內容進行搜尋。\n此外，可以到設定配置快捷鍵。我個人喜歡用 Alt + X 叫出 Everything 視窗，或是可以自行決定來配置 Everything 視窗的快捷鍵。\n另外也可以手動指定伺服器上的資料路徑夾供 Everything 進行索引。\nGit 當我尚未接觸到 Git 時（年幼時期），定時備份程式碼的方式是將所有檔案進行壓縮，然後加上時間標記。這種方式不高效、效率低，也無法追蹤歷史紀錄。甚至過了幾個月，單靠檔案名稱也根本不知道改了什麼。\nGit 是一個免費的開源分散式版本控制系統，使用 Git 來管理檔案，能夠記錄檔案間的差異，並提供回溯歷史版本或整合，提供快速可靠的追蹤檔案的狀態。\n操作 Git 可以很簡單也可以很複雜。大部分的情況不外乎就是提交（commit）與合併（merge）的行為，最終的目的是確保檔案能夠準確被紀錄、程式能夠正常工作。\nGit 可透過 winget 於 cmd 中完成安裝。\nwinget install --id Git.Git -e --source winget 想要確定電腦是否成功安裝 Git，開啟 cmd 並輸入：\ngit --version 回傳結果版本號為 2.43.0.windows.1：\nC:\\Users\\wells\u0026gt;git --version git version 2.43.0.windows.1 後續更詳細的 git 操作，後續有機會再開新的議題討論與分享。\nNotion Notion 是一款多功能的筆記軟體，對於個人用戶來說基本上免費就很夠用了。我覺得他能夠快速、井然有序地建立表格、貼圖、多欄位等功能，就勝過很多筆記軟體了。並且還能夠直接分享筆記書出為公開網址、轉存為 PDF 或是 Markdown。\n先前我整理筆記的方式是開 Word 搭配 Microsoft 365 的雲端進行同步，但 Word 基本為制式格式，並且鎖在 A4 等標準紙張，常常有像表格過長超過一頁，或是要靈活的在一個頁面分多欄，在 Word 上實現要使用分節或表格 + 隱藏框線等技巧也非常麻煩。\n反之，Notion 這些問題都解決了。最大的缺點應該是免費版不提供歷史回朔。\n我有試探性的使用 Microsoft OneNote 進行筆記撰寫，但邏輯上沒辦法接受。\n一個筆記檔案，赤裸裸的儲存在 OneDrive 上，檔案可任意移動。\n筆記本打開後，分了節與頁面，筆記的部分可以任意排位置，與 iOS 的無邊記類似。基本上是沒有順序的邏輯。\n與 Notion 對打的有像是微軟的 Loop，不過目前是 beta 版本。\n微軟最大的優勢在於一推出就有繁體中文，相較於 Notion 對於繁體中文的支援程度非常差。\n不過 Loop 在 iOS 端我個人的體驗沒有很好，目前可能還要等待微軟的優化吧。\n安裝方式可以透過 winget 於 cmd 中完成安裝：\nwinget install -e --id Notion.Notion 安裝後，於 Notion 進行註冊後就可以開始撰寫了。手機與電腦版的體驗一致性蠻高的。\nPowershell 7 在 Windows 系統中，除了內建的命令提示字元（cmd），其實還內建了 Powershell，只不過內建的版本是 PowerShell 5.1，並基於 .NET Framework，於執行中輸入 powershell 便可開啟。\n而 Powershell 7 是基於 .NET Core 來實現更好的跨平台，可透過執行輸入 pwsh 開啟，除了支援新的指令（Cmdlet），也支援跨平台與新的模組的擴充與安裝，還有自動完成打過的指令（cmd 可透過 clink 實現）。為微軟目前積極更新的軟體之一。也建議每個開發者進行安裝。\nPowershell 7 可透過 winget 於 cmd 中完成安裝，亦可參照其他方式\nwinget install --id Microsoft.Powershell --source winget PowerToys 微軟開發的公用程式，裡面包含許多工具，工具都是綑綁在 PowerToys 裡面。\n以下列出我覺得蠻常用的工具：\n工具名 說明 Always on Top 可讓您使用快速鍵捷徑 (⊞ Win + Ctrl + T) 將視窗釘選到其他視窗上面。 PowerToys Awake 可以讓電腦保持永遠喚醒狀態。 色彩選擇器 是一種全系統的色彩挑選公用程式。 FancyZones 是一個視窗管理器，可讓您輕鬆地建立複雜的視窗版面配置。 File Explorer 附加元件 可在 File Explorer 中啟用預覽窗格和縮圖轉譯。 圖像大小調整器 對著圖片右鍵就可快速調整影像大小。 尋找我的滑鼠 按鍵盤左 Ctrl 兩下可以快速定位滑鼠位置。 無框線的滑鼠 可讓您從相同的鍵盤和滑鼠與多部電腦互動。 PowerToys Run 可協助您立即搜尋並啟動應用程式。 文字擷取器 可以對圖片進行 OCR 識別文字。 各個工具的介紹可以參考微軟 PowerToys 官方說明寫得非常清楚，並且在安裝後也會有 intro 介紹各個功能該如何使用。\nPowerToys 可透過 winget 於 cmd 中完成安裝。\nwinget install Microsoft.PowerToys --source winget 我們原先藉由 ⊞ Win + R 叫出執行視窗，如果輸入錯誤會無法正確啟動程式。\n安裝好後，PowerToys 內建 PowerToys Run，可透過鍵盤上的 Alt + Space喚醒 Run 視窗，並支持模糊搜尋、中文輸入甚至是簡易計算。\n當然裡面還有一些工具像是抓取顏色（ColorPicker），適合用於網頁開發，快速鍵為⊞ Win + Shift + C\n或是針對圖片進行文字 OCR 辨識並擷取文字，快速鍵為⊞ Win + Shift + T\nPowerToys 與 Windows 整合性很高，同時也感受不到存在，卻又提供很重要的功能。\nShareX 開源的截圖、錄製軟體，可以錄製 mp4 或是 gif 動圖，並整合上傳功能、OCR 或是上浮水印等其他效果，也支援內建編輯器，是一個功能強大、但又輕巧的軟體。\n安裝方式可以到 GitHub 下載，或透過 winget：\nwinget install -e --id ShareX.ShareX 安裝後，右下角會有 ShareX 圖示，可以設定語言、快捷鍵、截圖後要做什麼（開啟資料夾、上傳、列印等\u0026hellip;）等一系列操作。\n本軟體是支援繁體中文的，但預設語言是英文。\n對著圖示右鍵，找到應用程式設定（Application Settings） → 一般（General）可以找到語言（Language），把 Automatic 改為繁體中文即可。\n後續使用上應該沒有太多困難。比較龜毛的可以在任務設定 → 擷取底下有一個擷取視窗透明度可以打開，針對 Windows 11 的圓角邊框會處理好而不會有背景色。\nTailscale Tailscale 可以讓設備不透漏在外網的情況下進行存取。並快速實現個人 VPN，透過多種方式實現防火牆的穿透。\n使用者不需要了解其中原理，僅需要將多個設備登入至 tailnet。便可實現裝置間的通訊。\n像是可以實現以下情境：\nA 電腦存取 B 電腦的資源，如網路芳鄰共享(Samba)、或是 NAS 資源。 點對點的連線，像是 SSH、遠端桌面連線。 子網 subnet 路由。例如內網 IP：192.168.6.XX。手機可以在不同網路上使用同個 IP 進行連線。 流量代理。可以指定裝置的流量，經由另一個節點出口。 公網直連。藉由 Funnel 實現公網對該裝置的存取。 點對點傳檔。 等\u0026hellip;. 更多的配置與設定，可以參考使用 Tailscale 輕鬆建立安全且私密的通道。\nVisual Studio Code 微軟開發的跨平台編輯器，擴充性非常強大，對於開發者而言，Visual Studio Code（VS Code）是不可或缺的。\n基本上裝了 VS Code，其他軟體像是 notepad++、Eclipse，可以有條件式的直接取代。\nVS Code 特性包括：\nIntellisense 程式碼完成 Git 版本控制 並支援多語言凸顯和語法檢查，例如 JavaScript、TypeScript、Python、C++ 等。 跨平台支援（Windows、macOS、Linux）。 內建程式碼格式化、重構、偵錯等功能。 支持使用 tasks.json 定義任務，如編譯、執行等。 豐富的擴充功能生態系統（不支援的語法？裝個擴充就解決了！） SSH 遠端開發，並支援端口轉發（Port Forwarding）。 搭配 WSL 實現在 Windows 下進行 Linux 開發 多樣的主題可以自由更改。 內容主題繁多，也需要花一些時間學習，但就初學者而言，也是可以當作一般的文字編輯器。\n後續如果有機會再來說說 VS Code 的一些操作方式。\n安裝方式可以到 微軟官網下載，或透過 winget：\nwinget install Microsoft.VisualStudioCode 安裝好後，就可以打開 VS Code，並資料夾（專案）或是單一檔案進行編輯，若開啟資料夾且偵測到 git 相關文件，則 VS Code 會自動解析 git 狀態。\n這邊以我在 Linux 上撰寫 Hugo 文章為例，在 Windows 上以 SSH 遠端連線到 Linux 伺服器，並開啟 Linux 上的目錄。我切到 VS Code 內建的 Git 管理，可以看到那些檔案新增、編輯、刪除。另外，我有安裝擴充 - Git Graph，可以以圖的方式檢視目前 Git 分支的狀態。\nWinCompose 針對特殊符號，系統不像 macOS 有組合鍵（compose key）。透過開源的 WinCompose 可以實現快速打出特殊符號。\n以前我打特殊符號都是記 Unicode 表，甚至還印出了常用的 Unicode 表 XDD。\n首先先切換到新注音輸入法，輸入 Tab 鍵盤上的前導字元 `，接著按下鍵盤 U 表示 unicode，然後輸入字符的號碼例如2605後按空白鍵，特殊符號就出來了。\n例如：`u2605 表示 ★ | `u2606 表示 ☆ | `u00b0 表示 °\n透過 WinCompose，可以使用組合鍵（右 Alt） + 定義字元，就可以快速打出特殊符號。\n例如：\n♥：右Alt按一下，並輸入 \u0026lt;3 即可出現愛心（\u0026lt; 輸入方式為 Shift + ㄝ） ♢：右Alt按一下，並輸入\u0026lt;\u0026gt; √：右Alt按一下，並按下鍵盤的sq（rt這邊省略掉的） ★：右Alt按一下，並輸入**（* 輸入方式為 Shift + 數字 8 ） ¼：右Alt按一下，並輸入14 安裝方式可或透過 winget 於 cmd 中完成安裝，或是到 WinCompose Release 下載並安裝：\nwinget install -e --id SamHocevar.WinCompose 安裝後，右下角會出現 WinCompose 的圖示，右鍵 → 顯示組合鍵可以看到已經定義好的規則。\n左下方可以自訂組合鍵，使用上不會太困難。在此不繼續深入討論。\nWindows Sandbox Windows Sandbox（沙箱）提供輕量型桌面環境，可安全地隔離執行應用程式。再測試軟體於全新作業系統中是否正常運作、測試檔案是否有病毒或是暫時安裝某個試用版軟體(?)時非常好用。\n關閉沙箱後，整個資料都會移除。每次開新的沙箱，都像全新的 Windows 一樣乾淨。\n比較需要注意的是：\n需要BIOS 中啟用的虛擬化功能 不支援 Windows 家用版（繞過限制） 至少 4 GB 的 RAM，但建議 8 GB 以上 安裝方式於 cmd 中，輸入以下指令開啟 Windows 沙箱功能後，重新開機。\nEnable-WindowsOptionalFeature -FeatureName \u0026#34;Containers-DisposableClientVM\u0026#34; -All -Online 執行後，就可以看到一個乾淨的 Windows。\nWindows Subsystem for Linux 在 Windows 上開發 Linux 有許多方法，例如：\n使用虛擬機（virtual machine），透過像是 Windows 內建的 Hyper-V，或是 VirtualBox 來進行完整的作業系統安裝 雙系統（dual boot），藉由多重引導同時安裝 Windows 與 Linux，開機時可以選擇要以哪個系統開機。（極度不推薦，弄壞整體系統可能性高且複雜） 遠端存取（remote development），組一台 Linux 主機，透過遠端的方式進行連線、開發。 Windows Subsystem for Linux（WSL），安裝 Linux 子系統，可以不需要安裝虛擬機或是雙系統。便可建立 Linux 開發環境。 WSL 的特點是占用的資源比虛擬機少，且可以同時使用 Windows 與進行 Linux 開發。此外，可以安裝和執行各種 Linux 發行版，例如 Ubuntu、Debian、Kali 等等。\n安裝方式分為安裝 WSL 與 安裝 Linux 兩部分。\n首先於 cmd 中輸入以安裝 wsl：\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 安裝後重開機，再次進入 cmd 中，輸入 wsl --help 檢查是否已啟用：\nPS C:\\Users\\wells\u0026gt; wsl --help Copyright (c) Microsoft Corporation。著作權所有，並保留一切權利。 如需此產品的隱私權資訊，請瀏覽https://aka.ms/privacy。 使用方式: wsl.exe [引數] [選項...][CommandLine] 用於運行 Linux 二進位檔案的引數: 如果未提供命令列，wsl.exe 會啟動預設殼層。 ... 接著安裝 Linux，可藉由以下指令列出可以安裝的 Linux 版本：\nwsl --list --online 可以看到許多不同的發行版本\nPS C:\\Users\\wells\u0026gt; wsl --list --online 以下是可安裝的有效發佈的清單。 使用 \u0026#39;wsl.exe --install \u0026lt;Distro\u0026gt;\u0026#39; 安裝。 NAME FRIENDLY NAME Ubuntu Ubuntu Debian Debian GNU/Linux kali-linux Kali Linux Rolling Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 openSUSE-Leap-15.5 openSUSE Leap 15.5 SUSE-Linux-Enterprise-Server-15-SP4 SUSE Linux Enterprise Server 15 SP4 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 openSUSE-Tumbleweed openSUSE Tumbleweed 我這邊開發環境限定為 Ubuntu 18.04，故安裝對應版本。\nwsl --install -d Ubuntu-18.04 安裝過程大概 5 分鐘內就結束了，安裝過程中會要求輸入 Linux 使用者與密碼。\n若安裝過程中出現「無法解析伺服器名稱或位址」，請嘗試更換網路、或透過 VPN 進行嘗試排除。\nPS C:\\Users\\wells\u0026gt; wsl --install -d Ubuntu-18.04 安裝: Ubuntu 18.04 LTS Ubuntu 18.04 LTS 已安裝。 正在啟動 Ubuntu 18.04 LTS... Installing, this may take a few minutes... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: wells Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Installation successful! To run a command as administrator (user \u0026#34;root\u0026#34;), use \u0026#34;sudo \u0026lt;command\u0026gt;\u0026#34;. See \u0026#34;man sudo_root\u0026#34; for details. wells@server:~$ 至此，已經安裝好 WSL 與對應的 Ubuntu 版本，輸入 wsl 就可以進入 Ubuntu 的 bash 終端。\n如果有安裝 Windows 終端機的話，在新增實體時會看到多了新的 Ubuntu 18.04。\n如果已經安裝 VS Code，可以藉由連接至 WSL進行存取，VS Code 安裝好 Linux 上所需要的資源後，可以瀏覽 WSL 上的檔案，並整合 bash 終端機。使用上基本與原生 Ubuntu 系統中安裝 VS Code 一致。\nWindows Terminal Windows Terminal 是微軟開發的一款跨平台終端機應用程式，簡稱終端機。支援多個 shell 環境包括 cmd、PowerShell 和 Windows Subsystem for Linux (WSL)等\u0026hellip;。同時支援分頁顯示，分割顯示，也支援 Windows 11 的壓克力材質。\n安裝方式可以到 Windows Store 中下載，或透過 winget：\nwinget install Microsoft.WindowsTerminal 安裝好後，在開始中找到終端機並執行就可以開始使用了\n點選上方視窗的 ˇ 找到設定，可以修改預設配置，像是終端機預設開啟的實體，我這邊改為 PowerShell，或是也可以設定自己想要的終端實體。\n預設終端應用程式可改為 Windows 終端機，未來開啟 cmd 或其他實體時，會直接以終端機開啟。\n其他設定可以參考官方的詳細文件，例如更改字體、外觀來實現更好、更美觀的終端機體驗。\n另外，也可以自定配置檔，實現開新分頁的時候自動連上 SSH 或是其他操作。\n其他軟體 其他軟體被歸類為非必須，但是在某些開發情況下很好用，不過因為並非每個人都需要因此歸類在此。\n不加以詳細說明下載或安裝過程，僅提供官方連結參照，可以自行下載。\n可個人用途 軟體名稱 說明 7-Zip 免費可商用的壓縮軟體。 Autoruns 檢測 Windows 開機時會自動載入哪些程式項目的工具。並可以刪除或暫時性不啟用。 CopyTransHEICforWindows 將 HEIC 圖片右鍵可轉換為更通用的 JPG 格式。 DLL Export Viewer 查看 DLL 檔案內所 export 的函式名稱、位址和描述。可以快速幫助調適。 ExplorerPatcher 在 Windows 11 上，還原部分 Windows 10 功能的開源軟體，例如工具列和工作列的外觀。 Fiddler Classic 免費的HTTP代理工具，可用於記錄和分析網路請求。官網現在都在推訂閱制的 Fiddler Everywhere。在此直接提供官方下載連結。 iPerf 測試網路頻寬、延遲、吞吐量等性能參數。 K-Lite Codec Pack (Full) 免費的多媒體解碼器套件，安裝後可以解決影片無法正常播放的問題。 Node.js JavaScript 執行環境，允許在伺服器端使用 JavaScript 語言編寫程式。 PowerPoint Shortcut Tools 提供 PowerPoint 的額外快捷工具。像是兩個物件的對齊、快速插入圖框等\u0026hellip;。 Rufus 用於建立USB開機媒體，可以用來安裝和修復作業系統。 Tera Term 開源的終端機通訊軟體。它可以用於連接和控制各種設備。像是微控制器和嵌入式系統。 WinDirStat / SpaceSniffer 以視覺化的方式顯示各個文件夾佔用空間的狀況。 X-Mouse Button Control 自定義滑鼠按鍵的功能和設定。像是羅技滑鼠，可以取代肥大的Logitech Options。 x64dbg 開源的動態分析工具，並進行反編譯及偵錯。 付費軟體 另外也提供付費軟體的選項，大多需要購買授權。\n軟體名稱 可商用？ 說明 HWiNFO 個人非商業使用 商用須購買授權，個人用途不用。可以監控電腦硬體參數的軟體，可以查看CPU、記憶體、顯卡等設備的溫度、頻率等資訊。 Internet Download Manager (IDM) 付費軟體 正版 IDM 允許商用。是一款下載管理器，可以提高下載速度達5倍，並提供續傳和排程下載功能。 Mathtype 付費軟體 可以在 Word 文件中輸入數學公式的軟體。 Pichon 部分免費 提供了超過 13.5 萬個高品質圖示，提供多種尺寸和不同格式。付費後可以解鎖更多圖示。 Typora 付費軟體 流行的 Markdown 編輯器。它支持多種佈景主題與簡潔的界面。並支援跨平台。 WinRAR 付費軟體 壓縮檔案格式 RAR 的壓縮與解壓軟體。不過 Windows 11 已經可以內建解壓縮，基本上這個軟體的存在感越來越低。 結論 上述所提及到的推薦軟體，可以快速幫助我們在開發、協作和生產力方面取得更好的效果。\n下表整理出各個工具的官網，以及針對是否開源、可商用進行說明。\n工具/應用程式 開源？ 可商用？ 簡易說明 Everything Ｘ Ｏ 基於檔名快速搜尋檔案或資料夾。 Git Ｏ Ｏ 分散式版本控制系統，廣泛應用於軟體開發。 Notion Ｘ Ｏ 跨平台的工作協作工具，支援筆記、任務管理等功能。 PowerShell 7 Ｏ Ｏ Windows 的命令列殼層及指令碼語言。 PowerToys Ｏ Ｏ 提供 Windows 桌面的附加工具，增加系統體驗和生產力。 ShareX Ｏ Ｏ 開源的螢幕截圖和錄影工具，支援豐富的功能和自定義設置。 Visual Studio Code Ｏ Ｏ 跨平台的程式碼編輯器，支援多種語言和豐富的擴充、並整合 Git 工具。 WinCompose Ｏ Ｏ 提供易於使用的方式輸入特殊字符，支援自定義組合鍵。 Windows Sandbox Ｘ Ｏ 提供一個輕量、隔離的環境，用於安全地執行不受信任的應用程式。並在結束時清除虛擬環境。 Windows Subsystem for Linux Ｘ Ｏ 可以在同一台機器上同時使用Windows和Linux環境。 Windows Terminal Ｏ Ｏ 結合多個命令列工具、提供分頁和高度可定制外觀的現代化命令列應用程式。 Winget O O Windows 包管理器，用於快速安裝、升級和管理應用程式。 如果資訊有誤的話，請提醒告知，感謝。\n參考文獻 Use the winget tool to install and manage applications Everything support About - Git What is Notion? Microsoft Developer ShareX Compose key ","date":"2023-12-06T12:00:00+08:00","image":"https://wellstsai.com/post/awesome-windows/cover_huf677ab5284dc3059c291ae31652dfe1d_203353_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/awesome-windows/","title":"Awesome Windows - 必備生產力軟體安裝與說明"},{"content":"引言 當今天人在外時，如何遠端連線到家裡的電腦、工作電腦、或是家中的 NAS？\n本篇文章會一步一步教你如何使用 Tailscale 與內網裝置進行連線。\n寫給對電腦不清楚的人 要讓裝置能夠互通，裝置首先要確定能夠連上網路。後續藉由 Tailscale 實現裝置的互通。\n首先在官方網站註冊，並於電腦 A、電腦 B、手機、NAS 或其他待組網裝置，安裝 Tailscale 並登入帳號。\n登入帳號後，等同於登入 tailnet。這些裝置會取得到彼此的內網 tailnet IP。\n並可以透過裝置名稱進行連線，像是遠端桌面連線、列印、存取 NAS 等\u0026hellip;\n不想知道 VPN 背景的可直接跳到如何安裝 Tailscale、裝置重新命名與結論\n如何遠端存取裝置？ 在標準的情境應用中，例如：\n自己架設的網頁伺服器（localhost:80） NAS 本身提供 Web GUI（localhost:5000） Windows 遠端桌面連線（localhost:3389） DNS 伺服器（localhost:53） 其他服務\u0026hellip; 如果我們想讓外網的人存取這台伺服器，首先有個對外 IP (WAN IP) （IP 查詢）。我們可以透過這個對外 IP，從外部輸入 IP 進行連線。\n連線後會找到我們的路由器（router），設定此路由器把對外的 port 導到對應的應用。\n以 OpenWRT 的路由器介面為例，以下是路由器的設定，會在外網 IP 連線時進行通訊埠轉發（Port Forwarding）到區網 IP (LAN IP)：\n其目的在於把 外網 IP:Port 導向至 內網 IP:Port。\n由上圖可得知：\n192.168.1.2 為 DNS 伺服器，負責處理 Port 53, 853, 784 服務。\n192.168.1.3 為 網頁伺服器，負責處理網頁相關的內容。\n192.168.6.4 為 遠端伺服器，由外網 Port 82 導到 內網的 Port 3389。\n設定好後通訊埠轉發後，便可由外部存取 DNS、網頁或是進行遠端桌面連線了。然而，上述通訊埠轉發的方式，是讓外網 IP 直接存取內網的相關資源，也意味者任何人是可以連線的。如果想要讓特定使用者存取，則必須自己建立虛擬私人網路（virtual network，VPN）。\n建立虛擬私人網路（VPN） VPN 是一種服務，它可以建立一個安全的加密通道，將用戶與遠端伺服器建立連接。這樣可以隱藏用戶的真實IP位址和加密數據傳輸。\n以 Windows 為例，根據微軟官網教學於 A 電腦上建立 IKEv2、L2TP 或是 IPsec 協定的 VPN 後。在另外一台 B 電腦就可以嘗試連線了。\n連線成功後，B 電腦便等同於 A 電腦一樣，可以存取 NAS 服務、印表機等內網資源。\n要確定的是路由器與電腦是否有防火牆阻擋 UDP Port 500, 1701, 4500。\n若防火牆阻擋，會造成 VPN 連線失敗。\n常見的 VPN 協定 OpenVpn − 提供多種驗證方式（金鑰、憑證、帳號密碼）進行驗證，可以在不同設備上使用，為開源專案。整理來說開源、安全、易用、兼容性好。\nWireGuard − 於 2020 年整合於 Linux，較為新興的 VPN 協定。其特點為：使用 UDP 傳輸、比 IPsec、OpenVPN 更快、性能更好、並支持跨平台。較新的路由器有些會整合 WireGuard 伺服器。\nL2TP/IPSec，專有協定（Cisco \u0026amp; Microsoft），已經內建於系統中。不需要安裝軟體就可以架設與連線。\nPPTP，已淘汰的點對點協定。\n什麼是 Tailscale？ Tailscale 是一個基於 WireGuard 協定的 VPN 軟體。可以將多個設備連接，實現虛擬內部網路。\n傳統上設定 WireGuard 較為繁瑣，無論是在架設、或是維護上都有一定困難。例如在各個裝置先透過 wg-quick 產生公鑰與私鑰，然後在該裝置上安裝 WireGuard後，設定相關的文件，文件內容需要填寫監聽的埠、專用 IP、私鑰，對等公鑰。\n例如一台伺服器（Server）與兩台客戶端（Client），公私鑰設定如下：\n裝置 私鑰 公鑰 設定 伺服器 A B 填入自己的私鑰 A、客戶端的公鑰 D、公鑰 F 客戶端 1 C D 填入自己的私鑰 C、伺服器的公鑰 B 客戶端 2 E F 填入自己的私鑰 E、伺服器的公鑰 B 若往後有更多客戶端、伺服器需要重新設定，且以上情況僅為 1 個伺服器的例子，多個伺服器設定起來會更加複雜。\n若使用 Tailscale，基本上可以無腦架設私人 VPN，並提供一個完整的 Web GUI 顯示連線的裝置。\n其中 Tailscale 基於 WireGuard，但有以下特點：\n不使用輻射狀網絡（Hub-and-spoke networks），而是使用網狀網路（Mesh networks）改善裝置通訊的交換。當然這也是 WireGuard相較於其他 VPN 協定的不同之處。 支持 NAT 打洞（NAT Hole Punching）[*] ，允許位於不同 NAT 後網路的兩個節點直接通訊，而不需要中央伺服器。從而實現 peer-to-peer (P2P) 直連。 若 NAT 打洞失敗，fallback 到中繼模式 （relay server mode），並基於 DERP（Detour Encrypted Routing Protocol）伺服器來建立連結。 連入 Tailscale 時，會使用協調伺服器（coordination servers / DERP Servers）進行用戶的資訊交換，如 IP、Port、裝置狀態。 簡易的 Web GUI 管理介面，可以管理各個裝置彼此間的訪問程度。 提供 MagicDNS、TailDrop、Tailscale Funnel 等功能，可以更方便的存取裝置。[**] * 網路地址轉換（Network Address Translation，NAT），IP 封包標頭中的IP位址轉換為另一個 IP 位址，從而實現地址重用，讓所有內網都可以使用同一個 IP 連接到外部網路。\n** MagicDNS 提供使用裝置名稱存取裝置而不用記住 IP。TailDrop 實現了類似 AirDrop 的功能，可以直接對其他裝置傳送傳檔案。Tailscale Funnel 實現反向代理的功能，可以讓外網存取指定內網裝置。\nTailscale 的競爭品 異地建立網路的相似產品有：\nZerotier Cloudflare Tunnel Netmaker Ngrok Twingate 等\u0026hellip; 我有使用過的是 Zerotier，使用的是自己的協定而非 WireGuard。個人使用心得是裝置連線 Zerotier 私人網域後，會有一組內網 IP，這組內網 IP 由於沒有 DNS 去解析，所以要存取該裝置，必須直接輸入 IP。雖然提供 ZeroNSD ，不過就印象中需要架設，也就退而轉為 TailScale了。\n如何安裝 Tailscale 首先到官網（https://tailscale.com/）進行註冊，這邊的註冊是透過 Google、Microsoft、Github、Apple 四個身分識別提供者進行註冊（identity provider，IdP），本身 Tailscale 不提供註冊，也因此沒有密碼儲存在 Tailscale 上。\n使用這些 IdP，若要確保安全性，可另外開啟雙重驗證登入。\n基本上是沒有人可以直接存取你的私人網路的。\n登入後，由於沒有任何裝置，Tailscale 預設會提供下列不同的安裝方式，照著官方進行安裝與下載即可。這邊雖然只列出 Synology 有提供官方安裝包，不過也可以使用 Docker 進行安裝在其他 NAS 上。\n下載並安裝後，電腦右下角會出現 Tailscale 的圖示，右鍵選擇 Log in\u0026hellip; 會跳出登入介面。登入後，點選 Connect 即可加入私人網路 (tailnet) 。\n重複步驟，iOS 或 Android 下載 Tailscale，登入後點選 Connect，裝置可能會要求加入 VPN，點選新增 VPN 後，也成功加入私人網路中。\n可以於 Web GUI 中即時看到裝置的新增。\nLinux 的部分也是一樣，只不過從 UI 介面改為命令列形式，根據官方 Linux 安裝教學，整體過程也是一致的。在登入過程中，系統會彈出一個網址，要求使用者在瀏覽器中輸入此網址進行登入。當使用者完成登入後，終端機將顯示 Success。\n至此，安裝 Tailscale 並讓設備能夠互相連線也就完成了。此時可以於 cmd 中，輸入 tailscale status 或是 tailscale ping IP 來查看連線的狀態。\n如果是 active; direct 表示走的是直連，ping通常在 10 − 15 ms；反之，如果是active; relay \u0026ldquo;xxx\u0026rdquo; 表示走的是 中繼伺服器，延遲約為 80 ~ 300 ms 附近。\n走中繼伺服器的原因可能是防火牆阻擋了 UDP port，導致 tailscale 只能走中繼，但比起不能直接連線，至少提供了中繼伺服器的解決方案來解決直連無法連線的問題。\n若要改善 ping 延遲，可檢查路由器相關設定或防火牆來達成直連：\n例如開啟 UPnP 與 NAT-PMP （較不安全，但無腦自動設定好）。 修改防火牆設定，關閉 UPnP，並允許防火牆內部裝置使用UDP通訊，並指定通訊端口為 41641，目標端口則是任意（不同廠家路由器有不同設定）。 Linux 中可能阻擋到端口，開啟終端機並輸入 sudo ufw allow 41641/udp 以開啟 UDP 端口。 PS C:\\Users\\wells\u0026gt; tailscale ping nas pong from nas (100.105.151.221) via 142.251.43.14:41642 in 12ms PS C:\\Users\\wells\u0026gt; tailscale ping work pong from work (100.122.114.19) via DERP(tok) in 190ms pong from work (100.122.114.19) via DERP(tok) in 86ms pong from work (100.122.114.19) via DERP(tok) in 88ms PS C:\\Users\\wells\u0026gt; tailscale status 100.105.151.221 nas wells@ windows active; direct 142.251.43.14:41642 100.122.114.19 work wells@ linux active; relay \u0026#34;tok\u0026#34; 100.206.21.12 server1 wells@ linux idle, tx 22416 rx 28304 100.95.142.53 server2 wells@ linux - 100.111.59.11 home-1 wells@ windows active; direct 142.251.43.14:41641, tx 10684092 rx 110457924 100.92.116.28 home-2 wells@ windows - 100.154.231.41 wells-iphone wells@ iOS offline 最後，可以對著右下角的圖示右鍵 → Preferences → Run unattended 讓開機的時候自動連線 tailnet。\n裝置重新命名 Tailnet 內建 DNS 功能，此功能可以把 hostname 或是裝置名稱轉為 IP（當然你是 IP 愛好者的話記 IP 也是可以的🙃）。\n對著右下角的圖示，進入到 Admin console\n裝置名稱預設是使用 hostname，若想要自訂裝置名稱，可以點選裝置右邊的 \u0026hellip; 的按鈕，並重新命名裝置。\n後續在裝置連線上，便可以直接透過裝置名稱進行連線\nssh wells@build-server Tailscale 相關指令（CLI） Tailscale CLI 提供在 Linux 環境下，開啟或關閉相關設定，在 Windows 上有圖示可以點選，也因此大部分的指令用不到（部分進階功能例外，需透過 CLI 進行設定），不過用來檢查相關連線狀態，用一張表格來說明我自己常用的指令，更多詳細的說明可以參照官網。\nCommands 說明 tailscale status 檢查當前網路狀態，可以檢查是否透過中繼還是直連 tailscale ping [IP/device] 檢查該裝置是否直連，若看到 DERP 表示走的是中繼 tailscale up [flags] 連線至 tailnet，可以帶有不同的flags tailscale netcheck 檢查當前 DERP 的狀態 tailscale update 更新本裝置 tailscale 的版本 自己常用的就幾個，比較進階的可能等未來用到再說吧。\n以下是我使用過的 tailscale up 設定：\n--advertise-exit-node：假設 A 電腦有開啟這個 flag，那麼 B 電腦的流量可以使用 A 電腦做為出口，此時 B 電腦上網的 IP就變為 A 電腦的 IP。 --advertise-routes=：公開子網域，例如 A 電腦有內網 192.168.1.50，B 電腦若想直接訪問 192.168.1.xx 的網段，可以設定此設置。 詳細的設定可以再參考官網詳細的說明。\n結論 本身 Tailscale 的安裝上非常簡單。且防火牆、NAT 穿透等複雜事情都幫你處理好了。\n註冊完後，每個裝置下載 tailscale，並登入帳號即可加入 tailnet。並實現裝置之間的互連。\n每個裝置都有主機名稱，可以透過 Admin console 修改，或是查看各個裝置的狀態。\n另外也可以將以加入 tailnet 的裝置進行子網域組網，並且在 tailnet 中廣播該網段。\n甚至今天加入 tailnet 裡的裝置，還可以單獨分享該裝置節點（Sharing nodes）給其他帳號進行組網，實現更複雜的網路應用。\n其他更進階的設定可以參照官方網站的說明獲取更進一步的原理與資料。\n參考文獻 什麼是 VPN 協議？ WireGuard: fast, modern, secure VPN tunnel ZeroTier Documentation - The Protocol How NAT traversal works How Tailscale works Tailscale CLI DNS in Tailscale ","date":"2023-11-29T12:00:00+08:00","image":"https://wellstsai.com/post/tailscale/cover_hu5a1df5d6cca77f0876c4c8749db3d7d6_149294_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/tailscale/","title":"使用 Tailscale 輕鬆建立安全且私密的通道"},{"content":"什麼是 Hugo 根據官網所描述，是一個基於 Go 語言所撰寫的快速且現代的靜態網站產生器（static site generator），其中靜態網頁的好處在於性能、安全性是吸引人的主要原因。\n透過 Hugo，會將撰寫的 Markdown 編碼成 HTML 頁面。由於 HTML頁面已經建構好，使用者在瀏覽時可以幾乎零延遲的載入。\n其特點不需要後端程式或是資料庫（database）。也因為相較於非靜態網頁來得安全、漏洞更少。\n動態網頁與靜態網頁 動態網頁（dynamic web page）是指在用戶訪問時，網頁的內容可以根據用戶的請求、操作或其他特定條件而動態地生成或改變的網頁。\n以伺服器端語言（server-side scripting）為例子，會在伺服器執行相關程式後，再把結果傳給使用者。\n常見的語言依熱門程度排序: Node.js, PHP, Ruby on Rails, Go, Python, ASP.NET, JSP, CGI 等\u0026hellip;\n在以前寫部落格的時候，使用過 WordPress 這個內容管理系統（content management system，CMS），它是用 PHP 語言開發的。搭建 WordPress 需要擁有一台主機，可以是 Windows 或 Linux 系統，並架設在某個地方，通常是由主機商提供，並最終取得跟主機商的 FTP 或是 SSH 的配置方式。有了主機後，在主機上安裝 Apache 或 Nginx 來處理 HTTP 請求，並且安裝 PHP 執行 WordPress。同時，為了儲存寫的文章，還需要安裝 MySQL 或 MariaDB 資料庫。如果必要時管理資料庫還需要一個人性化的介面(?)，可能還需要安裝 phpMyAdmin（非必要）。\n最後 WordPress 運作起來後，會開始進行設定、SEO 優化、美化主題、安裝部分外掛等一系列操作，目前臺灣主流旅遊網誌還是走這套系統。終端使用者在閱讀文章時，其動態網頁簡易流程為：\n使用者發送 Request → Apache → PHP → Database → HTML → Apache → Response 給使用者\n相較之下，靜態網頁僅需由 Apache 處理使用者的 Request 與 Response，不需要後台運作 PHP 來處理檔案。其特點在於快速、安全，且無需等待後端程式執行完成才將內容呈現給使用者。靜態網頁的簡易流程為：\n使用者發送 Request → Apache → HTML → Apache → Response 給使用者\n兩者之間的差異是在於伺服器端有沒有因為使用者的瀏覽時，而執行伺服器端的程式在呈現，靜態網頁也不需要資料庫存取文章，大多數的文章都已經被編譯成單一的 HTML 檔案，直接供給使用者。\n建站流程 建站流程可以參考下圖可分為以下流程，後續會逐一講解每個步驟，更詳細的內容可能在往後文章有需要再提及：\n開始與安裝（Hugo、Git） 開始新的網站 初始化 Git Repo 安裝 Hugo 主題 開始新的文章 設定網站細節 執行 Hugo 伺服器 推送到遠端伺服器 編譯並發佈網站 Flow chart to build Hugo sites 開始與安裝 在 Windows 與 Linux 上安裝 Hugo 非常簡單與快速，建議使用命令列的方式，可以更快速且一致性的操作。\n另外除了安裝 Hugo，Windows 用戶還需要另外安裝 Git 實現原始檔案的管理。\n未來編輯文章時有任何的出錯想要復原，都可以藉由 Git 快速回朔。\n透過 Winget 安裝 Hugo (Windows) winget install Hugo.Hugo.Extended 安裝結果:\n透過 snap 安裝 Hugo (Linux) sudo snap install hugo 安裝結果:\nwells@server:~$ sudo snap install hugo\n[sudo] password for wells:\nhugo 0.120.4 from Hugo Authors installed\n透過 Homebrew 安裝 Hugo (macOS, Linux) 在使用 brew 指令前，需要先 安裝 Homebrew\nbrew install hugo 透過 Winget 安裝 Git (Windows) 預設 Linux 或 Mac 已經安裝好 Git 指令，故這裡只提及 Windows 上的安裝\nwinget install -e --id Git.Git 檢查執行檔版本 安裝後可以檢查是否安裝成功，順便檢查版本號，目前安裝的 Hugo 版本為 v0.120.4，Git 為 v2.43.0\nwells@server:~/wellwells_hugo$ hugo version hugo v0.120.4-f11bca5fec2ebb3a02727fb2a5cfb08da96fd9df+extended linux/amd64 BuildDate=2023-11-08T11:18:07Z VendorInfo=snap:0.120.4 wells@server:~/wellwells_hugo$ git --version git version 2.43.0 開始新的網站 在一個可以存放網誌原始檔的地方，Linux 可選擇個人的 Home 目錄（~/），Windows 可選擇使用者目錄（C:\\Users\\USER），想儲存在其他區域也是都可以的，要開始新的網站，輸入 hugo new site BLOG_NAME，並進入到該目錄即可，這邊以 my_blog 為例子：\nwells@server:~$ hugo new site my_blog Congratulations! Your new Hugo site was created in /home/wells/my_blog. Just a few more steps... 1. Change the current directory to /home/wells/my_blog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. wells@server:~$ cd my_blog/ wells@server:~/my_blog$ ls # 列出目錄結構 archetypes assets content data hugo.toml i18n layouts static themes 如此一來就建立好了一個新的網誌，而這個網誌預設是沒有安裝主題與文章的，所以直接編譯的話是沒有內容的。\n初始化 Git Repo 在進入到網誌目錄底下（~/my_blog），輸入 git init 便可以初始化本地的 local repo。後續可以 git status 查看 Untracked files。\n預設 Git 是沒有追蹤任何檔案的，可以把 hugo.toml, archetypes 等相關檔案加入至索引對象（git add）。\nwells@server:~/my_blog$ git init hint: Using \u0026#39;master\u0026#39; as the name for the initial branch. This default branch name hint: is subject to change. To configure the initial branch name to use in all hint: of your new repositories, which will suppress this warning, call: hint: hint: git config --global init.defaultBranch \u0026lt;name\u0026gt; hint: hint: Names commonly chosen instead of \u0026#39;master\u0026#39; are \u0026#39;main\u0026#39;, \u0026#39;trunk\u0026#39; and hint: \u0026#39;development\u0026#39;. The just-created branch can be renamed via this command: hint: hint: git branch -m \u0026lt;name\u0026gt; Initialized empty Git repository in /home/wells/my_blog/.git/ wells@server:~/my_blog$ git status On branch master No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) .hugo_build.lock archetypes/ hugo.toml nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) wells@server:~/my_blog$ git add archetypes/ hugo.toml wells@server:~/my_blog$ git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: archetypes/default.md new file: hugo.toml Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) .hugo_build.lock 安裝 Hugo 主題 要安裝 Hguo 主題，我們可以先到 Hugo Themes 找一個喜歡的主題，主題的供應者會提供安裝的方式。\n這裡以 PaperMod 主題為例子。並從 PaperMod - Installation 文件中可以得知安裝有不同方法。\nMethod 1 的話，則是在site 目錄下進行 git clone 即可。\nwells@server:~/my_blog$ git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 Cloning into \u0026#39;themes/PaperMod\u0026#39;... remote: Enumerating objects: 134, done. remote: Counting objects: 100% (134/134), done. remote: Compressing objects: 100% (113/113), done. remote: Total 134 (delta 33), reused 57 (delta 15), pack-reused 0 Receiving objects: 100% (134/134), 263.32 KiB | 1.61 MiB/s, done. Resolving deltas: 100% (33/33), done. 編輯 ~/my_blog/hugo.toml，並於後方新增一行 theme = \u0026lsquo;PaperMod\u0026rsquo; 即可套用該主題，注意大小寫是有差異的。\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;PaperMod\u0026#39; 開始新的文章 透過以下指令，便可新增一篇新文章\nwells@server:~/my_blog$ hugo new content posts/my-first-post.md Content \u0026#34;/home/wells/my_blog/content/posts/my-first-post.md\u0026#34; created 編輯 ~/my_blog/content/posts/my-first-post.md 就等同於在寫文章了，其中語法為 Markdown，記得把 draft = true 改為 false，確定此文章為 release 的狀態。\nmy-first-post.md\n+++ title = \u0026#39;My First Post\u0026#39; date = 2023-11-27T10:58:32+08:00 draft = false +++ Hello, My Site I\u0026#39;m Wells 設定網站細節 在此，其實已經可以運行 Hugo Server 並看到網誌了，不過在執行伺服器前可以考慮進行一些網誌設定，像是：\n編輯 ~/my_blog/hugo.toml 的語言 網誌名稱 是否要啟用 emoji （enableEmoji） 網站的 favicon 摘要 其他配置\u0026hellip; 這部分因為設定繁多，所以也可以執行伺服器後動態調整。\n更多的設定可參考 Configure Hugo，此時也可以考慮要不要把 hugo.toml 轉為 hugo.yaml （習慣性）。\n另外，不同主題有主題相關性的配置，通常要在參照特定主題下的 config 配置。\n執行 Hugo 伺服器 根據官網描述，是一個高性能 Web 伺服器，不過更多來說是方便 Local 端的測試，可以透過以下指令來執行伺服器。\nhugo server -D 其中 -D 也會建置 draft 的文章，最終建置預設是不會編譯 draft 文章。\nwells@server:~/my_blog$ hugo server -D port 1313 already in use, attempting to use an available port Watching for changes in /home/wells/my_blog/{archetypes,assets,content,data,i18n,layouts,static,themes} Watching for config changes in /home/wells/my_blog/hugo.yaml Start building sites … hugo v0.120.4-f11bca5fec2ebb3a02727fb2a5cfb08da96fd9df+extended linux/amd64 BuildDate=2023-11-08T11:18:07Z VendorInfo=snap:0.120.4 | ZH-TW -------------------+-------- Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 2 Sitemaps | 1 Cleaned | 0 Built in 25 ms Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:46651/ (bind address 127.0.0.1) Press Ctrl+C to stop 建立後，可以於瀏覽器中打開 http://localhost:46651，並看到部落格與文章。後續編輯配置或是修改文章都會看到即時的更新。\n推送到遠端伺服器 安裝好主題、新增了文章、編輯配置檔，後續要做的就是把目錄下的改變使用 git 管理，並把 git 推送至遠端伺服器進行管理維護。\n由於我們先前只進行了 git init 而還沒加入 remote 端的伺服器。\n這邊假設 github 已經建立好伺服器端的 repo ，或是其他的伺服器已經準備建立 repo 的情況下，最後會取得到一段 ssh的連接方式：\ngit@github.com:USER/private.repo.git 藉由 git remote add 與 git remote -v 可以新增與檢查當前本地端 repo 的 remote 狀態：\nwells@server:~/my_blog$ git remote add main git@github.com:USER/private.repo.git wells@server:~/my_blog$ git remote -v main git@github.com:USER/private.repo.git (fetch) main git@github.com:USER/private.repo.git (push) 確定本地端，修改的檔案都已經 git add 加入索引、並且 git push 加入預期的 commit 後，便可以 git push 把本地端的修改整個推送到遠端伺服器上。\n編譯並發佈網站 編譯網站非常簡單，只要輸入指令 hugo 就會產出 ~/my_blog/public 目錄，該 public 裡面的 HTML 就可以放到伺服器上供他人預覽。網路上有提供數個免費靜態網頁的託管（hosting），像是：\nGitHub pages Cloudflare pages Netlify 其中目前使用的是 GitHub pages，支持自定義域名，可以整合 repo 與 GitHub Actions。\n實現推送 repo 後，全自動編譯並 push 到 GitHub pages，在每個月 免費的額度 下其實是蠻充裕的。\n結論 整個建立 Hugo 靜態網頁其實沒有很困難，就是安裝 Hugo 與 Git → 安裝主題 → 新增文章 → 發佈\n中途 Git 引入是確保在修改網頁的過程中是能夠回朔的，如果真的不需要其實不用 git init，但也非常不建議。因為網頁突然不小心改壞了，要復原會有一定難度。\n參考文獻 Hugo - Quick start Benefits of static site generators Configure Hugo Hugo Themes PaperMod\u0026rsquo;s wiki ","date":"2023-11-27T15:30:00+08:00","image":"https://wellstsai.com/post/build-hugo/cover_hu92d7f691ce1ddbb942bb8a77e99b31e5_158426_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/build-hugo/","title":"Hugo 建站筆記"},{"content":"你好，我是 Wells。這是記錄我個人在開發過程中的心得、感想。\n如果允許的話，針對職場生涯順便發發牢騷。\n為什麼要寫技術文章？ 取之於社會，用之於社會。\n年幼時曾經營過 Blog，不過重點著重在軟體分享，除了需要龐大的營運成本（寫文、提供空間、更新版本軟體）。另外分享軟體好像也就如此，而市面上分享軟體太多了，不如就交給更專業的吧。\n但日常生活中，重複講解的技術太多，能抱怨的事情太多，能分享的事情太多。\n不如就把它紀錄下來，試著與大家分享心得與觀點。\n為什麼選用 Hugo 當作框架？ 在開始撰寫之前，以下是我個人考慮的因素\n無伺服器 (Serverless)\n建置傳統的 WordPress 走的是 PHP 框架，需要伺服器進行後端運行。相較於靜態網頁，可能找個 GitHub Pages, Cloudflare Pages, Firebase Hosting 之類的丟上去就完事了。\n速度 (Speed)\n網頁預覽速度要快，沒有太多的外掛、廣告。\n易用性 (Usability)\n產生靜態網頁要簡單、避免自己在幾個月後忘記還要翻 API 研究如何產出靜態目錄、更新套件等一系列操作。\n人氣 (Popularity)\n一個框架如果人氣不夠，未來的可擴展性可能就被侷限住了。\n市面上常見的網頁框架主要包括 Jekyll、Hexo 和 Hugo。不過考量各種因素後，最終選擇了 Hugo。\n最初的選擇實際上是 Hexo，這是一個建立在 Node.js 上的框架。安裝完 Hexo 後就能夠開始撰寫文章並進行編譯。\n然而，在2023年9月寫下第一篇文章後，直到2023年11月才真正開始撰寫。由於對語法不夠熟悉，花了3分鐘回憶。\n此外，Node.js 與 Hexo 各自有特定的版本需求，使用 npm outdated 和 npm update 可以對 Hexo 的檢查版本與更新，但也間接地形成軟體維護更新的成本。 （Node.js (20.9.0 LTS)、Hexo (7.0.0)）\n相比之下，Hugo 是透過 Go 開發的，是一個執行檔，安裝後一切就緒，進入到部落格的資料夾後下指令就可以建立 Server 或是編譯，使用上真的是快。\n對於其他平台像是：\nJekyll 則被聽說多文章編譯會較慢，而且安裝還需要下載 Ruby，類似 Node.js 的操作行為我也就沒有繼續深入探討 VuePress 相對小眾，從推廣的程度上來看似不及 Hexo 和 Hugo。 不過無論如何，文章格式都是 Markdown，未來如果需要在不同平台轉換，應該是無感知的。在現階段要開始撰寫技術文章，選擇一個使用者眾多、具有成長性的框架就足夠了。\n結論 本部落格為撰寫技術文章、分享心得，如果看到文章覺得有幫助也歡迎轉發網址給更多人看，若內容有誤也請不吝嗇回覆給我，非常感謝。\n","date":"2023-11-20T11:43:21+08:00","image":"https://wellstsai.com/post/hello-wells/cover_huf677ab5284dc3059c291ae31652dfe1d_179693_120x120_fill_q75_box_smart1.jpg","permalink":"https://wellstsai.com/post/hello-wells/","title":"Hello Wells"}]